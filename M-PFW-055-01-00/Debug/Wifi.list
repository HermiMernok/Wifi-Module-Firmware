
Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a054  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2f0  0800a2f0  0001a2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a2f8  0800a2f8  0001a2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000178  20000000  0800a300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f40  20000178  0800a478  00020178  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200020b8  0800a478  000220b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003152d  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005707  00000000  00000000  000516d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001a60  00000000  00000000  00056de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001808  00000000  00000000  00058840  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e4c7  00000000  00000000  0005a048  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007aff  00000000  00000000  0006850f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007000e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006cf4  00000000  00000000  0007008c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000178 	.word	0x20000178
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a1c4 	.word	0x0800a1c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000017c 	.word	0x2000017c
 80001c4:	0800a1c4 	.word	0x0800a1c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004dc:	2003      	movs	r0, #3
 80004de:	f001 f993 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 f806 	bl	80004f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004e8:	f008 fe06 	bl	80090f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_InitTick+0x30>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a09      	ldr	r2, [pc, #36]	; (8000528 <HAL_InitTick+0x34>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	099b      	lsrs	r3, r3, #6
 8000508:	4618      	mov	r0, r3
 800050a:	f001 f9b2 	bl	8001872 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800050e:	2200      	movs	r2, #0
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	f001 f982 	bl	800181e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800051a:	2300      	movs	r3, #0
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000120 	.word	0x20000120
 8000528:	10624dd3 	.word	0x10624dd3

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick++;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <HAL_IncTick+0x18>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x18>)
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	200003b8 	.word	0x200003b8

08000548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return uwTick;
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <HAL_GetTick+0x14>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	200003b8 	.word	0x200003b8

08000560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000568:	f7ff ffee 	bl	8000548 <HAL_GetTick>
 800056c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000578:	d002      	beq.n	8000580 <HAL_Delay+0x20>
  {
    wait++;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000580:	bf00      	nop
 8000582:	f7ff ffe1 	bl	8000548 <HAL_GetTick>
 8000586:	4602      	mov	r2, r0
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	1ad2      	subs	r2, r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	429a      	cmp	r2, r3
 8000590:	d3f7      	bcc.n	8000582 <HAL_Delay+0x22>
  {
  }
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	431a      	orrs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	609a      	str	r2, [r3, #8]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000604:	b490      	push	{r4, r7}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	603b      	str	r3, [r7, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3360      	adds	r3, #96	; 0x60
 8000616:	461a      	mov	r2, r3
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000620:	6822      	ldr	r2, [r4, #0]
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LL_ADC_SetOffset+0x40>)
 8000624:	4013      	ands	r3, r2
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	430a      	orrs	r2, r1
 8000630:	4313      	orrs	r3, r2
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bc90      	pop	{r4, r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	03fff000 	.word	0x03fff000

08000648 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000648:	b490      	push	{r4, r7}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3360      	adds	r3, #96	; 0x60
 8000656:	461a      	mov	r2, r3
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	461c      	mov	r4, r3
  
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000660:	6823      	ldr	r3, [r4, #0]
 8000662:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bc90      	pop	{r4, r7}
 800066e:	4770      	bx	lr

08000670 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000670:	b490      	push	{r4, r7}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = (uint32_t *)((uint32_t)
                            ((uint32_t)(&ADCx->OFR1) + (Offsety*4U)));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3360      	adds	r3, #96	; 0x60
 8000680:	461a      	mov	r2, r3
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	009b      	lsls	r3, r3, #2
  register uint32_t *preg = (uint32_t *)((uint32_t)
 8000686:	4413      	add	r3, r2
 8000688:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4313      	orrs	r3, r2
 8000694:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bc90      	pop	{r4, r7}
 800069e:	4770      	bx	lr

080006a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006a0:	b490      	push	{r4, r7}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
#if defined(CORE_CM0PLUS)
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3330      	adds	r3, #48	; 0x30
 80006b0:	4619      	mov	r1, r3
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80006b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006bc:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	fa93 f3a3 	rbit	r3, r3
 80006c4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	fa22 f303 	lsr.w	r3, r2, r3
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	461c      	mov	r4, r3
#endif
  
  MODIFY_REG(*preg,
 80006d6:	6822      	ldr	r2, [r4, #0]
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f003 031f 	and.w	r3, r3, #31
 80006de:	211f      	movs	r1, #31
 80006e0:	fa01 f303 	lsl.w	r3, r1, r3
 80006e4:	43db      	mvns	r3, r3
 80006e6:	401a      	ands	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	0e9b      	lsrs	r3, r3, #26
 80006ec:	f003 011f 	and.w	r1, r3, #31
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bc90      	pop	{r4, r7}
 8000706:	4770      	bx	lr

08000708 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000708:	b490      	push	{r4, r7}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3314      	adds	r3, #20
 8000718:	4619      	mov	r1, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	fa93 f3a3 	rbit	r3, r3
 800072c:	613b      	str	r3, [r7, #16]
  return(result);
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	fab3 f383 	clz	r3, r3
 8000734:	fa22 f303 	lsr.w	r3, r2, r3
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800073e:	6822      	ldr	r2, [r4, #0]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8000746:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 800074a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	fa93 f3a3 	rbit	r3, r3
 8000752:	61bb      	str	r3, [r7, #24]
  return(result);
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fab3 f383 	clz	r3, r3
 800075a:	fa21 f303 	lsr.w	r3, r1, r3
 800075e:	2107      	movs	r1, #7
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	401a      	ands	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 800076e:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	fa93 f3a3 	rbit	r3, r3
 800077a:	623b      	str	r3, [r7, #32]
  return(result);
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	fab3 f383 	clz	r3, r3
 8000782:	fa21 f303 	lsr.w	r3, r1, r3
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
#endif
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bc90      	pop	{r4, r7}
 8000798:	4770      	bx	lr
	...

0800079c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007b4:	43db      	mvns	r3, r3
 80007b6:	401a      	ands	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80007c0:	4099      	lsls	r1, r3
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	400b      	ands	r3, r1
 80007c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007ca:	431a      	orrs	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL << (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	0007ffff 	.word	0x0007ffff

080007e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80007f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	6093      	str	r3, [r2, #8]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800081c:	bf0c      	ite	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	2300      	movne	r3, #0
 8000822:	b2db      	uxtb	r3, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000844:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800086c:	bf0c      	ite	eq
 800086e:	2301      	moveq	r3, #1
 8000870:	2300      	movne	r3, #0
 8000872:	b2db      	uxtb	r3, r3
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	2b04      	cmp	r3, #4
 8000892:	bf0c      	ite	eq
 8000894:	2301      	moveq	r3, #1
 8000896:	2300      	movne	r3, #0
 8000898:	b2db      	uxtb	r3, r3
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpCFGR = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  __IO uint32_t wait_loop_index = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e1a7      	b.n	8000c16 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d109      	bne.n	80008e8 <HAL_ADC_Init+0x40>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f008 f88f 	bl	80089f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff8b 	bl	8000808 <LL_ADC_IsDeepPowerDownEnabled>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff71 	bl	80007e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ffa6 	bl	8000858 <LL_ADC_IsInternalRegulatorEnabled>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d116      	bne.n	8000940 <HAL_ADC_Init+0x98>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff8a 	bl	8000830 <LL_ADC_EnableInternalRegulator>
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800091c:	4b9d      	ldr	r3, [pc, #628]	; (8000b94 <HAL_ADC_Init+0x2ec>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a9d      	ldr	r2, [pc, #628]	; (8000b98 <HAL_ADC_Init+0x2f0>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0cda      	lsrs	r2, r3, #19
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0)
 8000932:	e002      	b.n	800093a <HAL_ADC_Init+0x92>
    {
      wait_loop_index--;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3b01      	subs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f9      	bne.n	8000934 <HAL_ADC_Init+0x8c>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff87 	bl	8000858 <LL_ADC_IsInternalRegulatorEnabled>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10d      	bne.n	800096c <HAL_ADC_Init+0xc4>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000954:	f043 0210 	orr.w	r2, r3, #16
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000960:	f043 0201 	orr.w	r2, r3, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	75fb      	strb	r3, [r7, #23]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	2b00      	cmp	r3, #0
 8000976:	f040 8145 	bne.w	8000c04 <HAL_ADC_Init+0x35c>
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff7e 	bl	8000880 <LL_ADC_REG_IsConversionOngoing>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	f040 813c 	bne.w	8000c04 <HAL_ADC_Init+0x35c>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000990:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000994:	f043 0202 	orr.w	r2, r3, #2
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d108      	bne.n	80009bc <HAL_ADC_Init+0x114>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d101      	bne.n	80009bc <HAL_ADC_Init+0x114>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e000      	b.n	80009be <HAL_ADC_Init+0x116>
 80009bc:	2300      	movs	r3, #0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d17b      	bne.n	8000aba <HAL_ADC_Init+0x212>
         (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a75      	ldr	r2, [pc, #468]	; (8000b9c <HAL_ADC_Init+0x2f4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d120      	bne.n	8000a0e <HAL_ADC_Init+0x166>
 80009cc:	4b74      	ldr	r3, [pc, #464]	; (8000ba0 <HAL_ADC_Init+0x2f8>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d105      	bne.n	80009e4 <HAL_ADC_Init+0x13c>
 80009d8:	4b71      	ldr	r3, [pc, #452]	; (8000ba0 <HAL_ADC_Init+0x2f8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d00b      	beq.n	80009fc <HAL_ADC_Init+0x154>
 80009e4:	4b6f      	ldr	r3, [pc, #444]	; (8000ba4 <HAL_ADC_Init+0x2fc>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d107      	bne.n	8000a00 <HAL_ADC_Init+0x158>
 80009f0:	4b6c      	ldr	r3, [pc, #432]	; (8000ba4 <HAL_ADC_Init+0x2fc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <HAL_ADC_Init+0x158>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <HAL_ADC_Init+0x15a>
 8000a00:	2300      	movs	r3, #0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	e04d      	b.n	8000aaa <HAL_ADC_Init+0x202>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a63      	ldr	r2, [pc, #396]	; (8000ba0 <HAL_ADC_Init+0x2f8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d120      	bne.n	8000a5a <HAL_ADC_Init+0x1b2>
 8000a18:	4b60      	ldr	r3, [pc, #384]	; (8000b9c <HAL_ADC_Init+0x2f4>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d105      	bne.n	8000a30 <HAL_ADC_Init+0x188>
 8000a24:	4b5d      	ldr	r3, [pc, #372]	; (8000b9c <HAL_ADC_Init+0x2f4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d00b      	beq.n	8000a48 <HAL_ADC_Init+0x1a0>
 8000a30:	4b5c      	ldr	r3, [pc, #368]	; (8000ba4 <HAL_ADC_Init+0x2fc>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d107      	bne.n	8000a4c <HAL_ADC_Init+0x1a4>
 8000a3c:	4b59      	ldr	r3, [pc, #356]	; (8000ba4 <HAL_ADC_Init+0x2fc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d101      	bne.n	8000a4c <HAL_ADC_Init+0x1a4>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <HAL_ADC_Init+0x1a6>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d120      	bne.n	8000a9a <HAL_ADC_Init+0x1f2>
 8000a58:	e013      	b.n	8000a82 <HAL_ADC_Init+0x1da>
 8000a5a:	4b50      	ldr	r3, [pc, #320]	; (8000b9c <HAL_ADC_Init+0x2f4>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d107      	bne.n	8000a76 <HAL_ADC_Init+0x1ce>
 8000a66:	4b4d      	ldr	r3, [pc, #308]	; (8000b9c <HAL_ADC_Init+0x2f4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Init+0x1ce>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <HAL_ADC_Init+0x1d0>
 8000a76:	2300      	movs	r3, #0
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10b      	bne.n	8000a9a <HAL_ADC_Init+0x1f2>
 8000a82:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <HAL_ADC_Init+0x2f8>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d107      	bne.n	8000a9e <HAL_ADC_Init+0x1f6>
 8000a8e:	4b44      	ldr	r3, [pc, #272]	; (8000ba0 <HAL_ADC_Init+0x2f8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d101      	bne.n	8000a9e <HAL_ADC_Init+0x1f6>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <HAL_ADC_Init+0x1f8>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d005      	beq.n	8000aba <HAL_ADC_Init+0x212>
      /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
      /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
      LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	483c      	ldr	r0, [pc, #240]	; (8000ba8 <HAL_ADC_Init+0x300>)
 8000ab6:	f7ff fd70 	bl	800059a <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                           |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000ac4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                         |
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                           |
 8000aca:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                        |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                         |
 8000ad0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d106      	bne.n	8000af2 <HAL_ADC_Init+0x24a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	045b      	lsls	r3, r3, #17
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d009      	beq.n	8000b0e <HAL_ADC_Init+0x266>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68d9      	ldr	r1, [r3, #12]
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <HAL_ADC_Init+0x304>)
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	430b      	orrs	r3, r1
 8000b20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 030c 	and.w	r3, r3, #12
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d147      	bne.n	8000bc0 <HAL_ADC_Init+0x318>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	005b      	lsls	r3, r3, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b4e:	f023 0302 	bic.w	r3, r3, #2
 8000b52:	6939      	ldr	r1, [r7, #16]
 8000b54:	430b      	orrs	r3, r1
 8000b56:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d127      	bne.n	8000bb0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b6e:	f023 0304 	bic.w	r3, r3, #4
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8000b7a:	4308      	orrs	r0, r1
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000b80:	4308      	orrs	r0, r1
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000b86:	4301      	orrs	r1, r0
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6113      	str	r3, [r2, #16]
 8000b90:	e016      	b.n	8000bc0 <HAL_ADC_Init+0x318>
 8000b92:	bf00      	nop
 8000b94:	20000120 	.word	0x20000120
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	50040000 	.word	0x50040000
 8000ba0:	50040100 	.word	0x50040100
 8000ba4:	50040200 	.word	0x50040200
 8000ba8:	50040300 	.word	0x50040300
 8000bac:	fff0c007 	.word	0xfff0c007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	6912      	ldr	r2, [r2, #16]
 8000bba:	f022 0201 	bic.w	r2, r2, #1
 8000bbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d10c      	bne.n	8000be2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000bd2:	f022 010f 	bic.w	r1, r2, #15
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	6a12      	ldr	r2, [r2, #32]
 8000bda:	3a01      	subs	r2, #1
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
 8000be0:	e007      	b.n	8000bf2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000bec:	f022 020f 	bic.w	r2, r2, #15
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f023 0303 	bic.w	r3, r3, #3
 8000bfa:	f043 0201 	orr.w	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	659a      	str	r2, [r3, #88]	; 0x58
 8000c02:	e007      	b.n	8000c14 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c08:	f043 0210 	orr.w	r2, r3, #16
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop

08000c20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0a4      	sub	sp, #144	; 0x90
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_ADC_ConfigChannel+0x22>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e330      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x684>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe16 	bl	8000880 <LL_ADC_REG_IsConversionOngoing>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8315 	bne.w	8001286 <HAL_ADC_ConfigChannel+0x666>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d823      	bhi.n	8000cac <HAL_ADC_ConfigChannel+0x8c>
    {
      switch (sConfig->Rank)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	3b02      	subs	r3, #2
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d81b      	bhi.n	8000ca6 <HAL_ADC_ConfigChannel+0x86>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_ADC_ConfigChannel+0x54>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000c8d 	.word	0x08000c8d
 8000c7c:	08000c95 	.word	0x08000c95
 8000c80:	08000c9d 	.word	0x08000c9d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	220c      	movs	r2, #12
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	e00f      	b.n	8000cac <HAL_ADC_ConfigChannel+0x8c>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2212      	movs	r2, #18
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	e00b      	b.n	8000cac <HAL_ADC_ConfigChannel+0x8c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2218      	movs	r2, #24
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	e007      	b.n	8000cac <HAL_ADC_ConfigChannel+0x8c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	e002      	b.n	8000cac <HAL_ADC_ConfigChannel+0x8c>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2206      	movs	r2, #6
 8000caa:	605a      	str	r2, [r3, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	6859      	ldr	r1, [r3, #4]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f7ff fcf1 	bl	80006a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f040 813d 	bne.w	8000f48 <HAL_ADC_ConfigChannel+0x328>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f7ff fd14 	bl	8000708 <LL_ADC_SetChannelSamplingTime>
      
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d00a      	beq.n	8000d18 <HAL_ADC_ConfigChannel+0xf8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	6919      	ldr	r1, [r3, #16]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d12:	f7ff fc77 	bl	8000604 <LL_ADC_SetOffset>
 8000d16:	e117      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x328>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fc92 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10a      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x124>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fc87 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	0e9b      	lsrs	r3, r3, #26
 8000d3e:	f003 021f 	and.w	r2, r3, #31
 8000d42:	e013      	b.n	8000d6c <HAL_ADC_ConfigChannel+0x14c>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fc7c 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 8000d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d105      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x164>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	0e9b      	lsrs	r3, r3, #26
 8000d7e:	f003 031f 	and.w	r3, r3, #31
 8000d82:	e009      	b.n	8000d98 <HAL_ADC_ConfigChannel+0x178>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8000d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d106      	bne.n	8000daa <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc63 	bl	8000670 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2101      	movs	r1, #1
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fc49 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10a      	bne.n	8000dd6 <HAL_ADC_ConfigChannel+0x1b6>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc3e 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	0e9b      	lsrs	r3, r3, #26
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	e00f      	b.n	8000df6 <HAL_ADC_ConfigChannel+0x1d6>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fc33 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de8:	fa93 f3a3 	rbit	r3, r3
 8000dec:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8000dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <HAL_ADC_ConfigChannel+0x1ee>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0e9b      	lsrs	r3, r3, #26
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	e009      	b.n	8000e22 <HAL_ADC_ConfigChannel+0x202>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e16:	fa93 f3a3 	rbit	r3, r3
 8000e1a:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 8000e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e1e:	fab3 f383 	clz	r3, r3
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d106      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x214>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fc1e 	bl	8000670 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fc04 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10a      	bne.n	8000e60 <HAL_ADC_ConfigChannel+0x240>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fbf9 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	0e9b      	lsrs	r3, r3, #26
 8000e5a:	f003 021f 	and.w	r2, r3, #31
 8000e5e:	e00f      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x260>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2102      	movs	r1, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fbee 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8000e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d105      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x278>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0e9b      	lsrs	r3, r3, #26
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	e009      	b.n	8000eac <HAL_ADC_ConfigChannel+0x28c>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8000ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ea8:	fab3 f383 	clz	r3, r3
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d106      	bne.n	8000ebe <HAL_ADC_ConfigChannel+0x29e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fbd9 	bl	8000670 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fbbf 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10a      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x2ca>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2103      	movs	r1, #3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fbb4 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	0e9b      	lsrs	r3, r3, #26
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	e00f      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x2ea>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2103      	movs	r1, #3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fba9 	bl	8000648 <LL_ADC_GetOffsetChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8000f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x302>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0e9b      	lsrs	r3, r3, #26
 8000f1c:	f003 031f 	and.w	r3, r3, #31
 8000f20:	e009      	b.n	8000f36 <HAL_ADC_ConfigChannel+0x316>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8000f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d106      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x328>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2103      	movs	r1, #3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fb94 	bl	8000670 <LL_ADC_SetOffsetState>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d108      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x348>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x348>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x34a>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 80f6 	bne.w	800115c <HAL_ADC_ConfigChannel+0x53c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f7ff fc0d 	bl	800079c <LL_ADC_SetChannelSingleDiff>
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4aac      	ldr	r2, [pc, #688]	; (8001238 <HAL_ADC_ConfigChannel+0x618>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	f040 80e7 	bne.w	800115c <HAL_ADC_ConfigChannel+0x53c>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x396>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	0e9b      	lsrs	r3, r3, #26
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	3301      	adds	r3, #1
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	bf94      	ite	ls
 8000fae:	2301      	movls	r3, #1
 8000fb0:	2300      	movhi	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	e00f      	b.n	8000fd6 <HAL_ADC_ConfigChannel+0x3b6>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8000fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	bf94      	ite	ls
 8000fd0:	2301      	movls	r3, #1
 8000fd2:	2300      	movhi	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d05b      	beq.n	8001092 <HAL_ADC_ConfigChannel+0x472>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d107      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x3d6>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0e9b      	lsrs	r3, r3, #26
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	069a      	lsls	r2, r3, #26
 8000ff4:	e00b      	b.n	800100e <HAL_ADC_ConfigChannel+0x3ee>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8001004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001006:	fab3 f383 	clz	r3, r3
 800100a:	3301      	adds	r3, #1
 800100c:	069a      	lsls	r2, r3, #26
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001016:	2b00      	cmp	r3, #0
 8001018:	d109      	bne.n	800102e <HAL_ADC_ConfigChannel+0x40e>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	0e9b      	lsrs	r3, r3, #26
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	3301      	adds	r3, #1
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	e00d      	b.n	800104a <HAL_ADC_ConfigChannel+0x42a>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800103c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	ea42 0103 	orr.w	r1, r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x450>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0e9b      	lsrs	r3, r3, #26
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	051b      	lsls	r3, r3, #20
 800106e:	e00e      	b.n	800108e <HAL_ADC_ConfigChannel+0x46e>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	051b      	lsls	r3, r3, #20
 800108e:	430b      	orrs	r3, r1
 8001090:	e05f      	b.n	8001152 <HAL_ADC_ConfigChannel+0x532>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x48e>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0e9b      	lsrs	r3, r3, #26
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	3301      	adds	r3, #1
 80010aa:	069a      	lsls	r2, r3, #26
 80010ac:	e00b      	b.n	80010c6 <HAL_ADC_ConfigChannel+0x4a6>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	623b      	str	r3, [r7, #32]
  return(result);
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	069a      	lsls	r2, r3, #26
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x4c6>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	0e9b      	lsrs	r3, r3, #26
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	3301      	adds	r3, #1
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	e00d      	b.n	8001102 <HAL_ADC_ConfigChannel+0x4e2>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	3301      	adds	r3, #1
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	ea42 0103 	orr.w	r1, r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <HAL_ADC_ConfigChannel+0x50c>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0e9b      	lsrs	r3, r3, #26
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	3b1b      	subs	r3, #27
 8001124:	051b      	lsls	r3, r3, #20
 8001126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112a:	e011      	b.n	8001150 <HAL_ADC_ConfigChannel+0x530>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	613b      	str	r3, [r7, #16]
  return(result);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	3b1b      	subs	r3, #27
 800114a:	051b      	lsls	r3, r3, #20
 800114c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001150:	430b      	orrs	r3, r1
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	6892      	ldr	r2, [r2, #8]
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fad6 	bl	8000708 <LL_ADC_SetChannelSamplingTime>
    /* HAL_ADC_DeInit().                                                      */
       
    /* Configuration of common ADC parameters                                 */
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a36      	ldr	r2, [pc, #216]	; (800123c <HAL_ADC_ConfigChannel+0x61c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d107      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x556>
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 8001166:	4836      	ldr	r0, [pc, #216]	; (8001240 <HAL_ADC_ConfigChannel+0x620>)
 8001168:	f7ff fa3d 	bl	80005e6 <LL_ADC_GetCommonPathInternalCh>
 800116c:	4603      	mov	r3, r0
 800116e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d019      	beq.n	80011aa <HAL_ADC_ConfigChannel+0x58a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800117a:	4a32      	ldr	r2, [pc, #200]	; (8001244 <HAL_ADC_ConfigChannel+0x624>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d107      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x570>
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8001180:	482f      	ldr	r0, [pc, #188]	; (8001240 <HAL_ADC_ConfigChannel+0x620>)
 8001182:	f7ff fa30 	bl	80005e6 <LL_ADC_GetCommonPathInternalCh>
 8001186:	4603      	mov	r3, r0
 8001188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <HAL_ADC_ConfigChannel+0x58a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8001194:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <HAL_ADC_ConfigChannel+0x628>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d17e      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x678>
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VREFINT) == 0U))
 800119a:	4829      	ldr	r0, [pc, #164]	; (8001240 <HAL_ADC_ConfigChannel+0x620>)
 800119c:	f7ff fa23 	bl	80005e6 <LL_ADC_GetCommonPathInternalCh>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d176      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x678>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */

      if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a23      	ldr	r2, [pc, #140]	; (800123c <HAL_ADC_ConfigChannel+0x61c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d126      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x5e2>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a24      	ldr	r2, [pc, #144]	; (800124c <HAL_ADC_ConfigChannel+0x62c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d004      	beq.n	80011c8 <HAL_ADC_ConfigChannel+0x5a8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a23      	ldr	r2, [pc, #140]	; (8001250 <HAL_ADC_ConfigChannel+0x630>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d167      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x678>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)));
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <HAL_ADC_ConfigChannel+0x620>)
 80011ca:	f7ff fa0c 	bl	80005e6 <LL_ADC_GetCommonPathInternalCh>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011d4:	4619      	mov	r1, r3
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <HAL_ADC_ConfigChannel+0x620>)
 80011d8:	f7ff f9f2 	bl	80005c0 <LL_ADC_SetCommonPathInternalCh>
          
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially          */
          /*       CPU processing cycles.                                 */
          wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_ADC_ConfigChannel+0x634>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_ADC_ConfigChannel+0x638>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0cda      	lsrs	r2, r3, #19
 80011e8:	4613      	mov	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0)
 80011f2:	e002      	b.n	80011fa <HAL_ADC_ConfigChannel+0x5da>
          {
            wait_loop_index--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f9      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x5d4>
 8001200:	e04a      	b.n	8001298 <HAL_ADC_ConfigChannel+0x678>
          }
        }
      }
      else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_ADC_ConfigChannel+0x624>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d127      	bne.n	800125c <HAL_ADC_ConfigChannel+0x63c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_ADC_ConfigChannel+0x62c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d004      	beq.n	8001220 <HAL_ADC_ConfigChannel+0x600>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_ADC_ConfigChannel+0x630>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d13b      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x678>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)));
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <HAL_ADC_ConfigChannel+0x620>)
 8001222:	f7ff f9e0 	bl	80005e6 <LL_ADC_GetCommonPathInternalCh>
 8001226:	4603      	mov	r3, r0
 8001228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122c:	4619      	mov	r1, r3
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <HAL_ADC_ConfigChannel+0x620>)
 8001230:	f7ff f9c6 	bl	80005c0 <LL_ADC_SetCommonPathInternalCh>
 8001234:	e030      	b.n	8001298 <HAL_ADC_ConfigChannel+0x678>
 8001236:	bf00      	nop
 8001238:	407f0000 	.word	0x407f0000
 800123c:	c7520000 	.word	0xc7520000
 8001240:	50040300 	.word	0x50040300
 8001244:	cb840000 	.word	0xcb840000
 8001248:	80000001 	.word	0x80000001
 800124c:	50040000 	.word	0x50040000
 8001250:	50040200 	.word	0x50040200
 8001254:	20000120 	.word	0x20000120
 8001258:	431bde83 	.word	0x431bde83
        }
      }
      else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_ADC_ConfigChannel+0x68c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d118      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_ADC_ConfigChannel+0x690>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d113      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x678>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)));
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <HAL_ADC_ConfigChannel+0x694>)
 8001272:	f7ff f9b8 	bl	80005e6 <LL_ADC_GetCommonPathInternalCh>
 8001276:	4603      	mov	r3, r0
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	4619      	mov	r1, r3
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <HAL_ADC_ConfigChannel+0x694>)
 8001280:	f7ff f99e 	bl	80005c0 <LL_ADC_SetCommonPathInternalCh>
 8001284:	e008      	b.n	8001298 <HAL_ADC_ConfigChannel+0x678>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f043 0220 	orr.w	r2, r3, #32
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
 80012a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3790      	adds	r7, #144	; 0x90
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	80000001 	.word	0x80000001
 80012b0:	50040000 	.word	0x50040000
 80012b4:	50040300 	.word	0x50040300

080012b8 <LL_ADC_REG_IsConversionOngoing>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b09e      	sub	sp, #120	; 0x78
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef  tmp_hal_status = HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e0b5      	b.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <HAL_ADCEx_MultiModeConfigChannel+0x194>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d102      	bne.n	8001316 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <HAL_ADCEx_MultiModeConfigChannel+0x198>)
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	e001      	b.n	800131a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  
  if (tmphadcSlave.Instance == NULL)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10b      	bne.n	8001338 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	f043 0220 	orr.w	r2, r3, #32
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e098      	b.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffbb 	bl	80012b8 <LL_ADC_REG_IsConversionOngoing>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d17f      	bne.n	8001448 <HAL_ADCEx_MultiModeConfigChannel+0x168>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffb4 	bl	80012b8 <LL_ADC_REG_IsConversionOngoing>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d178      	bne.n	8001448 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001356:	4b49      	ldr	r3, [pc, #292]	; (800147c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001358:	673b      	str	r3, [r7, #112]	; 0x70
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d03f      	beq.n	80013e2 <HAL_ADCEx_MultiModeConfigChannel+0x102>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 8001362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	035b      	lsls	r3, r3, #13
 8001374:	430b      	orrs	r3, r1
 8001376:	431a      	orrs	r2, r3
 8001378:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800137a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 800139c:	2300      	movs	r3, #0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d15c      	bne.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0x17c>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d107      	bne.n	80013be <HAL_ADCEx_MultiModeConfigChannel+0xde>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_ADCEx_MultiModeConfigChannel+0xde>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80013be:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d14b      	bne.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0x17c>
      {
          MODIFY_REG(tmpADC_Common->CCR,
 80013c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013cc:	f023 030f 	bic.w	r3, r3, #15
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	6811      	ldr	r1, [r2, #0]
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	6892      	ldr	r2, [r2, #8]
 80013d8:	430a      	orrs	r2, r1
 80013da:	431a      	orrs	r2, r3
 80013dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013de:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80013e0:	e03c      	b.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0x17c>
                    );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80013e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800140e:	2300      	movs	r3, #0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d123      	bne.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0x17c>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d107      	bne.n	8001430 <HAL_ADCEx_MultiModeConfigChannel+0x150>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_ADCEx_MultiModeConfigChannel+0x150>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_ADCEx_MultiModeConfigChannel+0x152>
 8001430:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	d112      	bne.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0x17c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800143e:	f023 030f 	bic.w	r3, r3, #15
 8001442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001444:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001446:	e009      	b.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0x17c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800145a:	e000      	b.n	800145e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800145c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
 8001466:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
} 
 800146a:	4618      	mov	r0, r3
 800146c:	3778      	adds	r7, #120	; 0x78
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	50040000 	.word	0x50040000
 8001478:	50040100 	.word	0x50040100
 800147c:	50040300 	.word	0x50040300

08001480 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0ec      	b.n	800166c <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f007 fb0c 	bl	8008abc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f022 0202 	bic.w	r2, r2, #2
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff f848 	bl	8000548 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ba:	e012      	b.n	80014e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff f844 	bl	8000548 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90b      	bls.n	80014e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0c4      	b.n	800166c <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e5      	bne.n	80014bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff f822 	bl	8000548 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff f81e 	bl	8000548 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e09e      	b.n	800166c <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0e5      	beq.n	8001508 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e5b      	ldrb	r3, [r3, #25]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e007      	b.n	8001590 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e9b      	ldrb	r3, [r3, #26]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	f022 0220 	bic.w	r2, r2, #32
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7edb      	ldrb	r3, [r3, #27]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	f022 0210 	bic.w	r2, r2, #16
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f042 0210 	orr.w	r2, r2, #16
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7f1b      	ldrb	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f042 0208 	orr.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f5b      	ldrb	r3, [r3, #29]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	f042 0204 	orr.w	r2, r2, #4
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6891      	ldr	r1, [r2, #8]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68d2      	ldr	r2, [r2, #12]
 8001644:	4311      	orrs	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6912      	ldr	r2, [r2, #16]
 800164a:	4311      	orrs	r1, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6952      	ldr	r2, [r2, #20]
 8001650:	4311      	orrs	r1, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6852      	ldr	r2, [r2, #4]
 8001656:	3a01      	subs	r2, #1
 8001658:	430a      	orrs	r2, r1
 800165a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016e2:	4909      	ldr	r1, [pc, #36]	; (8001708 <NVIC_EnableIRQ+0x30>)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	79fa      	ldrb	r2, [r7, #7]
 80016ec:	f002 021f 	and.w	r2, r2, #31
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	da0b      	bge.n	8001738 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	490d      	ldr	r1, [pc, #52]	; (8001758 <NVIC_SetPriority+0x4c>)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	3b04      	subs	r3, #4
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001736:	e009      	b.n	800174c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	4908      	ldr	r1, [pc, #32]	; (800175c <NVIC_SetPriority+0x50>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	e000e100 	.word	0xe000e100

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	2201      	movs	r2, #1
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	401a      	ands	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a6:	2101      	movs	r1, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	1e59      	subs	r1, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff90 	bl	800170c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff2f 	bl	8001674 <NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff44 	bl	80016bc <NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff90 	bl	8001760 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5f 	bl	800170c <NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff37 	bl	80016d8 <NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b04      	cmp	r3, #4
 8001898:	d106      	bne.n	80018a8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80018a6:	e005      	b.n	80018b4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80018c8:	f000 f802 	bl	80018d0 <HAL_SYSTICK_Callback>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e098      	b.n	8001a24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_DMA_Init+0x150>)
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d80f      	bhi.n	800191e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_DMA_Init+0x154>)
 8001906:	4413      	add	r3, r2
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_DMA_Init+0x158>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	009a      	lsls	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a48      	ldr	r2, [pc, #288]	; (8001a3c <HAL_DMA_Init+0x15c>)
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
 800191c:	e00e      	b.n	800193c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_DMA_Init+0x160>)
 8001926:	4413      	add	r3, r2
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_DMA_Init+0x158>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	009a      	lsls	r2, r3, #2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_DMA_Init+0x164>)
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001996:	d039      	beq.n	8001a0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_DMA_Init+0x15c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11a      	bne.n	80019d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019a2:	4929      	ldr	r1, [pc, #164]	; (8001a48 <HAL_DMA_Init+0x168>)
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_DMA_Init+0x168>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	f003 031c 	and.w	r3, r3, #28
 80019b0:	200f      	movs	r0, #15
 80019b2:	fa00 f303 	lsl.w	r3, r0, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4013      	ands	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019bc:	4822      	ldr	r0, [pc, #136]	; (8001a48 <HAL_DMA_Init+0x168>)
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_DMA_Init+0x168>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f003 031c 	and.w	r3, r3, #28
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	6003      	str	r3, [r0, #0]
 80019d6:	e019      	b.n	8001a0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019d8:	491c      	ldr	r1, [pc, #112]	; (8001a4c <HAL_DMA_Init+0x16c>)
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_DMA_Init+0x16c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 031c 	and.w	r3, r3, #28
 80019e6:	200f      	movs	r0, #15
 80019e8:	fa00 f303 	lsl.w	r3, r0, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4013      	ands	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019f2:	4816      	ldr	r0, [pc, #88]	; (8001a4c <HAL_DMA_Init+0x16c>)
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_DMA_Init+0x16c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f003 031c 	and.w	r3, r3, #28
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40020407 	.word	0x40020407
 8001a34:	bffdfff8 	.word	0xbffdfff8
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	bffdfbf8 	.word	0xbffdfbf8
 8001a44:	40020400 	.word	0x40020400
 8001a48:	400200a8 	.word	0x400200a8
 8001a4c:	400204a8 	.word	0x400204a8

08001a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Start_IT+0x20>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e04b      	b.n	8001b08 <HAL_DMA_Start_IT+0xb8>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d13a      	bne.n	8001afa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f8e0 	bl	8001c6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	f042 020e 	orr.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e00f      	b.n	8001ae8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	f042 020a 	orr.w	r2, r2, #10
 8001ae6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e005      	b.n	8001b06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
 8001b04:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f003 031c 	and.w	r3, r3, #28
 8001b30:	2204      	movs	r2, #4
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d026      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x7a>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d021      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	f022 0204 	bic.w	r2, r2, #4
 8001b62:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b6c:	f002 021c 	and.w	r2, r2, #28
 8001b70:	2104      	movs	r1, #4
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d071      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001b88:	e06c      	b.n	8001c64 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f003 031c 	and.w	r3, r3, #28
 8001b92:	2202      	movs	r2, #2
 8001b94:	409a      	lsls	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02e      	beq.n	8001bfc <HAL_DMA_IRQHandler+0xec>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d029      	beq.n	8001bfc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10b      	bne.n	8001bce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f022 020a 	bic.w	r2, r2, #10
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bd6:	f002 021c 	and.w	r2, r2, #28
 8001bda:	2102      	movs	r1, #2
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d038      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bfa:	e033      	b.n	8001c64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f003 031c 	and.w	r3, r3, #28
 8001c04:	2208      	movs	r2, #8
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d02a      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x156>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d025      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f022 020e 	bic.w	r2, r2, #14
 8001c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c32:	f002 021c 	and.w	r2, r2, #28
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
}
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c84:	f002 021c 	and.w	r2, r2, #28
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d108      	bne.n	8001cb2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cb0:	e007      	b.n	8001cc2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	60da      	str	r2, [r3, #12]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ce6:	e17f      	b.n	8001fe8 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2101      	movs	r1, #1
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8171 	beq.w	8001fe2 <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x40>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b12      	cmp	r3, #18
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d00b      	beq.n	8001dac <HAL_GPIO_Init+0xdc>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da0:	2b11      	cmp	r3, #17
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d118      	bne.n	8001e4c <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e20:	2201      	movs	r2, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f003 0201 	and.w	r2, r3, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80ac 	beq.w	8001fe2 <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	4a5e      	ldr	r2, [pc, #376]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6613      	str	r3, [r2, #96]	; 0x60
 8001e96:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ea2:	4a59      	ldr	r2, [pc, #356]	; (8002008 <HAL_GPIO_Init+0x338>)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x24a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4e      	ldr	r2, [pc, #312]	; (800200c <HAL_GPIO_Init+0x33c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x246>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <HAL_GPIO_Init+0x340>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x242>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4c      	ldr	r2, [pc, #304]	; (8002014 <HAL_GPIO_Init+0x344>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x23e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	; (8002018 <HAL_GPIO_Init+0x348>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x23a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4a      	ldr	r2, [pc, #296]	; (800201c <HAL_GPIO_Init+0x34c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x236>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_GPIO_Init+0x350>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x232>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e00c      	b.n	8001f1c <HAL_GPIO_Init+0x24c>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00a      	b.n	8001f1c <HAL_GPIO_Init+0x24c>
 8001f06:	2305      	movs	r3, #5
 8001f08:	e008      	b.n	8001f1c <HAL_GPIO_Init+0x24c>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x24c>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x24c>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x24c>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x24c>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f2c:	4936      	ldr	r1, [pc, #216]	; (8002008 <HAL_GPIO_Init+0x338>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5e:	4a31      	ldr	r2, [pc, #196]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_GPIO_Init+0x354>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f47f ae78 	bne.w	8001ce8 <HAL_GPIO_Init+0x18>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40021000 	.word	0x40021000
 8002008:	40010000 	.word	0x40010000
 800200c:	48000400 	.word	0x48000400
 8002010:	48000800 	.word	0x48000800
 8002014:	48000c00 	.word	0x48000c00
 8002018:	48001000 	.word	0x48001000
 800201c:	48001400 	.word	0x48001400
 8002020:	48001800 	.word	0x48001800
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 800203e:	e0cd      	b.n	80021dc <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002040:	2201      	movs	r2, #1
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	409a      	lsls	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80c1 	beq.w	80021d6 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2103      	movs	r1, #3
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	08d9      	lsrs	r1, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3108      	adds	r1, #8
 8002074:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	200f      	movs	r0, #15
 8002082:	fa00 f303 	lsl.w	r3, r0, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	4019      	ands	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2103      	movs	r1, #3
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	2101      	movs	r1, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	401a      	ands	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2103      	movs	r1, #3
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d6:	2101      	movs	r1, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	401a      	ands	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 80020e6:	4a44      	ldr	r2, [pc, #272]	; (80021f8 <HAL_GPIO_DeInit+0x1d0>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210e:	d025      	beq.n	800215c <HAL_GPIO_DeInit+0x134>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <HAL_GPIO_DeInit+0x1d4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d01f      	beq.n	8002158 <HAL_GPIO_DeInit+0x130>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a39      	ldr	r2, [pc, #228]	; (8002200 <HAL_GPIO_DeInit+0x1d8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d019      	beq.n	8002154 <HAL_GPIO_DeInit+0x12c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a38      	ldr	r2, [pc, #224]	; (8002204 <HAL_GPIO_DeInit+0x1dc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_GPIO_DeInit+0x128>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a37      	ldr	r2, [pc, #220]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00d      	beq.n	800214c <HAL_GPIO_DeInit+0x124>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a36      	ldr	r2, [pc, #216]	; (800220c <HAL_GPIO_DeInit+0x1e4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <HAL_GPIO_DeInit+0x120>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a35      	ldr	r2, [pc, #212]	; (8002210 <HAL_GPIO_DeInit+0x1e8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_GPIO_DeInit+0x11c>
 8002140:	2306      	movs	r3, #6
 8002142:	e00c      	b.n	800215e <HAL_GPIO_DeInit+0x136>
 8002144:	2307      	movs	r3, #7
 8002146:	e00a      	b.n	800215e <HAL_GPIO_DeInit+0x136>
 8002148:	2305      	movs	r3, #5
 800214a:	e008      	b.n	800215e <HAL_GPIO_DeInit+0x136>
 800214c:	2304      	movs	r3, #4
 800214e:	e006      	b.n	800215e <HAL_GPIO_DeInit+0x136>
 8002150:	2303      	movs	r3, #3
 8002152:	e004      	b.n	800215e <HAL_GPIO_DeInit+0x136>
 8002154:	2302      	movs	r3, #2
 8002156:	e002      	b.n	800215e <HAL_GPIO_DeInit+0x136>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_DeInit+0x136>
 800215c:	2300      	movs	r3, #0
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	fa03 f202 	lsl.w	r2, r3, r2
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d132      	bne.n	80021d6 <HAL_GPIO_DeInit+0x1ae>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002180:	481d      	ldr	r0, [pc, #116]	; (80021f8 <HAL_GPIO_DeInit+0x1d0>)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	491c      	ldr	r1, [pc, #112]	; (80021f8 <HAL_GPIO_DeInit+0x1d0>)
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	0892      	lsrs	r2, r2, #2
 800218c:	3202      	adds	r2, #2
 800218e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	43d2      	mvns	r2, r2
 8002196:	400a      	ands	r2, r1
 8002198:	3302      	adds	r3, #2
 800219a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 800219e:	491d      	ldr	r1, [pc, #116]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 80021ac:	4919      	ldr	r1, [pc, #100]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4013      	ands	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 80021ba:	4916      	ldr	r1, [pc, #88]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021bc:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	4013      	ands	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 80021c8:	4912      	ldr	r1, [pc, #72]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_GPIO_DeInit+0x1ec>)
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4013      	ands	r3, r2
 80021d4:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f af2b 	bne.w	8002040 <HAL_GPIO_DeInit+0x18>
  }
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	48000400 	.word	0x48000400
 8002200:	48000800 	.word	0x48000800
 8002204:	48000c00 	.word	0x48000c00
 8002208:	48001000 	.word	0x48001000
 800220c:	48001400 	.word	0x48001400
 8002210:	48001800 	.word	0x48001800
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002234:	e002      	b.n	800223c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_I2C_Init+0x1a>
  {
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e080      	b.n	8002364 <HAL_I2C_Init+0x11c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f006 fd74 	bl	8008d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6852      	ldr	r2, [r2, #4]
 800229c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	6892      	ldr	r2, [r2, #8]
 80022ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_I2C_Init+0x82>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6892      	ldr	r2, [r2, #8]
 80022d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d104      	bne.n	80022ea <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	68d2      	ldr	r2, [r2, #12]
 8002308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6911      	ldr	r1, [r2, #16]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6952      	ldr	r2, [r2, #20]
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6992      	ldr	r2, [r2, #24]
 8002320:	0212      	lsls	r2, r2, #8
 8002322:	430a      	orrs	r2, r1
 8002324:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	69d1      	ldr	r1, [r2, #28]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a12      	ldr	r2, [r2, #32]
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_I2C_DeInit+0x1a>
  {
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e021      	b.n	80023ca <HAL_I2C_DeInit+0x5e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2224      	movs	r2, #36	; 0x24
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f006 fd18 	bl	8008dd4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	460b      	mov	r3, r1
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	f040 80fb 	bne.w	80025f2 <HAL_I2C_Mem_Read+0x21e>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_I2C_Mem_Read+0x34>
 8002402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0ef      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Mem_Read+0x4e>
 800241e:	2302      	movs	r3, #2
 8002420:	e0e8      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800242a:	f7fe f88d 	bl	8000548 <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2319      	movs	r3, #25
 8002436:	2201      	movs	r2, #1
 8002438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f959 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0d3      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2222      	movs	r2, #34	; 0x22
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002474:	88f8      	ldrh	r0, [r7, #6]
 8002476:	893a      	ldrh	r2, [r7, #8]
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4603      	mov	r3, r0
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f8bd 	bl	8002604 <I2C_RequestMemoryRead>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0ab      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2bff      	cmp	r3, #255	; 0xff
 80024a4:	d90e      	bls.n	80024c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	22ff      	movs	r2, #255	; 0xff
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	8979      	ldrh	r1, [r7, #10]
 80024b4:	4b51      	ldr	r3, [pc, #324]	; (80025fc <HAL_I2C_Mem_Read+0x228>)
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fa3b 	bl	8002938 <I2C_TransferConfig>
 80024c2:	e00f      	b.n	80024e4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	8979      	ldrh	r1, [r7, #10]
 80024d6:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_I2C_Mem_Read+0x228>)
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fa2a 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	2200      	movs	r2, #0
 80024ec:	2104      	movs	r1, #4
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f900 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07a      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c59      	adds	r1, r3, #1
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	6251      	str	r1, [r2, #36]	; 0x24
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d034      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x1cc>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d130      	bne.n	80025a0 <HAL_I2C_Mem_Read+0x1cc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f8d3 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x184>
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e04d      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2bff      	cmp	r3, #255	; 0xff
 8002560:	d90e      	bls.n	8002580 <HAL_I2C_Mem_Read+0x1ac>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	b2da      	uxtb	r2, r3
 800256e:	8979      	ldrh	r1, [r7, #10]
 8002570:	2300      	movs	r3, #0
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f9dd 	bl	8002938 <I2C_TransferConfig>
 800257e:	e00f      	b.n	80025a0 <HAL_I2C_Mem_Read+0x1cc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	b2da      	uxtb	r2, r3
 8002590:	8979      	ldrh	r1, [r7, #10]
 8002592:	2300      	movs	r3, #0
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f9cc 	bl	8002938 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d19c      	bne.n	80024e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f920 	bl	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Mem_Read+0x1ea>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e01a      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2220      	movs	r2, #32
 80025c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_I2C_Mem_Read+0x22c>)
 80025d2:	400b      	ands	r3, r1
 80025d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e000      	b.n	80025f4 <HAL_I2C_Mem_Read+0x220>
  }
  else
  {
    return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
  }
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	80002400 	.word	0x80002400
 8002600:	fe00e800 	.word	0xfe00e800

08002604 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	817b      	strh	r3, [r7, #10]
 8002616:	460b      	mov	r3, r1
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	8979      	ldrh	r1, [r7, #10]
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <I2C_RequestMemoryRead+0xa4>)
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2300      	movs	r3, #0
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f984 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f89d 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02c      	b.n	800269e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	893a      	ldrh	r2, [r7, #8]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
 8002654:	e015      	b.n	8002682 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	893a      	ldrh	r2, [r7, #8]
 800265c:	0a12      	lsrs	r2, r2, #8
 800265e:	b292      	uxth	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f883 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e012      	b.n	800269e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	893a      	ldrh	r2, [r7, #8]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2200      	movs	r2, #0
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f831 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	80002000 	.word	0x80002000

080026ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d103      	bne.n	80026ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d007      	beq.n	80026e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	6992      	ldr	r2, [r2, #24]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	619a      	str	r2, [r3, #24]
  }
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002704:	e022      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d01e      	beq.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270e:	f7fd ff1b 	bl	8000548 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad2      	subs	r2, r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d802      	bhi.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d113      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e00f      	b.n	800276c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	401a      	ands	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	429a      	cmp	r2, r3
 8002768:	d0cd      	beq.n	8002706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002780:	e02c      	b.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f870 	bl	800286c <I2C_IsAcknowledgeFailed>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e02a      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d01e      	beq.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7fd fed3 	bl	8000548 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d802      	bhi.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d113      	bne.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e007      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d1cb      	bne.n	8002782 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	e028      	b.n	8002854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f830 	bl	800286c <I2C_IsAcknowledgeFailed>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e026      	b.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7fd fe97 	bl	8000548 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d802      	bhi.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d113      	bne.n	8002854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b20      	cmp	r3, #32
 8002860:	d1cf      	bne.n	8002802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b10      	cmp	r3, #16
 8002884:	d151      	bne.n	800292a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002886:	e022      	b.n	80028ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d01e      	beq.n	80028ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7fd fe5a 	bl	8000548 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d802      	bhi.n	80028a6 <I2C_IsAcknowledgeFailed+0x3a>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d113      	bne.n	80028ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e02e      	b.n	800292c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d1d5      	bne.n	8002888 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2210      	movs	r2, #16
 80028e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2220      	movs	r2, #32
 80028ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fedd 	bl	80026ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <I2C_IsAcknowledgeFailed+0xc8>)
 80028fe:	400b      	ands	r3, r1
 8002900:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fe00e800 	.word	0xfe00e800

08002938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	4613      	mov	r3, r2
 8002948:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	0d5b      	lsrs	r3, r3, #21
 8002958:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <I2C_TransferConfig+0x54>)
 800295e:	4303      	orrs	r3, r0
 8002960:	43db      	mvns	r3, r3
 8002962:	4019      	ands	r1, r3
 8002964:	897b      	ldrh	r3, [r7, #10]
 8002966:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800296a:	7a7b      	ldrb	r3, [r7, #9]
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002972:	4318      	orrs	r0, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4318      	orrs	r0, r3
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4303      	orrs	r3, r0
 800297c:	430b      	orrs	r3, r1
 800297e:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	03ff63ff 	.word	0x03ff63ff

08002990 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d138      	bne.n	8002a18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e032      	b.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	6811      	ldr	r1, [r2, #0]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d139      	bne.n	8002ab0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e033      	b.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2224      	movs	r2, #36	; 0x24
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac0:	b08f      	sub	sp, #60	; 0x3c
 8002ac2:	af0a      	add	r7, sp, #40	; 0x28
 8002ac4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0fb      	b.n	8002cc8 <HAL_PCD_Init+0x20a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f006 fe2d 	bl	8009744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 faf6 	bl	80060e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	687e      	ldr	r6, [r7, #4]
 8002b04:	466d      	mov	r5, sp
 8002b06:	f106 0410 	add.w	r4, r6, #16
 8002b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b1a:	1d33      	adds	r3, r6, #4
 8002b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b1e:	6838      	ldr	r0, [r7, #0]
 8002b20:	f003 fa8f 	bl	8006042 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 faed 	bl	800610a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e04a      	b.n	8002bcc <HAL_PCD_Init+0x10e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	333d      	adds	r3, #61	; 0x3d
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	333c      	adds	r3, #60	; 0x3c
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	b298      	uxth	r0, r3
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3342      	adds	r3, #66	; 0x42
 8002b72:	4602      	mov	r2, r0
 8002b74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	333f      	adds	r3, #63	; 0x3f
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3344      	adds	r3, #68	; 0x44
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3348      	adds	r3, #72	; 0x48
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3350      	adds	r3, #80	; 0x50
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b0e      	cmp	r3, #14
 8002bd0:	d9b1      	bls.n	8002b36 <HAL_PCD_Init+0x78>
  }

  for (i = 0U; i < 15U; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e044      	b.n	8002c62 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b0e      	cmp	r3, #14
 8002c66:	d9b7      	bls.n	8002bd8 <HAL_PCD_Init+0x11a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	687e      	ldr	r6, [r7, #4]
 8002c70:	466d      	mov	r5, sp
 8002c72:	f106 0410 	add.w	r4, r6, #16
 8002c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c82:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c86:	1d33      	adds	r3, r6, #4
 8002c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	f003 fa68 	bl	8006160 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_PCD_Init+0x1f0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 ff95 	bl	8003bd8 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_PCD_Init+0x1fe>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 ffb2 	bl	8003c20 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 f994 	bl	8006fee <USB_DevDisconnect>

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_PCD_Start+0x16>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e012      	b.n	8002d0c <HAL_PCD_Start+0x3c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f004 f962 	bl	8006fbc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 f9e2 	bl	80060c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	; 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t TempReg = USBx_BASE + 0x40U;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	3340      	adds	r3, #64	; 0x40
 8002d2a:	623b      	str	r3, [r7, #32]
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 fa03 	bl	8007146 <USB_GetMode>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 8442 	bne.w	80035cc <HAL_PCD_IRQHandler+0x8b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 f967 	bl	8007020 <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8438 	beq.w	80035ca <HAL_PCD_IRQHandler+0x8b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 f95e 	bl	8007020 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d107      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x6a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	6952      	ldr	r2, [r2, #20]
 8002d78:	f002 0202 	and.w	r2, r2, #2
 8002d7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f94c 	bl	8007020 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d92:	f040 8087 	bne.w	8002ea4 <HAL_PCD_IRQHandler+0x190>
    {
      epnum = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f951 	bl	8007046 <USB_ReadDevAllOutEpInterrupt>
 8002da4:	6338      	str	r0, [r7, #48]	; 0x30

      while (ep_intr != 0U)
 8002da6:	e07a      	b.n	8002e9e <HAL_PCD_IRQHandler+0x18a>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d06f      	beq.n	8002e92 <HAL_PCD_IRQHandler+0x17e>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 f976 	bl	80070ae <USB_ReadDevOutEPInterrupt>
 8002dc2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02c      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x114>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2301      	movs	r3, #1
 8002dde:	6093      	str	r3, [r2, #8]

            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4a8c      	ldr	r2, [pc, #560]	; (8003014 <HAL_PCD_IRQHandler+0x300>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d119      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x108>
            {
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_PCD_IRQHandler+0xfa>
              {
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0a:	6093      	str	r3, [r2, #8]
 8002e0c:	e00c      	b.n	8002e28 <HAL_PCD_IRQHandler+0x114>
              else
              {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f006 fcf9 	bl	800980c <HAL_PCD_DataOutStageCallback>
 8002e1a:	e005      	b.n	8002e28 <HAL_PCD_IRQHandler+0x114>
            else
            {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f006 fcf2 	bl	800980c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <HAL_PCD_IRQHandler+0x162>
          {
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4a77      	ldr	r2, [pc, #476]	; (8003014 <HAL_PCD_IRQHandler+0x300>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d111      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x14a>
            {
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_PCD_IRQHandler+0x14a>
              {
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5c:	6093      	str	r3, [r2, #8]
            }
            /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->SetupStageCallback(hpcd);
#else
            HAL_PCD_SetupStageCallback(hpcd);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f006 fcc2 	bl	80097e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e70:	461a      	mov	r2, r3
 8002e72:	2308      	movs	r3, #8
 8002e74:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_PCD_IRQHandler+0x17e>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2310      	movs	r3, #16
 8002e90:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	3301      	adds	r3, #1
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ep_intr >>= 1U;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
      while (ep_intr != 0U)
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d181      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x94>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 f8b9 	bl	8007020 <USB_ReadInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eb8:	f040 8088 	bne.w	8002fcc <HAL_PCD_IRQHandler+0x2b8>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f004 f8da 	bl	800707a <USB_ReadDevAllInEpInterrupt>
 8002ec6:	6338      	str	r0, [r7, #48]	; 0x30

      epnum = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (ep_intr != 0U)
 8002ecc:	e07b      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x2b2>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d070      	beq.n	8002fba <HAL_PCD_IRQHandler+0x2a6>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 f901 	bl	80070ea <USB_ReadDevInEPInterrupt>
 8002ee8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_PCD_IRQHandler+0x224>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	2201      	movs	r2, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4013      	ands	r3, r2
 8002f18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f26:	461a      	mov	r2, r3
 8002f28:	2301      	movs	r3, #1
 8002f2a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f006 fc85 	bl	8009842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x240>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2308      	movs	r3, #8
 8002f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x25c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x278>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	2340      	movs	r3, #64	; 0x40
 8002f8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x294>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_PCD_IRQHandler+0x2a6>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fd30 	bl	8003a1a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ep_intr >>= 1U;
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
      while (ep_intr != 0U)
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d180      	bne.n	8002ece <HAL_PCD_IRQHandler+0x1ba>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 f825 	bl	8007020 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fe0:	d125      	bne.n	800302e <HAL_PCD_IRQHandler+0x31a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10a      	bne.n	8003018 <HAL_PCD_IRQHandler+0x304>
      {
        hpcd->LPM_State = LPM_L0;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800300a:	2100      	movs	r1, #0
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f006 ff45 	bl	8009e9c <HAL_PCDEx_LPM_Callback>
 8003012:	e004      	b.n	800301e <HAL_PCD_IRQHandler+0x30a>
 8003014:	4f54310a 	.word	0x4f54310a
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f006 fc85 	bl	8009928 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	6952      	ldr	r2, [r2, #20]
 8003028:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800302c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fff4 	bl	8007020 <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003042:	d112      	bne.n	800306a <HAL_PCD_IRQHandler+0x356>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <HAL_PCD_IRQHandler+0x346>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f006 fc3f 	bl	80098d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	6952      	ldr	r2, [r2, #20]
 8003064:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003068:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f003 ffd6 	bl	8007020 <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800307a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800307e:	d121      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x3b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	6952      	ldr	r2, [r2, #20]
 800308a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800308e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d111      	bne.n	80030be <HAL_PCD_IRQHandler+0x3aa>
      {
        hpcd->LPM_State = LPM_L1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80030b4:	2101      	movs	r1, #1
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f006 fef0 	bl	8009e9c <HAL_PCDEx_LPM_Callback>
 80030bc:	e002      	b.n	80030c4 <HAL_PCD_IRQHandler+0x3b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f006 fc0a 	bl	80098d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 ffa9 	bl	8007020 <USB_ReadInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d8:	f040 80ac 	bne.w	8003234 <HAL_PCD_IRQHandler+0x520>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e2:	461a      	mov	r2, r3
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2110      	movs	r1, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 f965 	bl	80063c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
 8003102:	e038      	b.n	8003176 <HAL_PCD_IRQHandler+0x462>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	4413      	add	r3, r2
 800310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003110:	461a      	mov	r2, r3
 8003112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003116:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	4413      	add	r3, r2
 8003120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003124:	4619      	mov	r1, r3
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003138:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003146:	461a      	mov	r2, r3
 8003148:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800314c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	4619      	mov	r1, r3
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	4413      	add	r3, r2
 8003164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800316e:	600b      	str	r3, [r1, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	3301      	adds	r3, #1
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317c:	429a      	cmp	r2, r3
 800317e:	d8c1      	bhi.n	8003104 <HAL_PCD_IRQHandler+0x3f0>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	461a      	mov	r2, r3
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003194:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <HAL_PCD_IRQHandler+0x4bc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a4:	461a      	mov	r2, r3
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b0:	f043 030b 	orr.w	r3, r3, #11
 80031b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	461a      	mov	r2, r3
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	f043 030b 	orr.w	r3, r3, #11
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	e015      	b.n	80031fc <HAL_PCD_IRQHandler+0x4e8>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d6:	461a      	mov	r2, r3
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f043 030b 	orr.w	r3, r3, #11
 80031e4:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	461a      	mov	r2, r3
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f043 030b 	orr.w	r3, r3, #11
 80031fa:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003202:	461a      	mov	r2, r3
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003210:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f003 ffd7 	bl	80071d2 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	6952      	ldr	r2, [r2, #20]
 800322e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 fef1 	bl	8007020 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	f040 80c2 	bne.w	80033d0 <HAL_PCD_IRQHandler+0x6bc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f003 ff86 	bl	8007162 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	68d2      	ldr	r2, [r2, #12]
 8003260:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003264:	60da      	str	r2, [r3, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8003272:	f001 fa51 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8003276:	6138      	str	r0, [r7, #16]

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4a7c      	ldr	r2, [pc, #496]	; (800346c <HAL_PCD_IRQHandler+0x758>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d90c      	bls.n	800329a <HAL_PCD_IRQHandler+0x586>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4a7b      	ldr	r2, [pc, #492]	; (8003470 <HAL_PCD_IRQHandler+0x75c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d808      	bhi.n	800329a <HAL_PCD_IRQHandler+0x586>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	68d2      	ldr	r2, [r2, #12]
 8003292:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e08f      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4a74      	ldr	r2, [pc, #464]	; (8003470 <HAL_PCD_IRQHandler+0x75c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d90c      	bls.n	80032bc <HAL_PCD_IRQHandler+0x5a8>
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a73      	ldr	r2, [pc, #460]	; (8003474 <HAL_PCD_IRQHandler+0x760>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d808      	bhi.n	80032bc <HAL_PCD_IRQHandler+0x5a8>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	68d2      	ldr	r2, [r2, #12]
 80032b4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e07e      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4a6d      	ldr	r2, [pc, #436]	; (8003474 <HAL_PCD_IRQHandler+0x760>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d90c      	bls.n	80032de <HAL_PCD_IRQHandler+0x5ca>
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4a6c      	ldr	r2, [pc, #432]	; (8003478 <HAL_PCD_IRQHandler+0x764>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d808      	bhi.n	80032de <HAL_PCD_IRQHandler+0x5ca>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e06d      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4a65      	ldr	r2, [pc, #404]	; (8003478 <HAL_PCD_IRQHandler+0x764>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d90c      	bls.n	8003300 <HAL_PCD_IRQHandler+0x5ec>
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4a64      	ldr	r2, [pc, #400]	; (800347c <HAL_PCD_IRQHandler+0x768>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d808      	bhi.n	8003300 <HAL_PCD_IRQHandler+0x5ec>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e05c      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4a5e      	ldr	r2, [pc, #376]	; (800347c <HAL_PCD_IRQHandler+0x768>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d90c      	bls.n	8003322 <HAL_PCD_IRQHandler+0x60e>
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4a5d      	ldr	r2, [pc, #372]	; (8003480 <HAL_PCD_IRQHandler+0x76c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d808      	bhi.n	8003322 <HAL_PCD_IRQHandler+0x60e>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	68d2      	ldr	r2, [r2, #12]
 800331a:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	e04b      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4a56      	ldr	r2, [pc, #344]	; (8003480 <HAL_PCD_IRQHandler+0x76c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d90c      	bls.n	8003344 <HAL_PCD_IRQHandler+0x630>
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4a55      	ldr	r2, [pc, #340]	; (8003484 <HAL_PCD_IRQHandler+0x770>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d808      	bhi.n	8003344 <HAL_PCD_IRQHandler+0x630>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	68d2      	ldr	r2, [r2, #12]
 800333c:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	e03a      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4a4f      	ldr	r2, [pc, #316]	; (8003484 <HAL_PCD_IRQHandler+0x770>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d90c      	bls.n	8003366 <HAL_PCD_IRQHandler+0x652>
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4a4e      	ldr	r2, [pc, #312]	; (8003488 <HAL_PCD_IRQHandler+0x774>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d808      	bhi.n	8003366 <HAL_PCD_IRQHandler+0x652>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e029      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4a47      	ldr	r2, [pc, #284]	; (8003488 <HAL_PCD_IRQHandler+0x774>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d90c      	bls.n	8003388 <HAL_PCD_IRQHandler+0x674>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4a46      	ldr	r2, [pc, #280]	; (800348c <HAL_PCD_IRQHandler+0x778>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d808      	bhi.n	8003388 <HAL_PCD_IRQHandler+0x674>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	68d2      	ldr	r2, [r2, #12]
 8003380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	e018      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4a40      	ldr	r2, [pc, #256]	; (800348c <HAL_PCD_IRQHandler+0x778>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d90c      	bls.n	80033aa <HAL_PCD_IRQHandler+0x696>
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4a3f      	ldr	r2, [pc, #252]	; (8003490 <HAL_PCD_IRQHandler+0x77c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d808      	bhi.n	80033aa <HAL_PCD_IRQHandler+0x696>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	e007      	b.n	80033ba <HAL_PCD_IRQHandler+0x6a6>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	68d2      	ldr	r2, [r2, #12]
 80033b4:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80033b8:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f006 fa69 	bl	8009892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	6952      	ldr	r2, [r2, #20]
 80033ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fe23 	bl	8007020 <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d176      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x7be>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	6992      	ldr	r2, [r2, #24]
 80033ee:	f022 0210 	bic.w	r2, r2, #16
 80033f2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	60fb      	str	r3, [r7, #12]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 020f 	and.w	r2, r3, #15
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60bb      	str	r3, [r7, #8]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	0c5b      	lsrs	r3, r3, #17
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	2b02      	cmp	r3, #2
 800341e:	d139      	bne.n	8003494 <HAL_PCD_IRQHandler+0x780>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04a      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x7ae>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	68d9      	ldr	r1, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	b29b      	uxth	r3, r3
 8003436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003440:	f003 fc8f 	bl	8006d62 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003450:	441a      	add	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003462:	441a      	add	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	619a      	str	r2, [r3, #24]
 8003468:	e02b      	b.n	80034c2 <HAL_PCD_IRQHandler+0x7ae>
 800346a:	bf00      	nop
 800346c:	00d8acbf 	.word	0x00d8acbf
 8003470:	00e4e1bf 	.word	0x00e4e1bf
 8003474:	00f423ff 	.word	0x00f423ff
 8003478:	0106737f 	.word	0x0106737f
 800347c:	011a499f 	.word	0x011a499f
 8003480:	01312cff 	.word	0x01312cff
 8003484:	014ca43f 	.word	0x014ca43f
 8003488:	016e35ff 	.word	0x016e35ff
 800348c:	01a6ab1f 	.word	0x01a6ab1f
 8003490:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	0c5b      	lsrs	r3, r3, #17
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	2b06      	cmp	r3, #6
 800349e:	d110      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x7ae>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034a6:	2208      	movs	r2, #8
 80034a8:	4619      	mov	r1, r3
 80034aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ac:	f003 fc59 	bl	8006d62 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034bc:	441a      	add	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	6992      	ldr	r2, [r2, #24]
 80034cc:	f042 0210 	orr.w	r2, r2, #16
 80034d0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fda2 	bl	8007020 <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d10a      	bne.n	80034fc <HAL_PCD_IRQHandler+0x7e8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f006 f9c5 	bl	8009876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	6952      	ldr	r2, [r2, #20]
 80034f6:	f002 0208 	and.w	r2, r2, #8
 80034fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fd8d 	bl	8007020 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003510:	d10d      	bne.n	800352e <HAL_PCD_IRQHandler+0x81a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f006 fa41 	bl	80099a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	6952      	ldr	r2, [r2, #20]
 8003528:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800352c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fd74 	bl	8007020 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003542:	d10d      	bne.n	8003560 <HAL_PCD_IRQHandler+0x84c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f006 fa16 	bl	800997c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	6952      	ldr	r2, [r2, #20]
 800355a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800355e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f003 fd5b 	bl	8007020 <USB_ReadInterrupts>
 800356a:	4603      	mov	r3, r0
 800356c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d10a      	bne.n	800358c <HAL_PCD_IRQHandler+0x878>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f006 fa24 	bl	80099c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	6952      	ldr	r2, [r2, #20]
 8003586:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800358a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f003 fd45 	bl	8007020 <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d115      	bne.n	80035cc <HAL_PCD_IRQHandler+0x8b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x8a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f006 fa14 	bl	80099e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	6851      	ldr	r1, [r2, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	e000      	b.n	80035cc <HAL_PCD_IRQHandler+0x8b8>
      return;
 80035ca:	bf00      	nop
    }
  }
}
 80035cc:	3738      	adds	r7, #56	; 0x38
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_PCD_SetAddress+0x1a>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e013      	b.n	8003616 <HAL_PCD_SetAddress+0x42>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fcb0 	bl	8006f6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	4608      	mov	r0, r1
 8003628:	4611      	mov	r1, r2
 800362a:	461a      	mov	r2, r3
 800362c:	4603      	mov	r3, r0
 800362e:	70fb      	strb	r3, [r7, #3]
 8003630:	460b      	mov	r3, r1
 8003632:	803b      	strh	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800363c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003640:	2b00      	cmp	r3, #0
 8003642:	da0f      	bge.n	8003664 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	f003 020f 	and.w	r2, r3, #15
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	3338      	adds	r3, #56	; 0x38
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	3304      	adds	r3, #4
 800365a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	705a      	strb	r2, [r3, #1]
 8003662:	e00f      	b.n	8003684 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	3304      	adds	r3, #4
 800367c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003690:	883a      	ldrh	r2, [r7, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	78ba      	ldrb	r2, [r7, #2]
 800369a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036ae:	78bb      	ldrb	r3, [r7, #2]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d102      	bne.n	80036ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_PCD_EP_Open+0xaa>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e00e      	b.n	80036e6 <HAL_PCD_EP_Open+0xc8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 fed8 	bl	800648c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80036e4:	7afb      	ldrb	r3, [r7, #11]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da0f      	bge.n	8003722 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3338      	adds	r3, #56	; 0x38
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	705a      	strb	r2, [r3, #1]
 8003720:	e00f      	b.n	8003742 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 020f 	and.w	r2, r3, #15
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	3304      	adds	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_PCD_EP_Close+0x6e>
 8003758:	2302      	movs	r3, #2
 800375a:	e00e      	b.n	800377a <HAL_PCD_EP_Close+0x8c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	4618      	mov	r0, r3
 800376c:	f002 ff1a 	bl	80065a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	460b      	mov	r3, r1
 8003790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	3304      	adds	r3, #4
 80037aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6979      	ldr	r1, [r7, #20]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f003 f961 	bl	8006aa8 <USB_EP0StartXfer>
 80037e6:	e005      	b.n	80037f4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6979      	ldr	r1, [r7, #20]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 ff60 	bl	80066b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	460b      	mov	r3, r1
 800383e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3338      	adds	r3, #56	; 0x38
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2201      	movs	r2, #1
 800386e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8003870:	7afb      	ldrb	r3, [r7, #11]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2da      	uxtb	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 800387c:	7afb      	ldrb	r3, [r7, #11]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	4618      	mov	r0, r3
 800388e:	f003 f90b 	bl	8006aa8 <USB_EP0StartXfer>
 8003892:	e005      	b.n	80038a0 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6979      	ldr	r1, [r7, #20]
 800389a:	4618      	mov	r0, r3
 800389c:	f002 ff0a 	bl	80066b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	f003 020f 	and.w	r2, r3, #15
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d901      	bls.n	80038c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04e      	b.n	8003966 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	da0f      	bge.n	80038f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 020f 	and.w	r2, r3, #15
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	3338      	adds	r3, #56	; 0x38
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	705a      	strb	r2, [r3, #1]
 80038ee:	e00d      	b.n	800390c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	3304      	adds	r3, #4
 8003904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_PCD_EP_SetStall+0x82>
 8003928:	2302      	movs	r3, #2
 800392a:	e01c      	b.n	8003966 <HAL_PCD_EP_SetStall+0xbc>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	4618      	mov	r0, r3
 800393c:	f003 fa3a 	bl	8006db4 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f003 fc3b 	bl	80071d2 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d901      	bls.n	800398c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e042      	b.n	8003a12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800398c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	da0f      	bge.n	80039b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	3338      	adds	r3, #56	; 0x38
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	3304      	adds	r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	705a      	strb	r2, [r3, #1]
 80039b2:	e00f      	b.n	80039d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 020f 	and.w	r2, r3, #15
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	3304      	adds	r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_PCD_EP_ClrStall+0x86>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e00e      	b.n	8003a12 <HAL_PCD_EP_ClrStall+0xa4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fa48 	bl	8006e98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b088      	sub	sp, #32
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3338      	adds	r3, #56	; 0x38
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3304      	adds	r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d901      	bls.n	8003a52 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e066      	b.n	8003b20 <PCD_WriteEmptyTxFifo+0x106>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d202      	bcs.n	8003a6e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3303      	adds	r3, #3
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003a76:	e026      	b.n	8003ac6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d202      	bcs.n	8003a94 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3303      	adds	r3, #3
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68d9      	ldr	r1, [r3, #12]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	6978      	ldr	r0, [r7, #20]
 8003aaa:	f003 f929 	bl	8006d00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d909      	bls.n	8003af0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d203      	bcs.n	8003af0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1c3      	bne.n	8003a78 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d810      	bhi.n	8003b1e <PCD_WriteEmptyTxFifo+0x104>
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003afc:	2201      	movs	r2, #1
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
 8003b34:	4613      	mov	r3, r2
 8003b36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	883a      	ldrh	r2, [r7, #0]
 8003b4c:	0411      	lsls	r1, r2, #16
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
 8003b54:	e028      	b.n	8003ba8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e00d      	b.n	8003b86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	3340      	adds	r3, #64	; 0x40
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	3301      	adds	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3ec      	bcc.n	8003b6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	883a      	ldrh	r2, [r7, #0]
 8003b9a:	0410      	lsls	r0, r2, #16
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4302      	orrs	r2, r0
 8003ba0:	3340      	adds	r3, #64	; 0x40
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	f043 0303 	orr.w	r3, r3, #3
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]

  hpcd->battery_charging_active = 1U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2 
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif  
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40007000 	.word	0x40007000

08003c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7e:	d12f      	bne.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c80:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8c:	d037      	beq.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c8e:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c90:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	0c9b      	lsrs	r3, r3, #18
 8003caa:	2232      	movs	r2, #50	; 0x32
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003cb2:	e002      	b.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d006      	beq.n	8003cce <HAL_PWREx_ControlVoltageScaling+0x62>
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d0f2      	beq.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cda:	d110      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e00f      	b.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cec:	d007      	beq.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cee:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cfc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}  
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	20000120 	.word	0x20000120
 8003d14:	431bde83 	.word	0x431bde83

08003d18 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply. 
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003d1c:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d26:	6053      	str	r3, [r2, #4]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40007000 	.word	0x40007000

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e356      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80d0 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x1c0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8003d58:	4ba1      	ldr	r3, [pc, #644]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d179      	bne.n	8003e58 <HAL_RCC_OscConfig+0x120>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d64:	4b9e      	ldr	r3, [pc, #632]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_OscConfig+0x44>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_OscConfig+0x44>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e33d      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	4b97      	ldr	r3, [pc, #604]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_RCC_OscConfig+0x5e>
 8003d8c:	4b94      	ldr	r3, [pc, #592]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d94:	e005      	b.n	8003da2 <HAL_RCC_OscConfig+0x6a>
 8003d96:	4b92      	ldr	r3, [pc, #584]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d923      	bls.n	8003dee <HAL_RCC_OscConfig+0xb6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fce8 	bl	8004780 <RCC_SetFlashLatencyFromMSIRange>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCC_OscConfig+0x82>
          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e31e      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dba:	4a89      	ldr	r2, [pc, #548]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003dbc:	4b88      	ldr	r3, [pc, #544]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4986      	ldr	r1, [pc, #536]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003dc8:	4b85      	ldr	r3, [pc, #532]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd8:	4981      	ldr	r1, [pc, #516]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003dda:	4b81      	ldr	r3, [pc, #516]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	e022      	b.n	8003e34 <HAL_RCC_OscConfig+0xfc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dee:	4a7c      	ldr	r2, [pc, #496]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003df0:	4b7b      	ldr	r3, [pc, #492]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f043 0308 	orr.w	r3, r3, #8
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4979      	ldr	r1, [pc, #484]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003dfc:	4b78      	ldr	r3, [pc, #480]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e0c:	4974      	ldr	r1, [pc, #464]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e0e:	4b74      	ldr	r3, [pc, #464]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fcab 	bl	8004780 <RCC_SetFlashLatencyFromMSIRange>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e2e1      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e34:	f000 fbc0 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8003e38:	4601      	mov	r1, r0
 8003e3a:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	4a67      	ldr	r2, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	5cd3      	ldrb	r3, [r2, r3]
 8003e48:	fa21 f303 	lsr.w	r3, r1, r3
 8003e4c:	4a66      	ldr	r2, [pc, #408]	; (8003fe8 <HAL_RCC_OscConfig+0x2b0>)
 8003e4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7fc fb4f 	bl	80004f4 <HAL_InitTick>
 8003e56:	e04f      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d032      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x18e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e60:	4a5f      	ldr	r2, [pc, #380]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e6c:	f7fc fb6c 	bl	8000548 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e74:	f7fc fb68 	bl	8000548 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e2b8      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003e86:	4b56      	ldr	r3, [pc, #344]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x13c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e92:	4a53      	ldr	r2, [pc, #332]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e94:	4b52      	ldr	r3, [pc, #328]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f043 0308 	orr.w	r3, r3, #8
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4950      	ldr	r1, [pc, #320]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003ea0:	4b4f      	ldr	r3, [pc, #316]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eb0:	494b      	ldr	r1, [pc, #300]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
 8003ec4:	e018      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1c0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ec6:	4a46      	ldr	r2, [pc, #280]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003ec8:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ed2:	f7fc fb39 	bl	8000548 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x1b4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eda:	f7fc fb35 	bl	8000548 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e285      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8003eec:	4b3c      	ldr	r3, [pc, #240]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x1a2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d07b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8003f04:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCC_OscConfig+0x1f0>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f10:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	d111      	bne.n	8003f40 <HAL_RCC_OscConfig+0x208>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f1c:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d10b      	bne.n	8003f40 <HAL_RCC_OscConfig+0x208>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d062      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2c2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d15e      	bne.n	8003ffa <HAL_RCC_OscConfig+0x2c2>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e25b      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f48:	d106      	bne.n	8003f58 <HAL_RCC_OscConfig+0x220>
 8003f4a:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e01d      	b.n	8003f94 <HAL_RCC_OscConfig+0x25c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x244>
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f64:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0x25c>
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4a15      	ldr	r2, [pc, #84]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fc fad4 	bl	8000548 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7fc fad0 	bl	8000548 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e220      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_RCC_OscConfig+0x2a8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x26c>
 8003fc2:	e01b      	b.n	8003ffc <HAL_RCC_OscConfig+0x2c4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fc fac0 	bl	8000548 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003fca:	e00f      	b.n	8003fec <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fc fabc 	bl	8000548 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d908      	bls.n	8003fec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e20c      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	0800a2a8 	.word	0x0800a2a8
 8003fe8:	20000120 	.word	0x20000120
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003fec:	4ba9      	ldr	r3, [pc, #676]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e9      	bne.n	8003fcc <HAL_RCC_OscConfig+0x294>
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x2c4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d069      	beq.n	80040dc <HAL_RCC_OscConfig+0x3a4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004008:	4ba2      	ldr	r3, [pc, #648]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b04      	cmp	r3, #4
 8004012:	d00b      	beq.n	800402c <HAL_RCC_OscConfig+0x2f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004014:	4b9f      	ldr	r3, [pc, #636]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d11c      	bne.n	800405a <HAL_RCC_OscConfig+0x322>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004020:	4b9c      	ldr	r3, [pc, #624]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d116      	bne.n	800405a <HAL_RCC_OscConfig+0x322>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402c:	4b99      	ldr	r3, [pc, #612]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_OscConfig+0x30c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_OscConfig+0x30c>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e1d9      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004044:	4993      	ldr	r1, [pc, #588]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004046:	4b93      	ldr	r3, [pc, #588]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004058:	e040      	b.n	80040dc <HAL_RCC_OscConfig+0x3a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d023      	beq.n	80040aa <HAL_RCC_OscConfig+0x372>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004062:	4a8c      	ldr	r2, [pc, #560]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004064:	4b8b      	ldr	r3, [pc, #556]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fc fa6b 	bl	8000548 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004076:	f7fc fa67 	bl	8000548 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e1b7      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004088:	4b82      	ldr	r3, [pc, #520]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004094:	497f      	ldr	r1, [pc, #508]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004096:	4b7f      	ldr	r3, [pc, #508]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
 80040a8:	e018      	b.n	80040dc <HAL_RCC_OscConfig+0x3a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040aa:	4a7a      	ldr	r2, [pc, #488]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80040ac:	4b79      	ldr	r3, [pc, #484]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fc fa47 	bl	8000548 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040be:	f7fc fa43 	bl	8000548 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e193      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80040d0:	4b70      	ldr	r3, [pc, #448]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03c      	beq.n	8004162 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f0:	4a68      	ldr	r2, [pc, #416]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80040f2:	4b68      	ldr	r3, [pc, #416]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80040f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fc fa22 	bl	8000548 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004108:	f7fc fa1e 	bl	8000548 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e16e      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800411a:	4b5e      	ldr	r3, [pc, #376]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800411c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <HAL_RCC_OscConfig+0x3d0>
 8004128:	e01b      	b.n	8004162 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412a:	4a5a      	ldr	r2, [pc, #360]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800412c:	4b59      	ldr	r3, [pc, #356]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fc fa05 	bl	8000548 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004142:	f7fc fa01 	bl	8000548 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e151      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ef      	bne.n	8004142 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80a6 	beq.w	80042bc <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004170:	2300      	movs	r3, #0
 8004172:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004174:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10d      	bne.n	800419c <HAL_RCC_OscConfig+0x464>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004180:	4a44      	ldr	r2, [pc, #272]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004182:	4b44      	ldr	r3, [pc, #272]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418a:	6593      	str	r3, [r2, #88]	; 0x58
 800418c:	4b41      	ldr	r3, [pc, #260]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419c:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <HAL_RCC_OscConfig+0x560>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d118      	bne.n	80041da <HAL_RCC_OscConfig+0x4a2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a8:	4a3b      	ldr	r2, [pc, #236]	; (8004298 <HAL_RCC_OscConfig+0x560>)
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_OscConfig+0x560>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b4:	f7fc f9c8 	bl	8000548 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041bc:	f7fc f9c4 	bl	8000548 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e114      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ce:	4b32      	ldr	r3, [pc, #200]	; (8004298 <HAL_RCC_OscConfig+0x560>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x484>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d108      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4bc>
 80041e2:	4a2c      	ldr	r2, [pc, #176]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f2:	e024      	b.n	800423e <HAL_RCC_OscConfig+0x506>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b05      	cmp	r3, #5
 80041fa:	d110      	bne.n	800421e <HAL_RCC_OscConfig+0x4e6>
 80041fc:	4a25      	ldr	r2, [pc, #148]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 800420e:	4b21      	ldr	r3, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800421c:	e00f      	b.n	800423e <HAL_RCC_OscConfig+0x506>
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004220:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f023 0304 	bic.w	r3, r3, #4
 800423a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_RCC_OscConfig+0x53c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fc f97f 	bl	8000548 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x52c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fc f97b 	bl	8000548 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0c9      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_OscConfig+0x55c>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ed      	beq.n	800424e <HAL_RCC_OscConfig+0x516>
 8004272:	e01a      	b.n	80042aa <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fc f968 	bl	8000548 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800427a:	e00f      	b.n	800429c <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fc f964 	bl	8000548 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	; 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d906      	bls.n	800429c <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0b2      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800429c:	4b58      	ldr	r3, [pc, #352]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e8      	bne.n	800427c <HAL_RCC_OscConfig+0x544>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b0:	4a53      	ldr	r2, [pc, #332]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80042b2:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8098 	beq.w	80043f6 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	f000 808f 	beq.w	80043f2 <HAL_RCC_OscConfig+0x6ba>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d156      	bne.n	800438a <HAL_RCC_OscConfig+0x652>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042dc:	4a48      	ldr	r2, [pc, #288]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80042de:	4b48      	ldr	r3, [pc, #288]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fc f92e 	bl	8000548 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x5ca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fc f92a 	bl	8000548 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x5ca>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e07a      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5b8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430e:	493c      	ldr	r1, [pc, #240]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	3b01      	subs	r3, #1
 8004316:	011a      	lsls	r2, r3, #4
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	045b      	lsls	r3, r3, #17
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	3b01      	subs	r3, #1
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	065b      	lsls	r3, r3, #25
 8004346:	4313      	orrs	r3, r2
 8004348:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800434a:	4a2d      	ldr	r2, [pc, #180]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 800434c:	4b2c      	ldr	r3, [pc, #176]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004354:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004356:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004360:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fc f8f1 	bl	8000548 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x644>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436a:	f7fc f8ed 	bl	8000548 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x644>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e03d      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x632>
 8004388:	e035      	b.n	80043f6 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 800438c:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004394:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <HAL_RCC_OscConfig+0x682>
#if defined(RCC_PLLSAI2_SUPPORT)
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80043a2:	4b17      	ldr	r3, [pc, #92]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           &&
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <HAL_RCC_OscConfig+0x682>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043ae:	4a14      	ldr	r2, [pc, #80]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f023 0303 	bic.w	r3, r3, #3
 80043b8:	60d3      	str	r3, [r2, #12]
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043ba:	4a11      	ldr	r2, [pc, #68]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fc f8bd 	bl	8000548 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x6ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fc f8b9 	bl	8000548 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e009      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_RCC_OscConfig+0x6c8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f0      	bne.n	80043d2 <HAL_RCC_OscConfig+0x69a>
 80043f0:	e001      	b.n	80043f6 <HAL_RCC_OscConfig+0x6be>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_RCC_OscConfig+0x6c0>
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000

08004404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t pllfreq = 0;
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0c2      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004418:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0207 	and.w	r2, r3, #7
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d210      	bcs.n	8004448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4960      	ldr	r1, [pc, #384]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 8004428:	4b5f      	ldr	r3, [pc, #380]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 0207 	bic.w	r2, r3, #7
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b5c      	ldr	r3, [pc, #368]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0207 	and.w	r2, r3, #7
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0aa      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d04c      	beq.n	80044ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d107      	bne.n	800446c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d121      	bne.n	80044ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e098      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d107      	bne.n	8004484 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8004474:	4b4d      	ldr	r3, [pc, #308]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d115      	bne.n	80044ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e08c      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d107      	bne.n	800449c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800448c:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e080      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800449c:	4b43      	ldr	r3, [pc, #268]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e078      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044ac:	493f      	ldr	r1, [pc, #252]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044be:	f7fc f843 	bl	8000548 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c6:	f7fc f83f 	bl	8000548 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e060      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044dc:	4b33      	ldr	r3, [pc, #204]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 020c 	and.w	r2, r3, #12
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d1eb      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fa:	492c      	ldr	r1, [pc, #176]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0207 	and.w	r2, r3, #7
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d910      	bls.n	800453c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4923      	ldr	r1, [pc, #140]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 0207 	bic.w	r2, r3, #7
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <HAL_RCC_ClockConfig+0x1a4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0207 	and.w	r2, r3, #7
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e030      	b.n	800459e <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4918      	ldr	r1, [pc, #96]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4911      	ldr	r1, [pc, #68]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800457a:	f000 f81d 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <HAL_RCC_ClockConfig+0x1a8>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <HAL_RCC_ClockConfig+0x1ac>)
 800458c:	5cd3      	ldrb	r3, [r2, r3]
 800458e:	fa21 f303 	lsr.w	r3, r1, r3
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_RCC_ClockConfig+0x1b0>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004596:	2000      	movs	r0, #0
 8004598:	f7fb ffac 	bl	80004f4 <HAL_InitTick>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40022000 	.word	0x40022000
 80045ac:	40021000 	.word	0x40021000
 80045b0:	0800a2a8 	.word	0x0800a2a8
 80045b4:	20000120 	.word	0x20000120

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	2302      	movs	r3, #2
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	2302      	movs	r3, #2
 80045d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80045d6:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80045e2:	4b49      	ldr	r3, [pc, #292]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d127      	bne.n	800463e <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80045ee:	4b46      	ldr	r3, [pc, #280]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d121      	bne.n	800463e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80045fa:	4b43      	ldr	r3, [pc, #268]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d107      	bne.n	8004616 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004606:	4b40      	ldr	r3, [pc, #256]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 8004608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e005      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004616:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004622:	4a3a      	ldr	r2, [pc, #232]	; (800470c <HAL_RCC_GetSysClockFreq+0x154>)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462a:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800462c:	4b36      	ldr	r3, [pc, #216]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b00      	cmp	r3, #0
 8004636:	d113      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800463c:	e010      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800463e:	4b32      	ldr	r3, [pc, #200]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b04      	cmp	r3, #4
 8004648:	d102      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCC_GetSysClockFreq+0x158>)
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e007      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004650:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d101      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800465c:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <HAL_RCC_GetSysClockFreq+0x15c>)
 800465e:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004660:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b0c      	cmp	r3, #12
 800466a:	d145      	bne.n	80046f8 <HAL_RCC_GetSysClockFreq+0x140>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004676:	4b24      	ldr	r3, [pc, #144]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	3301      	adds	r3, #1
 8004682:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d002      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0xd8>
 800468a:	2b03      	cmp	r3, #3
 800468c:	d00d      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0xf2>
 800468e:	e019      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x10c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <HAL_RCC_GetSysClockFreq+0x158>)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 800469a:	68d2      	ldr	r2, [r2, #12]
 800469c:	0a12      	lsrs	r2, r2, #8
 800469e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	613b      	str	r3, [r7, #16]
      break;
 80046a8:	e019      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046aa:	4a1a      	ldr	r2, [pc, #104]	; (8004714 <HAL_RCC_GetSysClockFreq+0x15c>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	4a15      	ldr	r2, [pc, #84]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 80046b4:	68d2      	ldr	r2, [r2, #12]
 80046b6:	0a12      	lsrs	r2, r2, #8
 80046b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046bc:	fb02 f303 	mul.w	r3, r2, r3
 80046c0:	613b      	str	r3, [r7, #16]
      break;
 80046c2:	e00c      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 80046ce:	68d2      	ldr	r2, [r2, #12]
 80046d0:	0a12      	lsrs	r2, r2, #8
 80046d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	613b      	str	r3, [r7, #16]
      break;
 80046dc:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_GetSysClockFreq+0x150>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	0e5b      	lsrs	r3, r3, #25
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	3301      	adds	r3, #1
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80046f8:	68fb      	ldr	r3, [r7, #12]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	0800a2c0 	.word	0x0800a2c0
 8004710:	00f42400 	.word	0x00f42400
 8004714:	016e3600 	.word	0x016e3600

08004718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000120 	.word	0x20000120

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4601      	mov	r1, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4a03      	ldr	r2, [pc, #12]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	0800a2b8 	.word	0x0800a2b8

08004758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800475c:	f7ff ffdc 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004760:	4601      	mov	r1, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	0adb      	lsrs	r3, r3, #11
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4a03      	ldr	r2, [pc, #12]	; (800477c <HAL_RCC_GetPCLK2Freq+0x24>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40021000 	.word	0x40021000
 800477c:	0800a2b8 	.word	0x0800a2b8

08004780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800479c:	f7ff fa58 	bl	8003c50 <HAL_PWREx_GetVoltageRange>
 80047a0:	6178      	str	r0, [r7, #20]
 80047a2:	e014      	b.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a4:	4a25      	ldr	r2, [pc, #148]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6593      	str	r3, [r2, #88]	; 0x58
 80047b0:	4b22      	ldr	r3, [pc, #136]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047bc:	f7ff fa48 	bl	8003c50 <HAL_PWREx_GetVoltageRange>
 80047c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d4:	d10b      	bne.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b80      	cmp	r3, #128	; 0x80
 80047da:	d919      	bls.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2ba0      	cmp	r3, #160	; 0xa0
 80047e0:	d902      	bls.n	80047e8 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047e2:	2302      	movs	r3, #2
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e013      	b.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047e8:	2301      	movs	r3, #1
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e010      	b.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x90>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d902      	bls.n	80047fa <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047f4:	2303      	movs	r3, #3
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	e00a      	b.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b80      	cmp	r3, #128	; 0x80
 80047fe:	d102      	bne.n	8004806 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004800:	2302      	movs	r3, #2
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	e004      	b.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b70      	cmp	r3, #112	; 0x70
 800480a:	d101      	bne.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800480c:	2301      	movs	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004810:	490b      	ldr	r1, [pc, #44]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 0207 	bic.w	r2, r3, #7
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0207 	and.w	r2, r3, #7
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d001      	beq.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	40022000 	.word	0x40022000

08004844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004854:	2300      	movs	r3, #0
 8004856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004858:	2300      	movs	r3, #0
 800485a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004864:	2b00      	cmp	r3, #0
 8004866:	d03f      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004870:	d01c      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004876:	d802      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800487c:	e01f      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800487e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004888:	d01c      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800488a:	e018      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800488c:	4a82      	ldr	r2, [pc, #520]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800488e:	4b82      	ldr	r3, [pc, #520]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004896:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004898:	e015      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fab3 	bl	8004e0c <RCCEx_PLLSAI1_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048aa:	e00c      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3320      	adds	r3, #32
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb9c 	bl	8004ff0 <RCCEx_PLLSAI2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	74fb      	strb	r3, [r7, #19]
      break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 80048c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048cc:	4972      	ldr	r1, [pc, #456]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80048ce:	4b72      	ldr	r3, [pc, #456]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048e2:	e001      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d03f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048fc:	d01c      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004902:	d802      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004908:	e01f      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800490a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800490e:	d003      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004910:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004914:	d01c      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004916:	e018      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004918:	4a5f      	ldr	r2, [pc, #380]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800491a:	4b5f      	ldr	r3, [pc, #380]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004922:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004924:	e015      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fa6d 	bl	8004e0c <RCCEx_PLLSAI1_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004936:	e00c      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3320      	adds	r3, #32
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb56 	bl	8004ff0 <RCCEx_PLLSAI2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004948:	e003      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	74fb      	strb	r3, [r7, #19]
      break;
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004958:	494f      	ldr	r1, [pc, #316]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800495a:	4b4f      	ldr	r3, [pc, #316]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800496e:	e001      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 809a 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b44      	ldr	r3, [pc, #272]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10d      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	4a41      	ldr	r2, [pc, #260]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004994:	4b40      	ldr	r3, [pc, #256]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499c:	6593      	str	r3, [r2, #88]	; 0x58
 800499e:	4b3e      	ldr	r3, [pc, #248]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ae:	4a3b      	ldr	r2, [pc, #236]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049b0:	4b3a      	ldr	r3, [pc, #232]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049ba:	f7fb fdc5 	bl	8000548 <HAL_GetTick>
 80049be:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80049c0:	e009      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c2:	f7fb fdc1 	bl	8000548 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d902      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	74fb      	strb	r3, [r7, #19]
        break;
 80049d4:	e005      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ef      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d15b      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01f      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d019      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a10:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a12:	4a21      	ldr	r2, [pc, #132]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a14:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a22:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a24:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a32:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d016      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fb fd80 	bl	8000548 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fb fd7c 	bl	8000548 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d902      	bls.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	74fb      	strb	r3, [r7, #19]
            break;
 8004a62:	e006      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004a64:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ec      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }

      if(ret == HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10c      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a78:	4907      	ldr	r1, [pc, #28]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a90:	e008      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a92:	7cfb      	ldrb	r3, [r7, #19]
 8004a94:	74bb      	strb	r3, [r7, #18]
 8004a96:	e005      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa4:	7c7b      	ldrb	r3, [r7, #17]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4a9e      	ldr	r2, [pc, #632]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004aac:	4b9d      	ldr	r3, [pc, #628]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac2:	4998      	ldr	r1, [pc, #608]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004ac4:	4b97      	ldr	r3, [pc, #604]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 0203 	bic.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ae4:	498f      	ldr	r1, [pc, #572]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004ae6:	4b8f      	ldr	r3, [pc, #572]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f023 020c 	bic.w	r2, r3, #12
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b06:	4987      	ldr	r1, [pc, #540]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b08:	4b86      	ldr	r3, [pc, #536]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b28:	497e      	ldr	r1, [pc, #504]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b2a:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b4a:	4976      	ldr	r1, [pc, #472]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b4c:	4b75      	ldr	r3, [pc, #468]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6c:	496d      	ldr	r1, [pc, #436]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8e:	4965      	ldr	r1, [pc, #404]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b90:	4b64      	ldr	r3, [pc, #400]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bb0:	495c      	ldr	r1, [pc, #368]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004bb2:	4b5c      	ldr	r3, [pc, #368]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd2:	4954      	ldr	r1, [pc, #336]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004bd4:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bf4:	494b      	ldr	r1, [pc, #300]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c16:	4943      	ldr	r1, [pc, #268]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d028      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c38:	493a      	ldr	r1, [pc, #232]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c3a:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c56:	d106      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c58:	4a32      	ldr	r2, [pc, #200]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c5a:	4b32      	ldr	r3, [pc, #200]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c62:	60d3      	str	r3, [r2, #12]
 8004c64:	e011      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c6e:	d10c      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f8c8 	bl	8004e0c <RCCEx_PLLSAI1_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d028      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c96:	4923      	ldr	r1, [pc, #140]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c98:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb4:	d106      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb6:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc0:	60d3      	str	r3, [r2, #12]
 8004cc2:	e011      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 f899 	bl	8004e0c <RCCEx_PLLSAI1_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02b      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf4:	490b      	ldr	r1, [pc, #44]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d12:	d109      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d14:	4a03      	ldr	r2, [pc, #12]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004d16:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1e:	60d3      	str	r3, [r2, #12]
 8004d20:	e014      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f867 	bl	8004e0c <RCCEx_PLLSAI1_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d58:	492b      	ldr	r1, [pc, #172]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d5a:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d76:	d10d      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f844 	bl	8004e0c <RCCEx_PLLSAI1_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d014      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	74bb      	strb	r3, [r7, #18]
 8004d92:	e011      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3320      	adds	r3, #32
 8004da2:	2102      	movs	r1, #2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f923 	bl	8004ff0 <RCCEx_PLLSAI2_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004dc4:	4910      	ldr	r1, [pc, #64]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004de6:	4908      	ldr	r1, [pc, #32]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000

08004e0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e1e:	4b73      	ldr	r3, [pc, #460]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <RCCEx_PLLSAI1_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e2a:	4b70      	ldr	r3, [pc, #448]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0203 	and.w	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d10d      	bne.n	8004e56 <RCCEx_PLLSAI1_Config+0x4a>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <RCCEx_PLLSAI1_Config+0x4a>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e42:	4b6a      	ldr	r3, [pc, #424]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
       ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d044      	beq.n	8004ee0 <RCCEx_PLLSAI1_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
 8004e5a:	e041      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d00c      	beq.n	8004e7e <RCCEx_PLLSAI1_Config+0x72>
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d013      	beq.n	8004e90 <RCCEx_PLLSAI1_Config+0x84>
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d120      	bne.n	8004eae <RCCEx_PLLSAI1_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e6c:	4b5f      	ldr	r3, [pc, #380]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11d      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e7c:	e01a      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d116      	bne.n	8004eb8 <RCCEx_PLLSAI1_Config+0xac>
      {
        status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8e:	e013      	b.n	8004eb8 <RCCEx_PLLSAI1_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e90:	4b56      	ldr	r3, [pc, #344]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <RCCEx_PLLSAI1_Config+0xb0>
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d109      	bne.n	8004ebc <RCCEx_PLLSAI1_Config+0xb0>
      {
        status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eac:	e006      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0xb0>
    default:
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb2:	e004      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004ebc:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <RCCEx_PLLSAI1_Config+0xd4>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ec4:	4849      	ldr	r0, [pc, #292]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec6:	4b49      	ldr	r3, [pc, #292]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6819      	ldr	r1, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	430b      	orrs	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d17d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ee6:	4a41      	ldr	r2, [pc, #260]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fb fb29 	bl	8000548 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004ef8:	e009      	b.n	8004f0e <RCCEx_PLLSAI1_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004efa:	f7fb fb25 	bl	8000548 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d902      	bls.n	8004f0e <RCCEx_PLLSAI1_Config+0x102>
      {
        status = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f0c:	e005      	b.n	8004f1a <RCCEx_PLLSAI1_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ef      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0xee>
      }
    }

    if(status == HAL_OK)
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d160      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d111      	bne.n	8004f4a <RCCEx_PLLSAI1_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f26:	4831      	ldr	r0, [pc, #196]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f28:	4b30      	ldr	r3, [pc, #192]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6892      	ldr	r2, [r2, #8]
 8004f38:	0211      	lsls	r1, r2, #8
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68d2      	ldr	r2, [r2, #12]
 8004f3e:	0912      	lsrs	r2, r2, #4
 8004f40:	0452      	lsls	r2, r2, #17
 8004f42:	430a      	orrs	r2, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	6103      	str	r3, [r0, #16]
 8004f48:	e027      	b.n	8004f9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d112      	bne.n	8004f76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f50:	4826      	ldr	r0, [pc, #152]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f52:	4b26      	ldr	r3, [pc, #152]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6892      	ldr	r2, [r2, #8]
 8004f62:	0211      	lsls	r1, r2, #8
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6912      	ldr	r2, [r2, #16]
 8004f68:	0852      	lsrs	r2, r2, #1
 8004f6a:	3a01      	subs	r2, #1
 8004f6c:	0552      	lsls	r2, r2, #21
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	6103      	str	r3, [r0, #16]
 8004f74:	e011      	b.n	8004f9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f76:	481d      	ldr	r0, [pc, #116]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f78:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6892      	ldr	r2, [r2, #8]
 8004f88:	0211      	lsls	r1, r2, #8
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6952      	ldr	r2, [r2, #20]
 8004f8e:	0852      	lsrs	r2, r2, #1
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0652      	lsls	r2, r2, #25
 8004f94:	430a      	orrs	r2, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f9a:	4a14      	ldr	r2, [pc, #80]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa6:	f7fb facf 	bl	8000548 <HAL_GetTick>
 8004faa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004fac:	e009      	b.n	8004fc2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fae:	f7fb facb 	bl	8000548 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d902      	bls.n	8004fc2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8004fc0:	e005      	b.n	8004fce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ef      	beq.n	8004fae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fd4:	4905      	ldr	r1, [pc, #20]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000

08004ff0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005002:	4b68      	ldr	r3, [pc, #416]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <RCCEx_PLLSAI2_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800500e:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0203 	and.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d10d      	bne.n	800503a <RCCEx_PLLSAI2_Config+0x4a>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
       ||
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <RCCEx_PLLSAI2_Config+0x4a>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005026:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
       ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d044      	beq.n	80050c4 <RCCEx_PLLSAI2_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
 800503e:	e041      	b.n	80050c4 <RCCEx_PLLSAI2_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d00c      	beq.n	8005062 <RCCEx_PLLSAI2_Config+0x72>
 8005048:	2b03      	cmp	r3, #3
 800504a:	d013      	beq.n	8005074 <RCCEx_PLLSAI2_Config+0x84>
 800504c:	2b01      	cmp	r3, #1
 800504e:	d120      	bne.n	8005092 <RCCEx_PLLSAI2_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005050:	4b54      	ldr	r3, [pc, #336]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11d      	bne.n	8005098 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005060:	e01a      	b.n	8005098 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005062:	4b50      	ldr	r3, [pc, #320]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506a:	2b00      	cmp	r3, #0
 800506c:	d116      	bne.n	800509c <RCCEx_PLLSAI2_Config+0xac>
      {
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005072:	e013      	b.n	800509c <RCCEx_PLLSAI2_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005074:	4b4b      	ldr	r3, [pc, #300]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10f      	bne.n	80050a0 <RCCEx_PLLSAI2_Config+0xb0>
 8005080:	4b48      	ldr	r3, [pc, #288]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <RCCEx_PLLSAI2_Config+0xb0>
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005090:	e006      	b.n	80050a0 <RCCEx_PLLSAI2_Config+0xb0>
    default:
      status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
      break;
 8005096:	e004      	b.n	80050a2 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8005098:	bf00      	nop
 800509a:	e002      	b.n	80050a2 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 800509c:	bf00      	nop
 800509e:	e000      	b.n	80050a2 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 80050a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <RCCEx_PLLSAI2_Config+0xd4>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050a8:	483e      	ldr	r0, [pc, #248]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050aa:	4b3e      	ldr	r3, [pc, #248]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	430b      	orrs	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d167      	bne.n	800519a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050ca:	4a36      	ldr	r2, [pc, #216]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050cc:	4b35      	ldr	r3, [pc, #212]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d6:	f7fb fa37 	bl	8000548 <HAL_GetTick>
 80050da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80050dc:	e009      	b.n	80050f2 <RCCEx_PLLSAI2_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050de:	f7fb fa33 	bl	8000548 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d902      	bls.n	80050f2 <RCCEx_PLLSAI2_Config+0x102>
      {
        status = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	73fb      	strb	r3, [r7, #15]
        break;
 80050f0:	e005      	b.n	80050fe <RCCEx_PLLSAI2_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80050f2:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1ef      	bne.n	80050de <RCCEx_PLLSAI2_Config+0xee>
      }
    }

    if(status == HAL_OK)
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d14a      	bne.n	800519a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d111      	bne.n	800512e <RCCEx_PLLSAI2_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800510a:	4826      	ldr	r0, [pc, #152]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6892      	ldr	r2, [r2, #8]
 800511c:	0211      	lsls	r1, r2, #8
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68d2      	ldr	r2, [r2, #12]
 8005122:	0912      	lsrs	r2, r2, #4
 8005124:	0452      	lsls	r2, r2, #17
 8005126:	430a      	orrs	r2, r1
 8005128:	4313      	orrs	r3, r2
 800512a:	6143      	str	r3, [r0, #20]
 800512c:	e011      	b.n	8005152 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800512e:	481d      	ldr	r0, [pc, #116]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005130:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005138:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6912      	ldr	r2, [r2, #16]
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	3a01      	subs	r2, #1
 800514a:	0652      	lsls	r2, r2, #25
 800514c:	430a      	orrs	r2, r1
 800514e:	4313      	orrs	r3, r2
 8005150:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fb f9f3 	bl	8000548 <HAL_GetTick>
 8005162:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8005164:	e009      	b.n	800517a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005166:	f7fb f9ef 	bl	8000548 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d902      	bls.n	800517a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	73fb      	strb	r3, [r7, #15]
          break;
 8005178:	e005      	b.n	8005186 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ef      	beq.n	8005166 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800518c:	4905      	ldr	r1, [pc, #20]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000

080051a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07a      	b.n	80052b0 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f003 ff5f 	bl	8009098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051fa:	d902      	bls.n	8005202 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e002      	b.n	8005208 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005210:	d007      	beq.n	8005222 <HAL_SPI_Init+0x7a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005232:	d903      	bls.n	800523c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
 800523a:	e002      	b.n	8005242 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6851      	ldr	r1, [r2, #4]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6892      	ldr	r2, [r2, #8]
 800524e:	4311      	orrs	r1, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6912      	ldr	r2, [r2, #16]
 8005254:	4311      	orrs	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6952      	ldr	r2, [r2, #20]
 800525a:	4311      	orrs	r1, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6992      	ldr	r2, [r2, #24]
 8005260:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005264:	4311      	orrs	r1, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	69d2      	ldr	r2, [r2, #28]
 800526a:	4311      	orrs	r1, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6a12      	ldr	r2, [r2, #32]
 8005270:	4311      	orrs	r1, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6992      	ldr	r2, [r2, #24]
 8005282:	0c12      	lsrs	r2, r2, #16
 8005284:	f002 0104 	and.w	r1, r2, #4
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800528c:	4311      	orrs	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005292:	4311      	orrs	r1, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68d2      	ldr	r2, [r2, #12]
 8005298:	4311      	orrs	r1, r2
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e043      	b.n	8005352 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f004 f858 	bl	8009394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2224      	movs	r2, #36	; 0x24
 80052e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f93f 	bl	8005580 <UART_SetConfig>
 8005302:	4603      	mov	r3, r0
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e022      	b.n	8005352 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fc71 	bl	8005bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	6852      	ldr	r2, [r2, #4]
 8005324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005328:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005338:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fcf8 	bl	8005d40 <UART_CheckIdleState>
 8005350:	4603      	mov	r3, r0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b20      	cmp	r3, #32
 8005374:	d152      	bne.n	800541c <HAL_UART_Transmit_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_UART_Transmit_DMA+0x26>
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e04b      	b.n	800541e <HAL_UART_Transmit_DMA+0xc2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_UART_Transmit_DMA+0x38>
 8005390:	2302      	movs	r3, #2
 8005392:	e044      	b.n	800541e <HAL_UART_Transmit_DMA+0xc2>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	675a      	str	r2, [r3, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2221      	movs	r2, #33	; 0x21
 80053bc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c4:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_UART_Transmit_DMA+0xcc>)
 80053c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053cc:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_UART_Transmit_DMA+0xd0>)
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d4:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_UART_Transmit_DMA+0xd4>)
 80053d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053dc:	2200      	movs	r2, #0
 80053de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	4619      	mov	r1, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3328      	adds	r3, #40	; 0x28
 80053f0:	461a      	mov	r2, r3
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	f7fc fb2c 	bl	8001a50 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	6892      	ldr	r2, [r2, #8]
 8005412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005416:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_UART_Transmit_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	08005ed5 	.word	0x08005ed5
 800542c:	08005f29 	.word	0x08005f29
 8005430:	08005fcb 	.word	0x08005fcb

08005434 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b20      	cmp	r3, #32
 800544c:	d15a      	bne.n	8005504 <HAL_UART_Receive_DMA+0xd0>
  {
    if ((pData == NULL) || (Size == 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_UART_Receive_DMA+0x26>
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e053      	b.n	8005506 <HAL_UART_Receive_DMA+0xd2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_UART_Receive_DMA+0x38>
 8005468:	2302      	movs	r3, #2
 800546a:	e04c      	b.n	8005506 <HAL_UART_Receive_DMA+0xd2>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2222      	movs	r2, #34	; 0x22
 800548c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005494:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <HAL_UART_Receive_DMA+0xdc>)
 8005496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <HAL_UART_Receive_DMA+0xe0>)
 800549e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <HAL_UART_Receive_DMA+0xe4>)
 80054a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ac:	2200      	movs	r2, #0
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3324      	adds	r3, #36	; 0x24
 80054ba:	4619      	mov	r1, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c0:	461a      	mov	r2, r3
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	f7fc fac4 	bl	8001a50 <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054de:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	6892      	ldr	r2, [r2, #8]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	6892      	ldr	r2, [r2, #8]
 80054fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054fe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_UART_Receive_DMA+0xd2>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	08005f45 	.word	0x08005f45
 8005514:	08005faf 	.word	0x08005faf
 8005518:	08005fcb 	.word	0x08005fcb

0800551c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800558e:	2310      	movs	r3, #16
 8005590:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8005592:	2300      	movs	r3, #0
 8005594:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6819      	ldr	r1, [r3, #0]
 80055c4:	4baa      	ldr	r3, [pc, #680]	; (8005870 <UART_SetConfig+0x2f0>)
 80055c6:	400b      	ands	r3, r1
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	430b      	orrs	r3, r1
 80055cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	6852      	ldr	r2, [r2, #4]
 80055d8:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68d2      	ldr	r2, [r2, #12]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4aa1      	ldr	r2, [pc, #644]	; (8005874 <UART_SetConfig+0x2f4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	6892      	ldr	r2, [r2, #8]
 8005608:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a98      	ldr	r2, [pc, #608]	; (8005878 <UART_SetConfig+0x2f8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d121      	bne.n	8005660 <UART_SetConfig+0xe0>
 800561c:	4b97      	ldr	r3, [pc, #604]	; (800587c <UART_SetConfig+0x2fc>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b03      	cmp	r3, #3
 8005628:	d816      	bhi.n	8005658 <UART_SetConfig+0xd8>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0xb0>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005641 	.word	0x08005641
 8005634:	0800564d 	.word	0x0800564d
 8005638:	08005647 	.word	0x08005647
 800563c:	08005653 	.word	0x08005653
 8005640:	2301      	movs	r3, #1
 8005642:	76fb      	strb	r3, [r7, #27]
 8005644:	e0e4      	b.n	8005810 <UART_SetConfig+0x290>
 8005646:	2302      	movs	r3, #2
 8005648:	76fb      	strb	r3, [r7, #27]
 800564a:	e0e1      	b.n	8005810 <UART_SetConfig+0x290>
 800564c:	2304      	movs	r3, #4
 800564e:	76fb      	strb	r3, [r7, #27]
 8005650:	e0de      	b.n	8005810 <UART_SetConfig+0x290>
 8005652:	2308      	movs	r3, #8
 8005654:	76fb      	strb	r3, [r7, #27]
 8005656:	e0db      	b.n	8005810 <UART_SetConfig+0x290>
 8005658:	2310      	movs	r3, #16
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	bf00      	nop
 800565e:	e0d7      	b.n	8005810 <UART_SetConfig+0x290>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a86      	ldr	r2, [pc, #536]	; (8005880 <UART_SetConfig+0x300>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d134      	bne.n	80056d4 <UART_SetConfig+0x154>
 800566a:	4b84      	ldr	r3, [pc, #528]	; (800587c <UART_SetConfig+0x2fc>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	2b0c      	cmp	r3, #12
 8005676:	d829      	bhi.n	80056cc <UART_SetConfig+0x14c>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0x100>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056b5 	.word	0x080056b5
 8005684:	080056cd 	.word	0x080056cd
 8005688:	080056cd 	.word	0x080056cd
 800568c:	080056cd 	.word	0x080056cd
 8005690:	080056c1 	.word	0x080056c1
 8005694:	080056cd 	.word	0x080056cd
 8005698:	080056cd 	.word	0x080056cd
 800569c:	080056cd 	.word	0x080056cd
 80056a0:	080056bb 	.word	0x080056bb
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056cd 	.word	0x080056cd
 80056b0:	080056c7 	.word	0x080056c7
 80056b4:	2300      	movs	r3, #0
 80056b6:	76fb      	strb	r3, [r7, #27]
 80056b8:	e0aa      	b.n	8005810 <UART_SetConfig+0x290>
 80056ba:	2302      	movs	r3, #2
 80056bc:	76fb      	strb	r3, [r7, #27]
 80056be:	e0a7      	b.n	8005810 <UART_SetConfig+0x290>
 80056c0:	2304      	movs	r3, #4
 80056c2:	76fb      	strb	r3, [r7, #27]
 80056c4:	e0a4      	b.n	8005810 <UART_SetConfig+0x290>
 80056c6:	2308      	movs	r3, #8
 80056c8:	76fb      	strb	r3, [r7, #27]
 80056ca:	e0a1      	b.n	8005810 <UART_SetConfig+0x290>
 80056cc:	2310      	movs	r3, #16
 80056ce:	76fb      	strb	r3, [r7, #27]
 80056d0:	bf00      	nop
 80056d2:	e09d      	b.n	8005810 <UART_SetConfig+0x290>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a6a      	ldr	r2, [pc, #424]	; (8005884 <UART_SetConfig+0x304>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d120      	bne.n	8005720 <UART_SetConfig+0x1a0>
 80056de:	4b67      	ldr	r3, [pc, #412]	; (800587c <UART_SetConfig+0x2fc>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d00f      	beq.n	800570c <UART_SetConfig+0x18c>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d802      	bhi.n	80056f6 <UART_SetConfig+0x176>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <UART_SetConfig+0x180>
 80056f4:	e010      	b.n	8005718 <UART_SetConfig+0x198>
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d005      	beq.n	8005706 <UART_SetConfig+0x186>
 80056fa:	2b30      	cmp	r3, #48	; 0x30
 80056fc:	d009      	beq.n	8005712 <UART_SetConfig+0x192>
 80056fe:	e00b      	b.n	8005718 <UART_SetConfig+0x198>
 8005700:	2300      	movs	r3, #0
 8005702:	76fb      	strb	r3, [r7, #27]
 8005704:	e084      	b.n	8005810 <UART_SetConfig+0x290>
 8005706:	2302      	movs	r3, #2
 8005708:	76fb      	strb	r3, [r7, #27]
 800570a:	e081      	b.n	8005810 <UART_SetConfig+0x290>
 800570c:	2304      	movs	r3, #4
 800570e:	76fb      	strb	r3, [r7, #27]
 8005710:	e07e      	b.n	8005810 <UART_SetConfig+0x290>
 8005712:	2308      	movs	r3, #8
 8005714:	76fb      	strb	r3, [r7, #27]
 8005716:	e07b      	b.n	8005810 <UART_SetConfig+0x290>
 8005718:	2310      	movs	r3, #16
 800571a:	76fb      	strb	r3, [r7, #27]
 800571c:	bf00      	nop
 800571e:	e077      	b.n	8005810 <UART_SetConfig+0x290>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a58      	ldr	r2, [pc, #352]	; (8005888 <UART_SetConfig+0x308>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d120      	bne.n	800576c <UART_SetConfig+0x1ec>
 800572a:	4b54      	ldr	r3, [pc, #336]	; (800587c <UART_SetConfig+0x2fc>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d00f      	beq.n	8005758 <UART_SetConfig+0x1d8>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d802      	bhi.n	8005742 <UART_SetConfig+0x1c2>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <UART_SetConfig+0x1cc>
 8005740:	e010      	b.n	8005764 <UART_SetConfig+0x1e4>
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d005      	beq.n	8005752 <UART_SetConfig+0x1d2>
 8005746:	2bc0      	cmp	r3, #192	; 0xc0
 8005748:	d009      	beq.n	800575e <UART_SetConfig+0x1de>
 800574a:	e00b      	b.n	8005764 <UART_SetConfig+0x1e4>
 800574c:	2300      	movs	r3, #0
 800574e:	76fb      	strb	r3, [r7, #27]
 8005750:	e05e      	b.n	8005810 <UART_SetConfig+0x290>
 8005752:	2302      	movs	r3, #2
 8005754:	76fb      	strb	r3, [r7, #27]
 8005756:	e05b      	b.n	8005810 <UART_SetConfig+0x290>
 8005758:	2304      	movs	r3, #4
 800575a:	76fb      	strb	r3, [r7, #27]
 800575c:	e058      	b.n	8005810 <UART_SetConfig+0x290>
 800575e:	2308      	movs	r3, #8
 8005760:	76fb      	strb	r3, [r7, #27]
 8005762:	e055      	b.n	8005810 <UART_SetConfig+0x290>
 8005764:	2310      	movs	r3, #16
 8005766:	76fb      	strb	r3, [r7, #27]
 8005768:	bf00      	nop
 800576a:	e051      	b.n	8005810 <UART_SetConfig+0x290>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a46      	ldr	r2, [pc, #280]	; (800588c <UART_SetConfig+0x30c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d124      	bne.n	80057c0 <UART_SetConfig+0x240>
 8005776:	4b41      	ldr	r3, [pc, #260]	; (800587c <UART_SetConfig+0x2fc>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005784:	d012      	beq.n	80057ac <UART_SetConfig+0x22c>
 8005786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578a:	d802      	bhi.n	8005792 <UART_SetConfig+0x212>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <UART_SetConfig+0x220>
 8005790:	e012      	b.n	80057b8 <UART_SetConfig+0x238>
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d006      	beq.n	80057a6 <UART_SetConfig+0x226>
 8005798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579c:	d009      	beq.n	80057b2 <UART_SetConfig+0x232>
 800579e:	e00b      	b.n	80057b8 <UART_SetConfig+0x238>
 80057a0:	2300      	movs	r3, #0
 80057a2:	76fb      	strb	r3, [r7, #27]
 80057a4:	e034      	b.n	8005810 <UART_SetConfig+0x290>
 80057a6:	2302      	movs	r3, #2
 80057a8:	76fb      	strb	r3, [r7, #27]
 80057aa:	e031      	b.n	8005810 <UART_SetConfig+0x290>
 80057ac:	2304      	movs	r3, #4
 80057ae:	76fb      	strb	r3, [r7, #27]
 80057b0:	e02e      	b.n	8005810 <UART_SetConfig+0x290>
 80057b2:	2308      	movs	r3, #8
 80057b4:	76fb      	strb	r3, [r7, #27]
 80057b6:	e02b      	b.n	8005810 <UART_SetConfig+0x290>
 80057b8:	2310      	movs	r3, #16
 80057ba:	76fb      	strb	r3, [r7, #27]
 80057bc:	bf00      	nop
 80057be:	e027      	b.n	8005810 <UART_SetConfig+0x290>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2b      	ldr	r2, [pc, #172]	; (8005874 <UART_SetConfig+0x2f4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d123      	bne.n	8005812 <UART_SetConfig+0x292>
 80057ca:	4b2c      	ldr	r3, [pc, #176]	; (800587c <UART_SetConfig+0x2fc>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d8:	d012      	beq.n	8005800 <UART_SetConfig+0x280>
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d802      	bhi.n	80057e6 <UART_SetConfig+0x266>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <UART_SetConfig+0x274>
 80057e4:	e012      	b.n	800580c <UART_SetConfig+0x28c>
 80057e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ea:	d006      	beq.n	80057fa <UART_SetConfig+0x27a>
 80057ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f0:	d009      	beq.n	8005806 <UART_SetConfig+0x286>
 80057f2:	e00b      	b.n	800580c <UART_SetConfig+0x28c>
 80057f4:	2300      	movs	r3, #0
 80057f6:	76fb      	strb	r3, [r7, #27]
 80057f8:	e00a      	b.n	8005810 <UART_SetConfig+0x290>
 80057fa:	2302      	movs	r3, #2
 80057fc:	76fb      	strb	r3, [r7, #27]
 80057fe:	e007      	b.n	8005810 <UART_SetConfig+0x290>
 8005800:	2304      	movs	r3, #4
 8005802:	76fb      	strb	r3, [r7, #27]
 8005804:	e004      	b.n	8005810 <UART_SetConfig+0x290>
 8005806:	2308      	movs	r3, #8
 8005808:	76fb      	strb	r3, [r7, #27]
 800580a:	e001      	b.n	8005810 <UART_SetConfig+0x290>
 800580c:	2310      	movs	r3, #16
 800580e:	76fb      	strb	r3, [r7, #27]
 8005810:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a17      	ldr	r2, [pc, #92]	; (8005874 <UART_SetConfig+0x2f4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	f040 80ee 	bne.w	80059fa <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800581e:	7efb      	ldrb	r3, [r7, #27]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d837      	bhi.n	8005894 <UART_SetConfig+0x314>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x2ac>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005851 	.word	0x08005851
 8005830:	08005895 	.word	0x08005895
 8005834:	08005859 	.word	0x08005859
 8005838:	08005895 	.word	0x08005895
 800583c:	0800585f 	.word	0x0800585f
 8005840:	08005895 	.word	0x08005895
 8005844:	08005895 	.word	0x08005895
 8005848:	08005895 	.word	0x08005895
 800584c:	08005867 	.word	0x08005867
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fe ff6e 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8005854:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8005856:	e020      	b.n	800589a <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005858:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <UART_SetConfig+0x310>)
 800585a:	60fb      	str	r3, [r7, #12]
#endif
        break;
 800585c:	e01d      	b.n	800589a <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800585e:	f7fe feab 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8005862:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8005864:	e019      	b.n	800589a <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586a:	60fb      	str	r3, [r7, #12]
#endif
        break;
 800586c:	e015      	b.n	800589a <UART_SetConfig+0x31a>
 800586e:	bf00      	nop
 8005870:	efff69f3 	.word	0xefff69f3
 8005874:	40008000 	.word	0x40008000
 8005878:	40013800 	.word	0x40013800
 800587c:	40021000 	.word	0x40021000
 8005880:	40004400 	.word	0x40004400
 8005884:	40004800 	.word	0x40004800
 8005888:	40004c00 	.word	0x40004c00
 800588c:	40005000 	.word	0x40005000
 8005890:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	74fb      	strb	r3, [r7, #19]
        break;
 8005898:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 819e 	beq.w	8005bde <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	441a      	add	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d805      	bhi.n	80058be <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d202      	bcs.n	80058c4 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	74fb      	strb	r3, [r7, #19]
 80058c2:	e18c      	b.n	8005bde <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 80058c4:	7efb      	ldrb	r3, [r7, #27]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	f200 8084 	bhi.w	80059d4 <UART_SetConfig+0x454>
 80058cc:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <UART_SetConfig+0x354>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	080059d5 	.word	0x080059d5
 80058dc:	08005939 	.word	0x08005939
 80058e0:	080059d5 	.word	0x080059d5
 80058e4:	0800596d 	.word	0x0800596d
 80058e8:	080059d5 	.word	0x080059d5
 80058ec:	080059d5 	.word	0x080059d5
 80058f0:	080059d5 	.word	0x080059d5
 80058f4:	080059ab 	.word	0x080059ab
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80058f8:	f7fe ff1a 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f04f 0400 	mov.w	r4, #0
 8005902:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8005906:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800590a:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	f04f 0400 	mov.w	r4, #0
 8005918:	eb18 0003 	adds.w	r0, r8, r3
 800591c:	eb49 0104 	adc.w	r1, r9, r4
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f04f 0400 	mov.w	r4, #0
 8005928:	461a      	mov	r2, r3
 800592a:	4623      	mov	r3, r4
 800592c:	f7fa fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8005930:	4603      	mov	r3, r0
 8005932:	460c      	mov	r4, r1
 8005934:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005936:	e050      	b.n	80059da <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	f04f 0400 	mov.w	r4, #0
 8005942:	49ad      	ldr	r1, [pc, #692]	; (8005bf8 <UART_SetConfig+0x678>)
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	eb13 0801 	adds.w	r8, r3, r1
 800594c:	eb44 0902 	adc.w	r9, r4, r2
 8005950:	4640      	mov	r0, r8
 8005952:	4649      	mov	r1, r9
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f04f 0400 	mov.w	r4, #0
 800595c:	461a      	mov	r2, r3
 800595e:	4623      	mov	r3, r4
 8005960:	f7fa fc32 	bl	80001c8 <__aeabi_uldivmod>
 8005964:	4603      	mov	r3, r0
 8005966:	460c      	mov	r4, r1
 8005968:	617b      	str	r3, [r7, #20]
#endif
            break;
 800596a:	e036      	b.n	80059da <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800596c:	f7fe fe24 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	021d      	lsls	r5, r3, #8
 800597a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800597e:	0214      	lsls	r4, r2, #8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	461a      	mov	r2, r3
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	18a0      	adds	r0, r4, r2
 800598e:	eb45 0103 	adc.w	r1, r5, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f04f 0400 	mov.w	r4, #0
 800599a:	461a      	mov	r2, r3
 800599c:	4623      	mov	r3, r4
 800599e:	f7fa fc13 	bl	80001c8 <__aeabi_uldivmod>
 80059a2:	4603      	mov	r3, r0
 80059a4:	460c      	mov	r4, r1
 80059a6:	617b      	str	r3, [r7, #20]
#endif
            break;
 80059a8:	e017      	b.n	80059da <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	f04f 0400 	mov.w	r4, #0
 80059b4:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80059b8:	f144 0100 	adc.w	r1, r4, #0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	461a      	mov	r2, r3
 80059c6:	4623      	mov	r3, r4
 80059c8:	f7fa fbfe 	bl	80001c8 <__aeabi_uldivmod>
 80059cc:	4603      	mov	r3, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	617b      	str	r3, [r7, #20]
#endif
            break;
 80059d2:	e002      	b.n	80059da <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	74fb      	strb	r3, [r7, #19]
            break;
 80059d8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e0:	d308      	bcc.n	80059f4 <UART_SetConfig+0x474>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e8:	d204      	bcs.n	80059f4 <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e0f4      	b.n	8005bde <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	74fb      	strb	r3, [r7, #19]
 80059f8:	e0f1      	b.n	8005bde <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a02:	d17e      	bne.n	8005b02 <UART_SetConfig+0x582>
  {
    switch (clocksource)
 8005a04:	7efb      	ldrb	r3, [r7, #27]
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d85b      	bhi.n	8005ac2 <UART_SetConfig+0x542>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0x490>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005ac3 	.word	0x08005ac3
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005ac3 	.word	0x08005ac3
 8005a28:	08005ac3 	.word	0x08005ac3
 8005a2c:	08005ac3 	.word	0x08005ac3
 8005a30:	08005aab 	.word	0x08005aab
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a34:	f7fe fe7c 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	005a      	lsls	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	441a      	add	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005a50:	e03a      	b.n	8005ac8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a52:	f7fe fe81 	bl	8004758 <HAL_RCC_GetPCLK2Freq>
 8005a56:	4603      	mov	r3, r0
 8005a58:	005a      	lsls	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005a6e:	e02b      	b.n	8005ac8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005a7a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6852      	ldr	r2, [r2, #4]
 8005a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005a8a:	e01d      	b.n	8005ac8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a8c:	f7fe fd94 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8005a90:	4603      	mov	r3, r0
 8005a92:	005a      	lsls	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	441a      	add	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005aa8:	e00e      	b.n	8005ac8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005ac0:	e002      	b.n	8005ac8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	74fb      	strb	r3, [r7, #19]
        break;
 8005ac6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b0f      	cmp	r3, #15
 8005acc:	d916      	bls.n	8005afc <UART_SetConfig+0x57c>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad4:	d212      	bcs.n	8005afc <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f023 030f 	bic.w	r3, r3, #15
 8005ade:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	897b      	ldrh	r3, [r7, #10]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	897a      	ldrh	r2, [r7, #10]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	e070      	b.n	8005bde <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	74fb      	strb	r3, [r7, #19]
 8005b00:	e06d      	b.n	8005bde <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8005b02:	7efb      	ldrb	r3, [r7, #27]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d859      	bhi.n	8005bbc <UART_SetConfig+0x63c>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x590>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b6d 	.word	0x08005b6d
 8005b1c:	08005bbd 	.word	0x08005bbd
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005bbd 	.word	0x08005bbd
 8005b28:	08005bbd 	.word	0x08005bbd
 8005b2c:	08005bbd 	.word	0x08005bbd
 8005b30:	08005ba5 	.word	0x08005ba5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b34:	f7fe fdfc 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	441a      	add	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005b4e:	e038      	b.n	8005bc2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b50:	f7fe fe02 	bl	8004758 <HAL_RCC_GetPCLK2Freq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	441a      	add	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005b6a:	e02a      	b.n	8005bc2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005b76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6852      	ldr	r2, [r2, #4]
 8005b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005b86:	e01c      	b.n	8005bc2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b88:	f7fe fd16 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005ba2:	e00e      	b.n	8005bc2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005bba:	e002      	b.n	8005bc2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	74fb      	strb	r3, [r7, #19]
        break;
 8005bc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b0f      	cmp	r3, #15
 8005bc6:	d908      	bls.n	8005bda <UART_SetConfig+0x65a>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bce:	d204      	bcs.n	8005bda <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	60da      	str	r2, [r3, #12]
 8005bd8:	e001      	b.n	8005bde <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005bea:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bf6:	bf00      	nop
 8005bf8:	f4240000 	.word	0xf4240000

08005bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	6852      	ldr	r2, [r2, #4]
 8005c1a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	6852      	ldr	r2, [r2, #4]
 8005c3c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	6852      	ldr	r2, [r2, #4]
 8005c5e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	6852      	ldr	r2, [r2, #4]
 8005c80:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	6892      	ldr	r2, [r2, #8]
 8005ca2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	6892      	ldr	r2, [r2, #8]
 8005cc4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01a      	beq.n	8005d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	6852      	ldr	r2, [r2, #4]
 8005ce6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cfa:	d10a      	bne.n	8005d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	6852      	ldr	r2, [r2, #4]
 8005d06:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	6852      	ldr	r2, [r2, #4]
 8005d28:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d52:	f7fa fbf9 	bl	8000548 <HAL_GetTick>
 8005d56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d10e      	bne.n	8005d84 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f82c 	bl	8005dd2 <UART_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e022      	b.n	8005dca <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d10e      	bne.n	8005db0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f816 	bl	8005dd2 <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e00c      	b.n	8005dca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de2:	e02c      	b.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d028      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8005df2:	f7fa fba9 	bl	8000548 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d91d      	bls.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e10:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	6892      	ldr	r2, [r2, #8]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e00f      	b.n	8005e5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	401a      	ands	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	2300      	movne	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d0c3      	beq.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005e7c:	601a      	str	r2, [r3, #0]
#endif

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ea8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	6892      	ldr	r2, [r2, #8]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d114      	bne.n	8005f1a <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	6892      	ldr	r2, [r2, #8]
 8005f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f06:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f16:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f18:	e002      	b.n	8005f20 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff fafe 	bl	800551c <HAL_UART_TxCpltCallback>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff fafa 	bl	8005530 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11f      	bne.n	8005fa0 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f76:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	6892      	ldr	r2, [r2, #8]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	6892      	ldr	r2, [r2, #8]
 8005f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f96:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff facf 	bl	8005544 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff facb 	bl	8005558 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b21      	cmp	r3, #33	; 0x21
 8005fe2:	d10d      	bne.n	8006000 <UART_DMAError+0x36>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d106      	bne.n	8006000 <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff ff33 	bl	8005e66 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b22      	cmp	r3, #34	; 0x22
 800600a:	d10d      	bne.n	8006028 <UART_DMAError+0x5e>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	d106      	bne.n	8006028 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ff35 	bl	8005e92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602c:	f043 0210 	orr.w	r2, r3, #16
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fa99 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006042:	b084      	sub	sp, #16
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	f107 0014 	add.w	r0, r7, #20
 8006050:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	2b01      	cmp	r3, #1
 8006058:	d120      	bne.n	800609c <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800606e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006084:	2b01      	cmp	r3, #1
 8006086:	d105      	bne.n	8006094 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    (void)USB_CoreReset(USBx);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 f8d1 	bl	800723c <USB_CoreReset>
 800609a:	e00c      	b.n	80060b6 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    (void)USB_CoreReset(USBx);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 f8c7 	bl	800723c <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060c2:	b004      	add	sp, #16
 80060c4:	4770      	bx	lr

080060c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f043 0201 	orr.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 0201 	bic.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d106      	bne.n	8006136 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]
 8006134:	e00b      	b.n	800614e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e001      	b.n	800614e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e003      	b.n	8006156 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800614e:	2032      	movs	r0, #50	; 0x32
 8006150:	f7fa fa06 	bl	8000560 <HAL_Delay>

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006160:	b084      	sub	sp, #16
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	f107 001c 	add.w	r0, r7, #28
 800616e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	e009      	b.n	8006190 <USB_DevInit+0x30>
  {
    USBx->DIEPTXF[i] = 0U;
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3340      	adds	r3, #64	; 0x40
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	2200      	movs	r2, #0
 8006188:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b0e      	cmp	r3, #14
 8006194:	d9f2      	bls.n	800617c <USB_DevInit+0x1c>
  }

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0U)
 80061a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d111      	bne.n	80061cc <USB_DevInit+0x6c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061d2:	461a      	mov	r2, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	461a      	mov	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6013      	str	r3, [r2, #0]

  /* Set Full speed phy */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ea:	2103      	movs	r1, #3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f933 	bl	8006458 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80061f2:	2110      	movs	r1, #16
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8e7 	bl	80063c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f90a 	bl	8006414 <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	461a      	mov	r2, r3
 8006208:	2300      	movs	r3, #0
 800620a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	461a      	mov	r2, r3
 8006214:	2300      	movs	r3, #0
 8006216:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	461a      	mov	r2, r3
 8006220:	2300      	movs	r3, #0
 8006222:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e043      	b.n	80062b2 <USB_DevInit+0x152>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800623c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006240:	d118      	bne.n	8006274 <USB_DevInit+0x114>
    {
      if (i == 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <USB_DevInit+0xfe>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	461a      	mov	r2, r3
 8006256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e013      	b.n	8006286 <USB_DevInit+0x126>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	461a      	mov	r2, r3
 800626c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e008      	b.n	8006286 <USB_DevInit+0x126>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	461a      	mov	r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a4:	461a      	mov	r2, r3
 80062a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d8b7      	bhi.n	800622a <USB_DevInit+0xca>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e043      	b.n	8006348 <USB_DevInit+0x1e8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d6:	d118      	bne.n	800630a <USB_DevInit+0x1aa>
    {
      if (i == 0U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USB_DevInit+0x194>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e013      	b.n	800631c <USB_DevInit+0x1bc>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	461a      	mov	r2, r3
 8006302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	e008      	b.n	800631c <USB_DevInit+0x1bc>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	461a      	mov	r2, r3
 8006318:	2300      	movs	r3, #0
 800631a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	461a      	mov	r2, r3
 800633c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	429a      	cmp	r2, r3
 800634e:	d8b7      	bhi.n	80062c0 <USB_DevInit+0x160>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	461a      	mov	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006364:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006372:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f043 0210 	orr.w	r2, r3, #16
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <USB_DevInit+0x264>)
 8006386:	4313      	orrs	r3, r2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <USB_DevInit+0x23e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f043 0208 	orr.w	r2, r3, #8
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800639e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d107      	bne.n	80063b4 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ac:	f043 0304 	orr.w	r3, r3, #4
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c0:	b004      	add	sp, #16
 80063c2:	4770      	bx	lr
 80063c4:	803c3800 	.word	0x803c3800

080063c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	019b      	lsls	r3, r3, #6
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4a09      	ldr	r2, [pc, #36]	; (8006410 <USB_FlushTxFifo+0x48>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d901      	bls.n	80063f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e006      	b.n	8006402 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d0f0      	beq.n	80063e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	00030d40 	.word	0x00030d40

08006414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2210      	movs	r2, #16
 8006424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3301      	adds	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a09      	ldr	r2, [pc, #36]	; (8006454 <USB_FlushRxFifo+0x40>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e006      	b.n	8006446 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b10      	cmp	r3, #16
 8006442:	d0f0      	beq.n	8006426 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	00030d40 	.word	0x00030d40

08006458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	4619      	mov	r1, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	4313      	orrs	r3, r2
 800647c:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d13c      	bne.n	8006522 <USB_ActivateEndpoint+0x96>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	4618      	mov	r0, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f303 	lsl.w	r3, r1, r3
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61c3      	str	r3, [r0, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d158      	bne.n	8006594 <USB_ActivateEndpoint+0x108>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	4618      	mov	r0, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	78db      	ldrb	r3, [r3, #3]
 800650a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800650c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	059b      	lsls	r3, r3, #22
 8006512:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006514:	4313      	orrs	r3, r2
 8006516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651e:	6003      	str	r3, [r0, #0]
 8006520:	e038      	b.n	8006594 <USB_ActivateEndpoint+0x108>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006528:	4618      	mov	r0, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	2101      	movs	r1, #1
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	4313      	orrs	r3, r2
 8006544:	61c3      	str	r3, [r0, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11b      	bne.n	8006594 <USB_ActivateEndpoint+0x108>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	4618      	mov	r0, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	78db      	ldrb	r3, [r3, #3]
 8006584:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006586:	430b      	orrs	r3, r1
 8006588:	4313      	orrs	r3, r2
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006592:	6003      	str	r3, [r0, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d137      	bne.n	8006630 <USB_DeactivateEndpoint+0x8c>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c6:	4618      	mov	r0, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	2101      	movs	r1, #1
 80065da:	fa01 f303 	lsl.w	r3, r1, r3
 80065de:	b29b      	uxth	r3, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	4013      	ands	r3, r2
 80065e4:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ec:	4618      	mov	r0, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	2101      	movs	r1, #1
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	b29b      	uxth	r3, r3
 8006606:	43db      	mvns	r3, r3
 8006608:	4013      	ands	r3, r2
 800660a:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006618:	4619      	mov	r1, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b20      	ldr	r3, [pc, #128]	; (80066ac <USB_DeactivateEndpoint+0x108>)
 800662a:	4013      	ands	r3, r2
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	e036      	b.n	800669e <USB_DeactivateEndpoint+0xfa>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	4618      	mov	r0, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	041b      	lsls	r3, r3, #16
 8006650:	43db      	mvns	r3, r3
 8006652:	4013      	ands	r3, r2
 8006654:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	4618      	mov	r0, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	69da      	ldr	r2, [r3, #28]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	2101      	movs	r1, #1
 8006670:	fa01 f303 	lsl.w	r3, r1, r3
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	43db      	mvns	r3, r3
 8006678:	4013      	ands	r3, r2
 800667a:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	4619      	mov	r1, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <USB_DeactivateEndpoint+0x10c>)
 800669a:	4013      	ands	r3, r2
 800669c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	ec337800 	.word	0xec337800
 80066b0:	eff37800 	.word	0xeff37800

080066b4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	f040 811e 	bne.w	800690e <USB_EPStartXfer+0x25a>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d135      	bne.n	8006746 <USB_EPStartXfer+0x92>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	4619      	mov	r1, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	4619      	mov	r1, r3
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006720:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	4619      	mov	r1, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	0cdb      	lsrs	r3, r3, #19
 8006740:	04db      	lsls	r3, r3, #19
 8006742:	610b      	str	r3, [r1, #16]
 8006744:	e07a      	b.n	800683c <USB_EPStartXfer+0x188>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	4619      	mov	r1, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	0cdb      	lsrs	r3, r3, #19
 8006764:	04db      	lsls	r3, r3, #19
 8006766:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	4619      	mov	r1, r3
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800678c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	4618      	mov	r0, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	440b      	add	r3, r1
 80067b4:	1e59      	subs	r1, r3, #1
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80067be:	04d9      	lsls	r1, r3, #19
 80067c0:	4ba4      	ldr	r3, [pc, #656]	; (8006a54 <USB_EPStartXfer+0x3a0>)
 80067c2:	400b      	ands	r3, r1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	6103      	str	r3, [r0, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	4619      	mov	r1, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ec:	4313      	orrs	r3, r2
 80067ee:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	78db      	ldrb	r3, [r3, #3]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d121      	bne.n	800683c <USB_EPStartXfer+0x188>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006804:	4619      	mov	r1, r3
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006818:	610b      	str	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006826:	4619      	mov	r1, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800683a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type != EP_TYPE_ISOC)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	78db      	ldrb	r3, [r3, #3]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d014      	beq.n	800686e <USB_EPStartXfer+0x1ba>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <USB_EPStartXfer+0x1ba>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	4618      	mov	r0, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	2101      	movs	r1, #1
 8006866:	fa01 f303 	lsl.w	r3, r1, r3
 800686a:	4313      	orrs	r3, r2
 800686c:	6343      	str	r3, [r0, #52]	; 0x34
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	78db      	ldrb	r3, [r3, #3]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d12a      	bne.n	80068cc <USB_EPStartXfer+0x218>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d111      	bne.n	80068aa <USB_EPStartXfer+0x1f6>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	4619      	mov	r1, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068a6:	600b      	str	r3, [r1, #0]
 80068a8:	e010      	b.n	80068cc <USB_EPStartXfer+0x218>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b6:	4619      	mov	r1, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ca:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	4619      	mov	r1, r3
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068ec:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	78db      	ldrb	r3, [r3, #3]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	f040 80d2 	bne.w	8006a9c <USB_EPStartXfer+0x3e8>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68d9      	ldr	r1, [r3, #12]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	b29b      	uxth	r3, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f9fa 	bl	8006d00 <USB_WritePacket>
 800690c:	e0c6      	b.n	8006a9c <USB_EPStartXfer+0x3e8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691a:	4619      	mov	r1, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	0cdb      	lsrs	r3, r3, #19
 800692c:	04db      	lsls	r3, r3, #19
 800692e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693c:	4619      	mov	r1, r3
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006954:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d125      	bne.n	80069aa <USB_EPStartXfer+0x2f6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	4619      	mov	r1, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006982:	4313      	orrs	r3, r2
 8006984:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	4619      	mov	r1, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069a6:	610b      	str	r3, [r1, #16]
 80069a8:	e035      	b.n	8006a16 <USB_EPStartXfer+0x362>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4413      	add	r3, r2
 80069b4:	1e5a      	subs	r2, r3, #1
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80069be:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069cc:	4618      	mov	r0, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	04d9      	lsls	r1, r3, #19
 80069e0:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <USB_EPStartXfer+0x3a0>)
 80069e2:	400b      	ands	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	4618      	mov	r0, r3
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	89f9      	ldrh	r1, [r7, #14]
 8006a0a:	fb01 f303 	mul.w	r3, r1, r3
 8006a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a12:	4313      	orrs	r3, r2
 8006a14:	6103      	str	r3, [r0, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	78db      	ldrb	r3, [r3, #3]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d12d      	bne.n	8006a7a <USB_EPStartXfer+0x3c6>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d114      	bne.n	8006a58 <USB_EPStartXfer+0x3a4>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a4e:	600b      	str	r3, [r1, #0]
 8006a50:	e013      	b.n	8006a7a <USB_EPStartXfer+0x3c6>
 8006a52:	bf00      	nop
 8006a54:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a64:	4619      	mov	r1, r3
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a78:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	4619      	mov	r1, r3
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a9a:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop

08006aa8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	f040 80b4 	bne.w	8006c2e <USB_EP0StartXfer+0x186>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d135      	bne.n	8006b3a <USB_EP0StartXfer+0x92>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	4619      	mov	r1, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006af2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b00:	4619      	mov	r1, r3
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b22:	4619      	mov	r1, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	0cdb      	lsrs	r3, r3, #19
 8006b34:	04db      	lsls	r3, r3, #19
 8006b36:	610b      	str	r3, [r1, #16]
 8006b38:	e052      	b.n	8006be0 <USB_EP0StartXfer+0x138>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	4619      	mov	r1, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	0cdb      	lsrs	r3, r3, #19
 8006b58:	04db      	lsls	r3, r3, #19
 8006b5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	4619      	mov	r1, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b80:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <USB_EP0StartXfer+0xee>
      {
        ep->xfer_len = ep->maxpacket;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	610b      	str	r3, [r1, #16]
    }

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d010      	beq.n	8006c0a <USB_EP0StartXfer+0x162>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	4618      	mov	r0, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f303 	lsl.w	r3, r1, r3
 8006c06:	4313      	orrs	r3, r2
 8006c08:	6343      	str	r3, [r0, #52]	; 0x34
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	4619      	mov	r1, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c2a:	600b      	str	r3, [r1, #0]
 8006c2c:	e061      	b.n	8006cf2 <USB_EP0StartXfer+0x24a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	0cdb      	lsrs	r3, r3, #19
 8006c4c:	04db      	lsls	r3, r3, #19
 8006c4e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c74:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <USB_EP0StartXfer+0x1de>
    {
      ep->xfer_len = ep->maxpacket;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c92:	4619      	mov	r1, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ca6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf0:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b089      	sub	sp, #36	; 0x24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	460b      	mov	r3, r1
 8006d10:	71fb      	strb	r3, [r7, #7]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	3303      	adds	r3, #3
 8006d22:	089b      	lsrs	r3, r3, #2
 8006d24:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e00f      	b.n	8006d4c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	031a      	lsls	r2, r3, #12
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d38:	461a      	mov	r2, r3
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	3304      	adds	r3, #4
 8006d44:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d3eb      	bcc.n	8006d2c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3724      	adds	r7, #36	; 0x24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b089      	sub	sp, #36	; 0x24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006d78:	88fb      	ldrh	r3, [r7, #6]
 8006d7a:	3303      	adds	r3, #3
 8006d7c:	089b      	lsrs	r3, r3, #2
 8006d7e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	e00b      	b.n	8006d9e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3304      	adds	r3, #4
 8006d96:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d3ef      	bcc.n	8006d86 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006da6:	69fb      	ldr	r3, [r7, #28]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3724      	adds	r7, #36	; 0x24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	785b      	ldrb	r3, [r3, #1]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d12e      	bne.n	8006e2e <USB_EPSetStall+0x7a>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	db13      	blt.n	8006e0a <USB_EPSetStall+0x56>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d010      	beq.n	8006e0a <USB_EPSetStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df4:	4619      	mov	r1, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e08:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e16:	4619      	mov	r1, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	e02d      	b.n	8006e8a <USB_EPSetStall+0xd6>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	db13      	blt.n	8006e68 <USB_EPSetStall+0xb4>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d010      	beq.n	8006e68 <USB_EPSetStall+0xb4>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	4619      	mov	r1, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e66:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	4619      	mov	r1, r3
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e88:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d12a      	bne.n	8006f0a <USB_EPClearStall+0x72>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ed4:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	78db      	ldrb	r3, [r3, #3]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d003      	beq.n	8006ee6 <USB_EPClearStall+0x4e>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d13b      	bne.n	8006f5e <USB_EPClearStall+0xc6>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f06:	600b      	str	r3, [r1, #0]
 8006f08:	e029      	b.n	8006f5e <USB_EPClearStall+0xc6>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	4619      	mov	r1, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f2a:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	78db      	ldrb	r3, [r3, #3]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d003      	beq.n	8006f3c <USB_EPClearStall+0xa4>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	78db      	ldrb	r3, [r3, #3]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d110      	bne.n	8006f5e <USB_EPClearStall+0xc6>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	4619      	mov	r1, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	461a      	mov	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f90:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f98:	4619      	mov	r1, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006faa:	4313      	orrs	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	461a      	mov	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f023 0302 	bic.w	r3, r3, #2
 8006fdc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006fde:	2003      	movs	r0, #3
 8006fe0:	f7f9 fabe 	bl	8000560 <HAL_Delay>

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	461a      	mov	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f043 0302 	orr.w	r3, r3, #2
 800700e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007010:	2003      	movs	r0, #3
 8007012:	f7f9 faa5 	bl	8000560 <HAL_Delay>

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	4013      	ands	r3, r2
 8007068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	0c1b      	lsrs	r3, r3, #16
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	b29b      	uxth	r3, r3
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	4013      	ands	r3, r2
 80070da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070dc:	68bb      	ldr	r3, [r7, #8]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b087      	sub	sp, #28
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	fa22 f303 	lsr.w	r3, r2, r3
 800711a:	01db      	lsls	r3, r3, #7
 800711c:	b2db      	uxtb	r3, r3
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4013      	ands	r3, r2
 8007136:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007138:	68bb      	ldr	r3, [r7, #8]
}
 800713a:	4618      	mov	r0, r3
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f003 0301 	and.w	r3, r3, #1
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	461a      	mov	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007182:	f023 0307 	bic.w	r3, r3, #7
 8007186:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 0306 	and.w	r3, r3, #6
 8007194:	2b04      	cmp	r3, #4
 8007196:	d10a      	bne.n	80071ae <USB_ActivateSetup+0x4c>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719e:	461a      	mov	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f043 0303 	orr.w	r3, r3, #3
 80071ac:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b4:	461a      	mov	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60fb      	str	r3, [r7, #12]

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	461a      	mov	r2, r3
 80071e8:	2300      	movs	r3, #0
 80071ea:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	461a      	mov	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	461a      	mov	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f043 0318 	orr.w	r3, r3, #24
 8007216:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	461a      	mov	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800722c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <USB_CoreReset+0x64>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d901      	bls.n	800725a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e01b      	b.n	8007292 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	daf2      	bge.n	8007248 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f043 0201 	orr.w	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <USB_CoreReset+0x64>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e006      	b.n	8007292 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b01      	cmp	r3, #1
 800728e:	d0f0      	beq.n	8007272 <USB_CoreReset+0x36>

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	00030d40 	.word	0x00030d40

080072a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7c1b      	ldrb	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d115      	bne.n	80072e8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072c0:	2202      	movs	r2, #2
 80072c2:	2181      	movs	r1, #129	; 0x81
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f002 fc1f 	bl	8009b08 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d4:	2202      	movs	r2, #2
 80072d6:	2101      	movs	r1, #1
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f002 fc15 	bl	8009b08 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80072e6:	e012      	b.n	800730e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072e8:	2340      	movs	r3, #64	; 0x40
 80072ea:	2202      	movs	r2, #2
 80072ec:	2181      	movs	r1, #129	; 0x81
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f002 fc0a 	bl	8009b08 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072fa:	2340      	movs	r3, #64	; 0x40
 80072fc:	2202      	movs	r2, #2
 80072fe:	2101      	movs	r1, #1
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 fc01 	bl	8009b08 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800730e:	2308      	movs	r3, #8
 8007310:	2203      	movs	r2, #3
 8007312:	2182      	movs	r1, #130	; 0x82
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f002 fbf7 	bl	8009b08 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007320:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007324:	f002 fe0a 	bl	8009f3c <USBD_static_malloc>
 8007328:	4602      	mov	r2, r0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800733a:	2301      	movs	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
 800733e:	e026      	b.n	800738e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007346:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2200      	movs	r2, #0
 8007356:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7c1b      	ldrb	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007374:	2101      	movs	r1, #1
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f002 fd42 	bl	8009e00 <USBD_LL_PrepareReceive>
 800737c:	e007      	b.n	800738e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	2101      	movs	r1, #1
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f002 fd39 	bl	8009e00 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073a8:	2181      	movs	r1, #129	; 0x81
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f002 fbea 	bl	8009b84 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073b6:	2101      	movs	r1, #1
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 fbe3 	bl	8009b84 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073c6:	2182      	movs	r1, #130	; 0x82
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f002 fbdb 	bl	8009b84 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00e      	beq.n	80073fc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073ee:	4618      	mov	r0, r3
 80073f0:	f002 fdb2 	bl	8009f58 <USBD_static_free>
    pdev->pClassData = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007416:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742c:	2b00      	cmp	r3, #0
 800742e:	d039      	beq.n	80074a4 <USBD_CDC_Setup+0x9e>
 8007430:	2b20      	cmp	r3, #32
 8007432:	d17c      	bne.n	800752e <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	88db      	ldrh	r3, [r3, #6]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d029      	beq.n	8007490 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b25b      	sxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	da11      	bge.n	800746a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007452:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	88d2      	ldrh	r2, [r2, #6]
 8007458:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800745a:	6939      	ldr	r1, [r7, #16]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	88db      	ldrh	r3, [r3, #6]
 8007460:	461a      	mov	r2, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 f9b4 	bl	80087d0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007468:	e068      	b.n	800753c <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	785a      	ldrb	r2, [r3, #1]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	88db      	ldrh	r3, [r3, #6]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007480:	6939      	ldr	r1, [r7, #16]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	88db      	ldrh	r3, [r3, #6]
 8007486:	461a      	mov	r2, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 f9cf 	bl	800882c <USBD_CtlPrepareRx>
    break;
 800748e:	e055      	b.n	800753c <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	7850      	ldrb	r0, [r2, #1]
 800749c:	2200      	movs	r2, #0
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	4798      	blx	r3
    break;
 80074a2:	e04b      	b.n	800753c <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	2b0a      	cmp	r3, #10
 80074aa:	d017      	beq.n	80074dc <USBD_CDC_Setup+0xd6>
 80074ac:	2b0b      	cmp	r3, #11
 80074ae:	d029      	beq.n	8007504 <USBD_CDC_Setup+0xfe>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d133      	bne.n	800751c <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d107      	bne.n	80074ce <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80074be:	f107 030c 	add.w	r3, r7, #12
 80074c2:	2202      	movs	r2, #2
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 f982 	bl	80087d0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80074cc:	e02e      	b.n	800752c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 f912 	bl	80086fa <USBD_CtlError>
			  ret = USBD_FAIL;
 80074d6:	2302      	movs	r3, #2
 80074d8:	75fb      	strb	r3, [r7, #23]
      break;
 80074da:	e027      	b.n	800752c <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d107      	bne.n	80074f6 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80074e6:	f107 030f 	add.w	r3, r7, #15
 80074ea:	2201      	movs	r2, #1
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 f96e 	bl	80087d0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80074f4:	e01a      	b.n	800752c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 f8fe 	bl	80086fa <USBD_CtlError>
			  ret = USBD_FAIL;
 80074fe:	2302      	movs	r3, #2
 8007500:	75fb      	strb	r3, [r7, #23]
      break;
 8007502:	e013      	b.n	800752c <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800750a:	2b03      	cmp	r3, #3
 800750c:	d00d      	beq.n	800752a <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 f8f2 	bl	80086fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8007516:	2302      	movs	r3, #2
 8007518:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800751a:	e006      	b.n	800752a <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f8eb 	bl	80086fa <USBD_CtlError>
      ret = USBD_FAIL;
 8007524:	2302      	movs	r3, #2
 8007526:	75fb      	strb	r3, [r7, #23]
      break;
 8007528:	e000      	b.n	800752c <USBD_CDC_Setup+0x126>
      break;
 800752a:	bf00      	nop
    }
    break;
 800752c:	e006      	b.n	800753c <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f8e2 	bl	80086fa <USBD_CtlError>
    ret = USBD_FAIL;
 8007536:	2302      	movs	r3, #2
 8007538:	75fb      	strb	r3, [r7, #23]
    break;
 800753a:	bf00      	nop
  }

  return ret;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007558:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007560:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03a      	beq.n	80075e2 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800756c:	78fa      	ldrb	r2, [r7, #3]
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	331c      	adds	r3, #28
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d029      	beq.n	80075d6 <USBD_CDC_DataIn+0x90>
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	4613      	mov	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	440b      	add	r3, r1
 8007590:	331c      	adds	r3, #28
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	78f9      	ldrb	r1, [r7, #3]
 8007596:	68b8      	ldr	r0, [r7, #8]
 8007598:	460b      	mov	r3, r1
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	1a5b      	subs	r3, r3, r1
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4403      	add	r3, r0
 80075a2:	3344      	adds	r3, #68	; 0x44
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80075aa:	fb03 f301 	mul.w	r3, r3, r1
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d110      	bne.n	80075d6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	440b      	add	r3, r1
 80075c2:	331c      	adds	r3, #28
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80075c8:	78f9      	ldrb	r1, [r7, #3]
 80075ca:	2300      	movs	r3, #0
 80075cc:	2200      	movs	r2, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f002 fbdc 	bl	8009d8c <USBD_LL_Transmit>
 80075d4:	e003      	b.n	80075de <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	e000      	b.n	80075e4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80075e2:	2302      	movs	r3, #2
  }
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f002 fc35 	bl	8009e74 <USBD_LL_GetRxDataSize>
 800760a:	4602      	mov	r2, r0
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00d      	beq.n	8007638 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007630:	4611      	mov	r1, r2
 8007632:	4798      	blx	r3

    return USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	e000      	b.n	800763a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007638:	2302      	movs	r3, #2
  }
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007650:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007658:	2b00      	cmp	r3, #0
 800765a:	d015      	beq.n	8007688 <USBD_CDC_EP0_RxReady+0x46>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007662:	2bff      	cmp	r3, #255	; 0xff
 8007664:	d010      	beq.n	8007688 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007674:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800767c:	b292      	uxth	r2, r2
 800767e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	22ff      	movs	r2, #255	; 0xff
 8007684:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2243      	movs	r2, #67	; 0x43
 80076a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80076a2:	4b03      	ldr	r3, [pc, #12]	; (80076b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20000088 	.word	0x20000088

080076b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2243      	movs	r2, #67	; 0x43
 80076c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80076c2:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20000044 	.word	0x20000044

080076d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2243      	movs	r2, #67	; 0x43
 80076e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80076e2:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	200000cc 	.word	0x200000cc

080076f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	220a      	movs	r2, #10
 8007700:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007702:	4b03      	ldr	r3, [pc, #12]	; (8007710 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	20000000 	.word	0x20000000

08007714 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800771e:	2302      	movs	r3, #2
 8007720:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007742:	b480      	push	{r7}
 8007744:	b087      	sub	sp, #28
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	4613      	mov	r3, r2
 800774e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007756:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007786:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d017      	beq.n	80077e8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7c1b      	ldrb	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ca:	2101      	movs	r1, #1
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f002 fb17 	bl	8009e00 <USBD_LL_PrepareReceive>
 80077d2:	e007      	b.n	80077e4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	2101      	movs	r1, #1
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f002 fb0e 	bl	8009e00 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	e000      	b.n	80077ea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80077e8:	2302      	movs	r3, #2
  }
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	4613      	mov	r3, r2
 80077fe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007806:	2302      	movs	r3, #2
 8007808:	e01a      	b.n	8007840 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	79fa      	ldrb	r2, [r7, #7]
 8007836:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f002 f8df 	bl	80099fc <USBD_LL_Init>

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d006      	beq.n	800786a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73fb      	strb	r3, [r7, #15]
 8007868:	e001      	b.n	800786e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800786a:	2302      	movs	r3, #2
 800786c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f002 f90d 	bl	8009aa4 <USBD_LL_Start>

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80078b6:	2302      	movs	r3, #2
 80078b8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00c      	beq.n	80078de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	4611      	mov	r1, r2
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	4611      	mov	r1, r2
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fead 	bl	8008680 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	2b01      	cmp	r3, #1
 8007948:	d00c      	beq.n	8007964 <USBD_LL_SetupStage+0x56>
 800794a:	2b01      	cmp	r3, #1
 800794c:	d302      	bcc.n	8007954 <USBD_LL_SetupStage+0x46>
 800794e:	2b02      	cmp	r3, #2
 8007950:	d010      	beq.n	8007974 <USBD_LL_SetupStage+0x66>
 8007952:	e017      	b.n	8007984 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa01 	bl	8007d64 <USBD_StdDevReq>
    break;
 8007962:	e01a      	b.n	800799a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa63 	bl	8007e38 <USBD_StdItfReq>
    break;
 8007972:	e012      	b.n	800799a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 faa1 	bl	8007ec4 <USBD_StdEPReq>
    break;
 8007982:	e00a      	b.n	800799a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800798a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800798e:	b2db      	uxtb	r3, r3
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f002 f92c 	bl	8009bf0 <USBD_LL_StallEP>
    break;
 8007998:	bf00      	nop
  }

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	460b      	mov	r3, r1
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d147      	bne.n	8007a48 <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80079be:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d134      	bne.n	8007a34 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d919      	bls.n	8007a0a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d203      	bcs.n	80079f8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	e002      	b.n	80079fe <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 ff30 	bl	8008868 <USBD_CtlContinueRx>
 8007a08:	e034      	b.n	8007a74 <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d105      	bne.n	8007a2c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 ff2d 	bl	800888c <USBD_CtlSendStatus>
 8007a32:	e01f      	b.n	8007a74 <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d11a      	bne.n	8007a74 <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 8007a3e:	2100      	movs	r1, #0
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f002 f8d5 	bl	8009bf0 <USBD_LL_StallEP>
 8007a46:	e015      	b.n	8007a74 <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00d      	beq.n	8007a70 <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d108      	bne.n	8007a70 <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	7afa      	ldrb	r2, [r7, #11]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	4798      	blx	r3
 8007a6e:	e001      	b.n	8007a74 <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a70:	2302      	movs	r3, #2
 8007a72:	e000      	b.n	8007a76 <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	460b      	mov	r3, r1
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d17f      	bne.n	8007b92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3314      	adds	r3, #20
 8007a96:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d15c      	bne.n	8007b5c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d915      	bls.n	8007ada <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fe9e 	bl	8008808 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007acc:	2300      	movs	r3, #0
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f002 f994 	bl	8009e00 <USBD_LL_PrepareReceive>
 8007ad8:	e04e      	b.n	8007b78 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	6912      	ldr	r2, [r2, #16]
 8007ae2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ae6:	fb02 f201 	mul.w	r2, r2, r1
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11c      	bne.n	8007b2a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d316      	bcc.n	8007b2a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d20f      	bcs.n	8007b2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fe7a 	bl	8008808 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2100      	movs	r1, #0
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f002 f96c 	bl	8009e00 <USBD_LL_PrepareReceive>
 8007b28:	e026      	b.n	8007b78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d105      	bne.n	8007b4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f002 f84e 	bl	8009bf0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 feac 	bl	80088b2 <USBD_CtlReceiveStatus>
 8007b5a:	e00d      	b.n	8007b78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	d004      	beq.n	8007b70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f002 f83c 	bl	8009bf0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d11d      	bne.n	8007bbe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fe86 	bl	8007894 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007b90:	e015      	b.n	8007bbe <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00d      	beq.n	8007bba <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d108      	bne.n	8007bba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	7afa      	ldrb	r2, [r7, #11]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	4798      	blx	r3
 8007bb8:	e001      	b.n	8007bbe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e000      	b.n	8007bc0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 ff96 	bl	8009b08 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2240      	movs	r2, #64	; 0x40
 8007be8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 ff88 	bl	8009b08 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2240      	movs	r2, #64	; 0x40
 8007c02:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d009      	beq.n	8007c40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6852      	ldr	r2, [r2, #4]
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	4798      	blx	r3
  }

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2204      	movs	r2, #4
 8007c82:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d10b      	bne.n	8007ce0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6852      	ldr	r2, [r2, #4]
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	4611      	mov	r1, r2
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d004      	beq.n	8007d88 <USBD_StdDevReq+0x24>
 8007d7e:	2b40      	cmp	r3, #64	; 0x40
 8007d80:	d002      	beq.n	8007d88 <USBD_StdDevReq+0x24>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d008      	beq.n	8007d98 <USBD_StdDevReq+0x34>
 8007d86:	e04c      	b.n	8007e22 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
    break;
 8007d96:	e049      	b.n	8007e2c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b09      	cmp	r3, #9
 8007d9e:	d83a      	bhi.n	8007e16 <USBD_StdDevReq+0xb2>
 8007da0:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <USBD_StdDevReq+0x44>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007df9 	.word	0x08007df9
 8007dac:	08007e0d 	.word	0x08007e0d
 8007db0:	08007e17 	.word	0x08007e17
 8007db4:	08007e03 	.word	0x08007e03
 8007db8:	08007e17 	.word	0x08007e17
 8007dbc:	08007ddb 	.word	0x08007ddb
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007e17 	.word	0x08007e17
 8007dc8:	08007def 	.word	0x08007def
 8007dcc:	08007de5 	.word	0x08007de5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9d2 	bl	800817c <USBD_GetDescriptor>
      break;
 8007dd8:	e022      	b.n	8007e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fae3 	bl	80083a8 <USBD_SetAddress>
      break;
 8007de2:	e01d      	b.n	8007e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fb20 	bl	800842c <USBD_SetConfig>
      break;
 8007dec:	e018      	b.n	8007e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fba9 	bl	8008548 <USBD_GetConfig>
      break;
 8007df6:	e013      	b.n	8007e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fbd8 	bl	80085b0 <USBD_GetStatus>
      break;
 8007e00:	e00e      	b.n	8007e20 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc06 	bl	8008616 <USBD_SetFeature>
      break;
 8007e0a:	e009      	b.n	8007e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fc15 	bl	800863e <USBD_ClrFeature>
      break;
 8007e14:	e004      	b.n	8007e20 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fc6e 	bl	80086fa <USBD_CtlError>
      break;
 8007e1e:	bf00      	nop
    }
    break;
 8007e20:	e004      	b.n	8007e2c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fc68 	bl	80086fa <USBD_CtlError>
    break;
 8007e2a:	bf00      	nop
  }

  return ret;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop

08007e38 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d003      	beq.n	8007e5a <USBD_StdItfReq+0x22>
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d001      	beq.n	8007e5a <USBD_StdItfReq+0x22>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d12a      	bne.n	8007eb0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e60:	3b01      	subs	r3, #1
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d81d      	bhi.n	8007ea2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	889b      	ldrh	r3, [r3, #4]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d813      	bhi.n	8007e98 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	88db      	ldrh	r3, [r3, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d110      	bne.n	8007eac <USBD_StdItfReq+0x74>
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fcfb 	bl	800888c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007e96:	e009      	b.n	8007eac <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fc2d 	bl	80086fa <USBD_CtlError>
      break;
 8007ea0:	e004      	b.n	8007eac <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fc28 	bl	80086fa <USBD_CtlError>
      break;
 8007eaa:	e000      	b.n	8007eae <USBD_StdItfReq+0x76>
      break;
 8007eac:	bf00      	nop
    }
    break;
 8007eae:	e004      	b.n	8007eba <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fc21 	bl	80086fa <USBD_CtlError>
    break;
 8007eb8:	bf00      	nop
  }

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d004      	beq.n	8007eee <USBD_StdEPReq+0x2a>
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d002      	beq.n	8007eee <USBD_StdEPReq+0x2a>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d008      	beq.n	8007efe <USBD_StdEPReq+0x3a>
 8007eec:	e13b      	b.n	8008166 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
    break;
 8007efc:	e138      	b.n	8008170 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d10a      	bne.n	8007f20 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	e128      	b.n	8008172 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d03e      	beq.n	8007fa6 <USBD_StdEPReq+0xe2>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d002      	beq.n	8007f32 <USBD_StdEPReq+0x6e>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d070      	beq.n	8008012 <USBD_StdEPReq+0x14e>
 8007f30:	e113      	b.n	800815a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d002      	beq.n	8007f42 <USBD_StdEPReq+0x7e>
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d015      	beq.n	8007f6c <USBD_StdEPReq+0xa8>
 8007f40:	e02b      	b.n	8007f9a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00c      	beq.n	8007f62 <USBD_StdEPReq+0x9e>
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b80      	cmp	r3, #128	; 0x80
 8007f4c:	d009      	beq.n	8007f62 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fe4c 	bl	8009bf0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fe48 	bl	8009bf0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007f60:	e020      	b.n	8007fa4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fbc8 	bl	80086fa <USBD_CtlError>
        break;
 8007f6a:	e01b      	b.n	8007fa4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	885b      	ldrh	r3, [r3, #2]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10e      	bne.n	8007f92 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <USBD_StdEPReq+0xce>
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b80      	cmp	r3, #128	; 0x80
 8007f7e:	d008      	beq.n	8007f92 <USBD_StdEPReq+0xce>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	88db      	ldrh	r3, [r3, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fe2f 	bl	8009bf0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fc7a 	bl	800888c <USBD_CtlSendStatus>

        break;
 8007f98:	e004      	b.n	8007fa4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fbac 	bl	80086fa <USBD_CtlError>
        break;
 8007fa2:	bf00      	nop
      }
      break;
 8007fa4:	e0de      	b.n	8008164 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d002      	beq.n	8007fb6 <USBD_StdEPReq+0xf2>
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d015      	beq.n	8007fe0 <USBD_StdEPReq+0x11c>
 8007fb4:	e026      	b.n	8008004 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00c      	beq.n	8007fd6 <USBD_StdEPReq+0x112>
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b80      	cmp	r3, #128	; 0x80
 8007fc0:	d009      	beq.n	8007fd6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 fe12 	bl	8009bf0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 fe0e 	bl	8009bf0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007fd4:	e01c      	b.n	8008010 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fb8e 	bl	80086fa <USBD_CtlError>
        break;
 8007fde:	e017      	b.n	8008010 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	885b      	ldrh	r3, [r3, #2]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d112      	bne.n	800800e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fe30 	bl	8009c5c <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fc45 	bl	800888c <USBD_CtlSendStatus>
        }
        break;
 8008002:	e004      	b.n	800800e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fb77 	bl	80086fa <USBD_CtlError>
        break;
 800800c:	e000      	b.n	8008010 <USBD_StdEPReq+0x14c>
        break;
 800800e:	bf00      	nop
      }
      break;
 8008010:	e0a8      	b.n	8008164 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008018:	2b02      	cmp	r3, #2
 800801a:	d002      	beq.n	8008022 <USBD_StdEPReq+0x15e>
 800801c:	2b03      	cmp	r3, #3
 800801e:	d031      	beq.n	8008084 <USBD_StdEPReq+0x1c0>
 8008020:	e095      	b.n	800814e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <USBD_StdEPReq+0x174>
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	2b80      	cmp	r3, #128	; 0x80
 800802c:	d004      	beq.n	8008038 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb62 	bl	80086fa <USBD_CtlError>
          break;
 8008036:	e08f      	b.n	8008158 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da0b      	bge.n	8008058 <USBD_StdEPReq+0x194>
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	3310      	adds	r3, #16
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	4413      	add	r3, r2
 8008054:	3304      	adds	r3, #4
 8008056:	e00a      	b.n	800806e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2202      	movs	r2, #2
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fba7 	bl	80087d0 <USBD_CtlSendData>
          break;
 8008082:	e069      	b.n	8008158 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008088:	2b00      	cmp	r3, #0
 800808a:	da11      	bge.n	80080b0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	f003 020f 	and.w	r2, r3, #15
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	3318      	adds	r3, #24
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d117      	bne.n	80080d6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fb26 	bl	80086fa <USBD_CtlError>
            break;
 80080ae:	e053      	b.n	8008158 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	f003 020f 	and.w	r2, r3, #15
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d104      	bne.n	80080d6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fb13 	bl	80086fa <USBD_CtlError>
            break;
 80080d4:	e040      	b.n	8008158 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80080d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da0b      	bge.n	80080f6 <USBD_StdEPReq+0x232>
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	3310      	adds	r3, #16
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	3304      	adds	r3, #4
 80080f4:	e00a      	b.n	800810c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <USBD_StdEPReq+0x256>
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b80      	cmp	r3, #128	; 0x80
 8008118:	d103      	bne.n	8008122 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e00e      	b.n	8008140 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fdce 	bl	8009cc8 <USBD_LL_IsStallEP>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2201      	movs	r2, #1
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	e002      	b.n	8008140 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2202      	movs	r2, #2
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fb42 	bl	80087d0 <USBD_CtlSendData>
          break;
 800814c:	e004      	b.n	8008158 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fad2 	bl	80086fa <USBD_CtlError>
        break;
 8008156:	bf00      	nop
      }
      break;
 8008158:	e004      	b.n	8008164 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 facc 	bl	80086fa <USBD_CtlError>
      break;
 8008162:	bf00      	nop
    }
    break;
 8008164:	e004      	b.n	8008170 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fac6 	bl	80086fa <USBD_CtlError>
    break;
 800816e:	bf00      	nop
  }

  return ret;
 8008170:	7bfb      	ldrb	r3, [r7, #15]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	885b      	ldrh	r3, [r3, #2]
 800818a:	0a1b      	lsrs	r3, r3, #8
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	2b0e      	cmp	r3, #14
 8008192:	f200 80e5 	bhi.w	8008360 <USBD_GetDescriptor+0x1e4>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <USBD_GetDescriptor+0x20>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081f1 	.word	0x080081f1
 80081a0:	08008209 	.word	0x08008209
 80081a4:	08008249 	.word	0x08008249
 80081a8:	08008361 	.word	0x08008361
 80081ac:	08008361 	.word	0x08008361
 80081b0:	0800830d 	.word	0x0800830d
 80081b4:	08008333 	.word	0x08008333
 80081b8:	08008361 	.word	0x08008361
 80081bc:	08008361 	.word	0x08008361
 80081c0:	08008361 	.word	0x08008361
 80081c4:	08008361 	.word	0x08008361
 80081c8:	08008361 	.word	0x08008361
 80081cc:	08008361 	.word	0x08008361
 80081d0:	08008361 	.word	0x08008361
 80081d4:	080081d9 	.word	0x080081d9
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7c12      	ldrb	r2, [r2, #16]
 80081e4:	f107 010a 	add.w	r1, r7, #10
 80081e8:	4610      	mov	r0, r2
 80081ea:	4798      	blx	r3
 80081ec:	60f8      	str	r0, [r7, #12]
    break;
 80081ee:	e0bc      	b.n	800836a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7c12      	ldrb	r2, [r2, #16]
 80081fc:	f107 010a 	add.w	r1, r7, #10
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
    break;
 8008206:	e0b0      	b.n	800836a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	7c1b      	ldrb	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10d      	bne.n	800822c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	f107 020a 	add.w	r2, r7, #10
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	2202      	movs	r2, #2
 8008228:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800822a:	e09e      	b.n	800836a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	f107 020a 	add.w	r2, r7, #10
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	2202      	movs	r2, #2
 8008244:	701a      	strb	r2, [r3, #0]
    break;
 8008246:	e090      	b.n	800836a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	885b      	ldrh	r3, [r3, #2]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b05      	cmp	r3, #5
 8008250:	d856      	bhi.n	8008300 <USBD_GetDescriptor+0x184>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_GetDescriptor+0xdc>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008271 	.word	0x08008271
 800825c:	08008289 	.word	0x08008289
 8008260:	080082a1 	.word	0x080082a1
 8008264:	080082b9 	.word	0x080082b9
 8008268:	080082d1 	.word	0x080082d1
 800826c:	080082e9 	.word	0x080082e9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7c12      	ldrb	r2, [r2, #16]
 800827c:	f107 010a 	add.w	r1, r7, #10
 8008280:	4610      	mov	r0, r2
 8008282:	4798      	blx	r3
 8008284:	60f8      	str	r0, [r7, #12]
      break;
 8008286:	e040      	b.n	800830a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	7c12      	ldrb	r2, [r2, #16]
 8008294:	f107 010a 	add.w	r1, r7, #10
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
      break;
 800829e:	e034      	b.n	800830a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7c12      	ldrb	r2, [r2, #16]
 80082ac:	f107 010a 	add.w	r1, r7, #10
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
      break;
 80082b6:	e028      	b.n	800830a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	7c12      	ldrb	r2, [r2, #16]
 80082c4:	f107 010a 	add.w	r1, r7, #10
 80082c8:	4610      	mov	r0, r2
 80082ca:	4798      	blx	r3
 80082cc:	60f8      	str	r0, [r7, #12]
      break;
 80082ce:	e01c      	b.n	800830a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7c12      	ldrb	r2, [r2, #16]
 80082dc:	f107 010a 	add.w	r1, r7, #10
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
 80082e4:	60f8      	str	r0, [r7, #12]
      break;
 80082e6:	e010      	b.n	800830a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 010a 	add.w	r1, r7, #10
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
      break;
 80082fe:	e004      	b.n	800830a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f9f9 	bl	80086fa <USBD_CtlError>
      return;
 8008308:	e04b      	b.n	80083a2 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800830a:	e02e      	b.n	800836a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7c1b      	ldrb	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d109      	bne.n	8008328 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800831a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831c:	f107 020a 	add.w	r2, r7, #10
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
      break;
 8008326:	e020      	b.n	800836a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f9e5 	bl	80086fa <USBD_CtlError>
      return;
 8008330:	e037      	b.n	80083a2 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7c1b      	ldrb	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10d      	bne.n	8008356 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	f107 020a 	add.w	r2, r7, #10
 8008346:	4610      	mov	r0, r2
 8008348:	4798      	blx	r3
 800834a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	2207      	movs	r2, #7
 8008352:	701a      	strb	r2, [r3, #0]
      break;
 8008354:	e009      	b.n	800836a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f9ce 	bl	80086fa <USBD_CtlError>
      return;
 800835e:	e020      	b.n	80083a2 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f9c9 	bl	80086fa <USBD_CtlError>
    return;
 8008368:	e01b      	b.n	80083a2 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800836a:	897b      	ldrh	r3, [r7, #10]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d011      	beq.n	8008394 <USBD_GetDescriptor+0x218>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	88db      	ldrh	r3, [r3, #6]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00d      	beq.n	8008394 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	88da      	ldrh	r2, [r3, #6]
 800837c:	897b      	ldrh	r3, [r7, #10]
 800837e:	4293      	cmp	r3, r2
 8008380:	bf28      	it	cs
 8008382:	4613      	movcs	r3, r2
 8008384:	b29b      	uxth	r3, r3
 8008386:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008388:	897b      	ldrh	r3, [r7, #10]
 800838a:	461a      	mov	r2, r3
 800838c:	68f9      	ldr	r1, [r7, #12]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa1e 	bl	80087d0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	88db      	ldrh	r3, [r3, #6]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa75 	bl	800888c <USBD_CtlSendStatus>
  }
}
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	889b      	ldrh	r3, [r3, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d130      	bne.n	800841c <USBD_SetAddress+0x74>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	88db      	ldrh	r3, [r3, #6]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d12c      	bne.n	800841c <USBD_SetAddress+0x74>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	885b      	ldrh	r3, [r3, #2]
 80083c6:	2b7f      	cmp	r3, #127	; 0x7f
 80083c8:	d828      	bhi.n	800841c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	885b      	ldrh	r3, [r3, #2]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d104      	bne.n	80083ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f989 	bl	80086fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e8:	e01c      	b.n	8008424 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	7bfa      	ldrb	r2, [r7, #15]
 80083ee:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fc92 	bl	8009d20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa45 	bl	800888c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008410:	e008      	b.n	8008424 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841a:	e003      	b.n	8008424 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f96b 	bl	80086fa <USBD_CtlError>
  }
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	885b      	ldrh	r3, [r3, #2]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	4b41      	ldr	r3, [pc, #260]	; (8008544 <USBD_SetConfig+0x118>)
 800843e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008440:	4b40      	ldr	r3, [pc, #256]	; (8008544 <USBD_SetConfig+0x118>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d904      	bls.n	8008452 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f955 	bl	80086fa <USBD_CtlError>
 8008450:	e075      	b.n	800853e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008458:	2b02      	cmp	r3, #2
 800845a:	d002      	beq.n	8008462 <USBD_SetConfig+0x36>
 800845c:	2b03      	cmp	r3, #3
 800845e:	d023      	beq.n	80084a8 <USBD_SetConfig+0x7c>
 8008460:	e062      	b.n	8008528 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008462:	4b38      	ldr	r3, [pc, #224]	; (8008544 <USBD_SetConfig+0x118>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01a      	beq.n	80084a0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800846a:	4b36      	ldr	r3, [pc, #216]	; (8008544 <USBD_SetConfig+0x118>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2203      	movs	r2, #3
 8008478:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800847c:	4b31      	ldr	r3, [pc, #196]	; (8008544 <USBD_SetConfig+0x118>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fa11 	bl	80078aa <USBD_SetClassConfig>
 8008488:	4603      	mov	r3, r0
 800848a:	2b02      	cmp	r3, #2
 800848c:	d104      	bne.n	8008498 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f932 	bl	80086fa <USBD_CtlError>
          return;
 8008496:	e052      	b.n	800853e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f9f7 	bl	800888c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800849e:	e04e      	b.n	800853e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f9f3 	bl	800888c <USBD_CtlSendStatus>
      break;
 80084a6:	e04a      	b.n	800853e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084a8:	4b26      	ldr	r3, [pc, #152]	; (8008544 <USBD_SetConfig+0x118>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d112      	bne.n	80084d6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80084b8:	4b22      	ldr	r3, [pc, #136]	; (8008544 <USBD_SetConfig+0x118>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80084c2:	4b20      	ldr	r3, [pc, #128]	; (8008544 <USBD_SetConfig+0x118>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fa0d 	bl	80078e8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9dc 	bl	800888c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80084d4:	e033      	b.n	800853e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80084d6:	4b1b      	ldr	r3, [pc, #108]	; (8008544 <USBD_SetConfig+0x118>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d01d      	beq.n	8008520 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff f9fb 	bl	80078e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084f2:	4b14      	ldr	r3, [pc, #80]	; (8008544 <USBD_SetConfig+0x118>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <USBD_SetConfig+0x118>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff f9d1 	bl	80078aa <USBD_SetClassConfig>
 8008508:	4603      	mov	r3, r0
 800850a:	2b02      	cmp	r3, #2
 800850c:	d104      	bne.n	8008518 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f8f2 	bl	80086fa <USBD_CtlError>
          return;
 8008516:	e012      	b.n	800853e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f9b7 	bl	800888c <USBD_CtlSendStatus>
      break;
 800851e:	e00e      	b.n	800853e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f9b3 	bl	800888c <USBD_CtlSendStatus>
      break;
 8008526:	e00a      	b.n	800853e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f8e5 	bl	80086fa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <USBD_SetConfig+0x118>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff f9d6 	bl	80078e8 <USBD_ClrClassConfig>
      break;
 800853c:	bf00      	nop
    }
  }
}
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000194 	.word	0x20000194

08008548 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88db      	ldrh	r3, [r3, #6]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d004      	beq.n	8008564 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f8cc 	bl	80086fa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008562:	e021      	b.n	80085a8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800856a:	2b01      	cmp	r3, #1
 800856c:	db17      	blt.n	800859e <USBD_GetConfig+0x56>
 800856e:	2b02      	cmp	r3, #2
 8008570:	dd02      	ble.n	8008578 <USBD_GetConfig+0x30>
 8008572:	2b03      	cmp	r3, #3
 8008574:	d00b      	beq.n	800858e <USBD_GetConfig+0x46>
 8008576:	e012      	b.n	800859e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3308      	adds	r3, #8
 8008582:	2201      	movs	r2, #1
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f922 	bl	80087d0 <USBD_CtlSendData>
      break;
 800858c:	e00c      	b.n	80085a8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3304      	adds	r3, #4
 8008592:	2201      	movs	r2, #1
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f91a 	bl	80087d0 <USBD_CtlSendData>
      break;
 800859c:	e004      	b.n	80085a8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f8aa 	bl	80086fa <USBD_CtlError>
      break;
 80085a6:	bf00      	nop
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085c0:	3b01      	subs	r3, #1
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d81e      	bhi.n	8008604 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	88db      	ldrh	r3, [r3, #6]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d004      	beq.n	80085d8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f892 	bl	80086fa <USBD_CtlError>
      break;
 80085d6:	e01a      	b.n	800860e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f043 0202 	orr.w	r2, r3, #2
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	330c      	adds	r3, #12
 80085f8:	2202      	movs	r2, #2
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f8e7 	bl	80087d0 <USBD_CtlSendData>
    break;
 8008602:	e004      	b.n	800860e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f877 	bl	80086fa <USBD_CtlError>
    break;
 800860c:	bf00      	nop
  }
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	885b      	ldrh	r3, [r3, #2]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d106      	bne.n	8008636 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f92b 	bl	800888c <USBD_CtlSendStatus>
  }

}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800864e:	3b01      	subs	r3, #1
 8008650:	2b02      	cmp	r3, #2
 8008652:	d80b      	bhi.n	800866c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	885b      	ldrh	r3, [r3, #2]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d10c      	bne.n	8008676 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f911 	bl	800888c <USBD_CtlSendStatus>
    }
    break;
 800866a:	e004      	b.n	8008676 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f843 	bl	80086fa <USBD_CtlError>
    break;
 8008674:	e000      	b.n	8008678 <USBD_ClrFeature+0x3a>
    break;
 8008676:	bf00      	nop
  }
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	785a      	ldrb	r2, [r3, #1]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	3302      	adds	r3, #2
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	3303      	adds	r3, #3
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	4413      	add	r3, r2
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	3304      	adds	r3, #4
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b29a      	uxth	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	3305      	adds	r3, #5
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4413      	add	r3, r2
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	3306      	adds	r3, #6
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	3307      	adds	r3, #7
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	80da      	strh	r2, [r3, #6]

}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008704:	2180      	movs	r1, #128	; 0x80
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fa72 	bl	8009bf0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fa6e 	bl	8009bf0 <USBD_LL_StallEP>
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d032      	beq.n	8008798 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f834 	bl	80087a0 <USBD_GetLen>
 8008738:	4603      	mov	r3, r0
 800873a:	3301      	adds	r3, #1
 800873c:	b29b      	uxth	r3, r3
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	75fa      	strb	r2, [r7, #23]
 800874c:	461a      	mov	r2, r3
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	4413      	add	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	75fa      	strb	r2, [r7, #23]
 800875e:	461a      	mov	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4413      	add	r3, r2
 8008764:	2203      	movs	r2, #3
 8008766:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008768:	e012      	b.n	8008790 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	75fa      	strb	r2, [r7, #23]
 8008770:	461a      	mov	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	441a      	add	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	1c59      	adds	r1, r3, #1
 800877a:	60f9      	str	r1, [r7, #12]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	75fa      	strb	r2, [r7, #23]
 8008786:	461a      	mov	r2, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4413      	add	r3, r2
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e8      	bne.n	800876a <USBD_GetString+0x4e>
    }
  }
}
 8008798:	bf00      	nop
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80087ac:	e005      	b.n	80087ba <USBD_GetLen+0x1a>
    {
        len++;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	3301      	adds	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3301      	adds	r3, #1
 80087b8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f5      	bne.n	80087ae <USBD_GetLen+0xe>
    }

    return len;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80087e6:	88fa      	ldrh	r2, [r7, #6]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80087ec:	88fa      	ldrh	r2, [r7, #6]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087f2:	88fb      	ldrh	r3, [r7, #6]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	2100      	movs	r1, #0
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f001 fac7 	bl	8009d8c <USBD_LL_Transmit>

  return USBD_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	2100      	movs	r1, #0
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f001 fab5 	bl	8009d8c <USBD_LL_Transmit>

  return USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2203      	movs	r2, #3
 800883e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	2100      	movs	r1, #0
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f001 fad1 	bl	8009e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	2100      	movs	r1, #0
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f001 fabf 	bl	8009e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2204      	movs	r2, #4
 8008898:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800889c:	2300      	movs	r3, #0
 800889e:	2200      	movs	r2, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fa72 	bl	8009d8c <USBD_LL_Transmit>

  return USBD_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2205      	movs	r2, #5
 80088be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80088c2:	2300      	movs	r3, #0
 80088c4:	2200      	movs	r2, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fa99 	bl	8009e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <RFID_Read_UID>:
//
//  DESCRIPTION:
//  Reads the 8 bytes for the system uid
//----------------------------------------------------------------------------------
uint8_t RFID_Read_UID(uint8_t* UID_data)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af04      	add	r7, sp, #16
 80088de:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef r;
	r = HAL_I2C_Mem_Read(&M24_i2c, DevM24LR64_system, 2324, I2C_MEMADD_SIZE_16BIT, UID_data, 8, 20);
 80088e0:	2314      	movs	r3, #20
 80088e2:	9302      	str	r3, [sp, #8]
 80088e4:	2308      	movs	r3, #8
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2302      	movs	r3, #2
 80088ee:	f640 1214 	movw	r2, #2324	; 0x914
 80088f2:	21ae      	movs	r1, #174	; 0xae
 80088f4:	4807      	ldr	r0, [pc, #28]	; (8008914 <RFID_Read_UID+0x3c>)
 80088f6:	f7f9 fd6d 	bl	80023d4 <HAL_I2C_Mem_Read>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]
	if (r == HAL_OK)
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <RFID_Read_UID+0x30>
		return 8;
 8008904:	2308      	movs	r3, #8
 8008906:	e000      	b.n	800890a <RFID_Read_UID+0x32>
	else
		return 0;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	2000044c 	.word	0x2000044c

08008918 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800891e:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008920:	4a32      	ldr	r2, [pc, #200]	; (80089ec <MX_ADC1_Init+0xd4>)
 8008922:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008924:	4b30      	ldr	r3, [pc, #192]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008926:	2200      	movs	r2, #0
 8008928:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800892a:	4b2f      	ldr	r3, [pc, #188]	; (80089e8 <MX_ADC1_Init+0xd0>)
 800892c:	2200      	movs	r2, #0
 800892e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008930:	4b2d      	ldr	r3, [pc, #180]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008932:	2200      	movs	r2, #0
 8008934:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008936:	4b2c      	ldr	r3, [pc, #176]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008938:	2200      	movs	r2, #0
 800893a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800893c:	4b2a      	ldr	r3, [pc, #168]	; (80089e8 <MX_ADC1_Init+0xd0>)
 800893e:	2204      	movs	r2, #4
 8008940:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008942:	4b29      	ldr	r3, [pc, #164]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008944:	2200      	movs	r2, #0
 8008946:	619a      	str	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008948:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <MX_ADC1_Init+0xd0>)
 800894a:	2200      	movs	r2, #0
 800894c:	61da      	str	r2, [r3, #28]
  hadc1.Init.NbrOfConversion = 1;
 800894e:	4b26      	ldr	r3, [pc, #152]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008950:	2201      	movs	r2, #1
 8008952:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008954:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008956:	2200      	movs	r2, #0
 8008958:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 800895a:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <MX_ADC1_Init+0xd0>)
 800895c:	2201      	movs	r2, #1
 800895e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008960:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008962:	2200      	movs	r2, #0
 8008964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008966:	4b20      	ldr	r3, [pc, #128]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800896c:	4b1e      	ldr	r3, [pc, #120]	; (80089e8 <MX_ADC1_Init+0xd0>)
 800896e:	2200      	movs	r2, #0
 8008970:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008972:	4b1d      	ldr	r3, [pc, #116]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008974:	2200      	movs	r2, #0
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8008978:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <MX_ADC1_Init+0xd0>)
 800897a:	2200      	movs	r2, #0
 800897c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800897e:	481a      	ldr	r0, [pc, #104]	; (80089e8 <MX_ADC1_Init+0xd0>)
 8008980:	f7f7 ff92 	bl	80008a8 <HAL_ADC_Init>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <MX_ADC1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800898a:	2157      	movs	r1, #87	; 0x57
 800898c:	4818      	ldr	r0, [pc, #96]	; (80089f0 <MX_ADC1_Init+0xd8>)
 800898e:	f000 fb3b 	bl	8009008 <_Error_Handler>
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008996:	f107 031c 	add.w	r3, r7, #28
 800899a:	4619      	mov	r1, r3
 800899c:	4812      	ldr	r0, [pc, #72]	; (80089e8 <MX_ADC1_Init+0xd0>)
 800899e:	f7f8 fc9f 	bl	80012e0 <HAL_ADCEx_MultiModeConfigChannel>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <MX_ADC1_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 80089a8:	215f      	movs	r1, #95	; 0x5f
 80089aa:	4811      	ldr	r0, [pc, #68]	; (80089f0 <MX_ADC1_Init+0xd8>)
 80089ac:	f000 fb2c 	bl	8009008 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 80089b0:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <MX_ADC1_Init+0xdc>)
 80089b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80089b4:	2306      	movs	r3, #6
 80089b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80089bc:	237f      	movs	r3, #127	; 0x7f
 80089be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80089c0:	2304      	movs	r3, #4
 80089c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80089c8:	1d3b      	adds	r3, r7, #4
 80089ca:	4619      	mov	r1, r3
 80089cc:	4806      	ldr	r0, [pc, #24]	; (80089e8 <MX_ADC1_Init+0xd0>)
 80089ce:	f7f8 f927 	bl	8000c20 <HAL_ADC_ConfigChannel>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <MX_ADC1_Init+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80089d8:	216c      	movs	r1, #108	; 0x6c
 80089da:	4805      	ldr	r0, [pc, #20]	; (80089f0 <MX_ADC1_Init+0xd8>)
 80089dc:	f000 fb14 	bl	8009008 <_Error_Handler>
  }

}
 80089e0:	bf00      	nop
 80089e2:	3728      	adds	r7, #40	; 0x28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	200003bc 	.word	0x200003bc
 80089ec:	50040000 	.word	0x50040000
 80089f0:	0800a1dc 	.word	0x0800a1dc
 80089f4:	2a000400 	.word	0x2a000400

080089f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a0f      	ldr	r2, [pc, #60]	; (8008a44 <HAL_ADC_MspInit+0x4c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d118      	bne.n	8008a3c <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008a0a:	4a0f      	ldr	r2, [pc, #60]	; (8008a48 <HAL_ADC_MspInit+0x50>)
 8008a0c:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <HAL_ADC_MspInit+0x50>)
 8008a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <HAL_ADC_MspInit+0x50>)
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = uV_IN_Pin|uV_BAT_Pin;
 8008a22:	2360      	movs	r3, #96	; 0x60
 8008a24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008a26:	230b      	movs	r3, #11
 8008a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a2e:	f107 030c 	add.w	r3, r7, #12
 8008a32:	4619      	mov	r1, r3
 8008a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a38:	f7f9 f94a 	bl	8001cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	50040000 	.word	0x50040000
 8008a48:	40021000 	.word	0x40021000

08008a4c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8008a50:	4b17      	ldr	r3, [pc, #92]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a52:	4a18      	ldr	r2, [pc, #96]	; (8008ab4 <MX_CAN1_Init+0x68>)
 8008a54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8008a56:	4b16      	ldr	r3, [pc, #88]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a58:	2210      	movs	r2, #16
 8008a5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008a5c:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008a62:	4b13      	ldr	r3, [pc, #76]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008a68:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008a6e:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008a74:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008a80:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008a8c:	4b08      	ldr	r3, [pc, #32]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008a98:	4805      	ldr	r0, [pc, #20]	; (8008ab0 <MX_CAN1_Init+0x64>)
 8008a9a:	f7f8 fcf1 	bl	8001480 <HAL_CAN_Init>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <MX_CAN1_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008aa4:	214f      	movs	r1, #79	; 0x4f
 8008aa6:	4804      	ldr	r0, [pc, #16]	; (8008ab8 <MX_CAN1_Init+0x6c>)
 8008aa8:	f000 faae 	bl	8009008 <_Error_Handler>
  }

}
 8008aac:	bf00      	nop
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	20000424 	.word	0x20000424
 8008ab4:	40006400 	.word	0x40006400
 8008ab8:	0800a1ec 	.word	0x0800a1ec

08008abc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <HAL_CAN_MspInit+0x54>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d11c      	bne.n	8008b08 <HAL_CAN_MspInit+0x4c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008ace:	4a11      	ldr	r2, [pc, #68]	; (8008b14 <HAL_CAN_MspInit+0x58>)
 8008ad0:	4b10      	ldr	r3, [pc, #64]	; (8008b14 <HAL_CAN_MspInit+0x58>)
 8008ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8008ada:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <HAL_CAN_MspInit+0x58>)
 8008adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae2:	60bb      	str	r3, [r7, #8]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aec:	2302      	movs	r3, #2
 8008aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008af4:	2303      	movs	r3, #3
 8008af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008af8:	2309      	movs	r3, #9
 8008afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008afc:	f107 030c 	add.w	r3, r7, #12
 8008b00:	4619      	mov	r1, r3
 8008b02:	4805      	ldr	r0, [pc, #20]	; (8008b18 <HAL_CAN_MspInit+0x5c>)
 8008b04:	f7f9 f8e4 	bl	8001cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8008b08:	bf00      	nop
 8008b0a:	3720      	adds	r7, #32
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	40006400 	.word	0x40006400
 8008b14:	40021000 	.word	0x40021000
 8008b18:	48000400 	.word	0x48000400

08008b1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008b22:	4a18      	ldr	r2, [pc, #96]	; (8008b84 <MX_DMA_Init+0x68>)
 8008b24:	4b17      	ldr	r3, [pc, #92]	; (8008b84 <MX_DMA_Init+0x68>)
 8008b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	6493      	str	r3, [r2, #72]	; 0x48
 8008b2e:	4b15      	ldr	r3, [pc, #84]	; (8008b84 <MX_DMA_Init+0x68>)
 8008b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	607b      	str	r3, [r7, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	200c      	movs	r0, #12
 8008b40:	f7f8 fe6d 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008b44:	200c      	movs	r0, #12
 8008b46:	f7f8 fe86 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	200d      	movs	r0, #13
 8008b50:	f7f8 fe65 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008b54:	200d      	movs	r0, #13
 8008b56:	f7f8 fe7e 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7f8 fe5d 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008b64:	2010      	movs	r0, #16
 8008b66:	f7f8 fe76 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	2011      	movs	r0, #17
 8008b70:	f7f8 fe55 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008b74:	2011      	movs	r0, #17
 8008b76:	f7f8 fe6e 	bl	8001856 <HAL_NVIC_EnableIRQ>

}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40021000 	.word	0x40021000

08008b88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	; 0x28
 8008b8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b8e:	4a4d      	ldr	r2, [pc, #308]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008b90:	4b4c      	ldr	r3, [pc, #304]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b94:	f043 0304 	orr.w	r3, r3, #4
 8008b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b9a:	4b4a      	ldr	r3, [pc, #296]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	613b      	str	r3, [r7, #16]
 8008ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ba6:	4a47      	ldr	r2, [pc, #284]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008ba8:	4b46      	ldr	r3, [pc, #280]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bb2:	4b44      	ldr	r3, [pc, #272]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bbe:	4a41      	ldr	r2, [pc, #260]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bc0:	4b40      	ldr	r3, [pc, #256]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bca:	4b3e      	ldr	r3, [pc, #248]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	60bb      	str	r3, [r7, #8]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bd6:	4a3b      	ldr	r2, [pc, #236]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bd8:	4b3a      	ldr	r3, [pc, #232]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bdc:	f043 0302 	orr.w	r3, r3, #2
 8008be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008be2:	4b38      	ldr	r3, [pc, #224]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	607b      	str	r3, [r7, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008bee:	4a35      	ldr	r2, [pc, #212]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bf0:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf4:	f043 0308 	orr.w	r3, r3, #8
 8008bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bfa:	4b32      	ldr	r3, [pc, #200]	; (8008cc4 <MX_GPIO_Init+0x13c>)
 8008bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_Reset_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin 
 8008c06:	2200      	movs	r2, #0
 8008c08:	f244 71c0 	movw	r1, #18368	; 0x47c0
 8008c0c:	482e      	ldr	r0, [pc, #184]	; (8008cc8 <MX_GPIO_Init+0x140>)
 8008c0e:	f7f9 fb03 	bl	8002218 <HAL_GPIO_WritePin>
                          |OUT3_Pin|CAN_LP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_EXT2_Pin|LED_R_Pin|CS_EXT1_Pin|V_RFID_Pin, GPIO_PIN_RESET);
 8008c12:	2200      	movs	r2, #0
 8008c14:	f248 5110 	movw	r1, #34064	; 0x8510
 8008c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c1c:	f7f9 fafc 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_G_Pin|CAN_TERM_Pin, GPIO_PIN_RESET);
 8008c20:	2200      	movs	r2, #0
 8008c22:	f241 0124 	movw	r1, #4132	; 0x1024
 8008c26:	4829      	ldr	r0, [pc, #164]	; (8008ccc <MX_GPIO_Init+0x144>)
 8008c28:	f7f9 faf6 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = WIFI_Reset_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin 
 8008c2c:	f244 73c0 	movw	r3, #18368	; 0x47c0
 8008c30:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin|CAN_LP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c32:	2301      	movs	r3, #1
 8008c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c3e:	f107 0314 	add.w	r3, r7, #20
 8008c42:	4619      	mov	r1, r3
 8008c44:	4820      	ldr	r0, [pc, #128]	; (8008cc8 <MX_GPIO_Init+0x140>)
 8008c46:	f7f9 f843 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Charging_Pin|SLAVE_ID0_Pin|SLAVE_ID1_Pin|RTS_Pin;
 8008c4a:	f241 0331 	movw	r3, #4145	; 0x1031
 8008c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c50:	2300      	movs	r3, #0
 8008c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c58:	f107 0314 	add.w	r3, r7, #20
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	481a      	ldr	r0, [pc, #104]	; (8008cc8 <MX_GPIO_Init+0x140>)
 8008c60:	f7f9 f836 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_EXT2_Pin|LED_R_Pin|CS_EXT1_Pin|V_RFID_Pin;
 8008c64:	f248 5310 	movw	r3, #34064	; 0x8510
 8008c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c72:	2300      	movs	r3, #0
 8008c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c76:	f107 0314 	add.w	r3, r7, #20
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c80:	f7f9 f826 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SLAVE_ID2_Pin|SLAVE_ID2B1_Pin|H_Rev1_Pin|H_Rev2_Pin;
 8008c84:	231b      	movs	r3, #27
 8008c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c90:	f107 0314 	add.w	r3, r7, #20
 8008c94:	4619      	mov	r1, r3
 8008c96:	480d      	ldr	r0, [pc, #52]	; (8008ccc <MX_GPIO_Init+0x144>)
 8008c98:	f7f9 f81a 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|CAN_TERM_Pin;
 8008c9c:	f241 0324 	movw	r3, #4132	; 0x1024
 8008ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008caa:	2300      	movs	r3, #0
 8008cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cae:	f107 0314 	add.w	r3, r7, #20
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4805      	ldr	r0, [pc, #20]	; (8008ccc <MX_GPIO_Init+0x144>)
 8008cb6:	f7f9 f80b 	bl	8001cd0 <HAL_GPIO_Init>

}
 8008cba:	bf00      	nop
 8008cbc:	3728      	adds	r7, #40	; 0x28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40021000 	.word	0x40021000
 8008cc8:	48000800 	.word	0x48000800
 8008ccc:	48000400 	.word	0x48000400

08008cd0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 8008cd4:	481f      	ldr	r0, [pc, #124]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008cd6:	f7f9 fb49 	bl	800236c <HAL_I2C_DeInit>
  hi2c1.Instance = I2C1;
 8008cda:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008cdc:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <MX_I2C1_Init+0x88>)
 8008cde:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401A58;
 8008ce0:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008ce2:	4a1e      	ldr	r2, [pc, #120]	; (8008d5c <MX_I2C1_Init+0x8c>)
 8008ce4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008ce6:	4b1b      	ldr	r3, [pc, #108]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008cec:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008cf8:	4b16      	ldr	r3, [pc, #88]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008cfe:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008d04:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008d10:	4810      	ldr	r0, [pc, #64]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008d12:	f7f9 fa99 	bl	8002248 <HAL_I2C_Init>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008d1c:	214c      	movs	r1, #76	; 0x4c
 8008d1e:	4810      	ldr	r0, [pc, #64]	; (8008d60 <MX_I2C1_Init+0x90>)
 8008d20:	f000 f972 	bl	8009008 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008d24:	2100      	movs	r1, #0
 8008d26:	480b      	ldr	r0, [pc, #44]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008d28:	f7f9 fe32 	bl	8002990 <HAL_I2CEx_ConfigAnalogFilter>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <MX_I2C1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008d32:	2153      	movs	r1, #83	; 0x53
 8008d34:	480a      	ldr	r0, [pc, #40]	; (8008d60 <MX_I2C1_Init+0x90>)
 8008d36:	f000 f967 	bl	8009008 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4805      	ldr	r0, [pc, #20]	; (8008d54 <MX_I2C1_Init+0x84>)
 8008d3e:	f7f9 fe72 	bl	8002a26 <HAL_I2CEx_ConfigDigitalFilter>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <MX_I2C1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008d48:	215a      	movs	r1, #90	; 0x5a
 8008d4a:	4805      	ldr	r0, [pc, #20]	; (8008d60 <MX_I2C1_Init+0x90>)
 8008d4c:	f000 f95c 	bl	8009008 <_Error_Handler>
  }

}
 8008d50:	bf00      	nop
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	2000044c 	.word	0x2000044c
 8008d58:	40005400 	.word	0x40005400
 8008d5c:	00401a58 	.word	0x00401a58
 8008d60:	0800a1fc 	.word	0x0800a1fc

08008d64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a15      	ldr	r2, [pc, #84]	; (8008dc8 <HAL_I2C_MspInit+0x64>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d123      	bne.n	8008dbe <HAL_I2C_MspInit+0x5a>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d76:	23c0      	movs	r3, #192	; 0xc0
 8008d78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d7a:	2312      	movs	r3, #18
 8008d7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d82:	2303      	movs	r3, #3
 8008d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008d86:	2304      	movs	r3, #4
 8008d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d8a:	f107 030c 	add.w	r3, r7, #12
 8008d8e:	4619      	mov	r1, r3
 8008d90:	480e      	ldr	r0, [pc, #56]	; (8008dcc <HAL_I2C_MspInit+0x68>)
 8008d92:	f7f8 ff9d 	bl	8001cd0 <HAL_GPIO_Init>

	/* Peripheral interrupt init */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8008d96:	2200      	movs	r2, #0
 8008d98:	2105      	movs	r1, #5
 8008d9a:	2020      	movs	r0, #32
 8008d9c:	f7f8 fd3f 	bl	800181e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8008da0:	2020      	movs	r0, #32
 8008da2:	f7f8 fd58 	bl	8001856 <HAL_NVIC_EnableIRQ>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008da6:	4a0a      	ldr	r2, [pc, #40]	; (8008dd0 <HAL_I2C_MspInit+0x6c>)
 8008da8:	4b09      	ldr	r3, [pc, #36]	; (8008dd0 <HAL_I2C_MspInit+0x6c>)
 8008daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008db0:	6593      	str	r3, [r2, #88]	; 0x58
 8008db2:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <HAL_I2C_MspInit+0x6c>)
 8008db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dba:	60bb      	str	r3, [r7, #8]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	3720      	adds	r7, #32
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40005400 	.word	0x40005400
 8008dcc:	48000400 	.word	0x48000400
 8008dd0:	40021000 	.word	0x40021000

08008dd4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <HAL_I2C_MspDeInit+0x30>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d109      	bne.n	8008dfa <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008de6:	4a08      	ldr	r2, [pc, #32]	; (8008e08 <HAL_I2C_MspDeInit+0x34>)
 8008de8:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <HAL_I2C_MspDeInit+0x34>)
 8008dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008df0:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8008df2:	21c0      	movs	r1, #192	; 0xc0
 8008df4:	4805      	ldr	r0, [pc, #20]	; (8008e0c <HAL_I2C_MspDeInit+0x38>)
 8008df6:	f7f9 f917 	bl	8002028 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
} 
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	40005400 	.word	0x40005400
 8008e08:	40021000 	.word	0x40021000
 8008e0c:	48000400 	.word	0x48000400

08008e10 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e14:	f7f7 fb60 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e18:	f000 f85c 	bl	8008ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e1c:	f7ff feb4 	bl	8008b88 <MX_GPIO_Init>
  MX_DMA_Init();
 8008e20:	f7ff fe7c 	bl	8008b1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8008e24:	f000 fa4e 	bl	80092c4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8008e28:	f7ff fe10 	bl	8008a4c <MX_CAN1_Init>
  MX_I2C1_Init();
 8008e2c:	f7ff ff50 	bl	8008cd0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8008e30:	f000 f8f0 	bl	8009014 <MX_SPI2_Init>
  MX_ADC1_Init();
 8008e34:	f7ff fd70 	bl	8008918 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8008e38:	f000 fa78 	bl	800932c <MX_USART3_UART_Init>
 // MX_IWDG_Init();
  MX_USB_DEVICE_Init();
 8008e3c:	f000 fbd2 	bl	80095e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(  V_RFID_GPIO_Port,V_RFID_Pin,GPIO_PIN_SET);
 8008e40:	2201      	movs	r2, #1
 8008e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e4a:	f7f9 f9e5 	bl	8002218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e58:	f7f9 f9de 	bl	8002218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e62:	4816      	ldr	r0, [pc, #88]	; (8008ebc <main+0xac>)
 8008e64:	f7f9 f9d8 	bl	8002218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 8008e68:	2201      	movs	r2, #1
 8008e6a:	2104      	movs	r1, #4
 8008e6c:	4813      	ldr	r0, [pc, #76]	; (8008ebc <main+0xac>)
 8008e6e:	f7f9 f9d3 	bl	8002218 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 8008e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e76:	4912      	ldr	r1, [pc, #72]	; (8008ec0 <main+0xb0>)
 8008e78:	4812      	ldr	r0, [pc, #72]	; (8008ec4 <main+0xb4>)
 8008e7a:	f7fc fadb 	bl	8005434 <HAL_UART_Receive_DMA>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <main+0x7c>
   {
     Error_Handler();
 8008e84:	218f      	movs	r1, #143	; 0x8f
 8008e86:	4810      	ldr	r0, [pc, #64]	; (8008ec8 <main+0xb8>)
 8008e88:	f000 f8be 	bl	8009008 <_Error_Handler>
   }

   /*##-3- Start the transmission process #####################################*/
   /* While the UART in reception process, user can transmit data through
      "aTxBuffer" buffer */
   if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8008e8c:	2211      	movs	r2, #17
 8008e8e:	490f      	ldr	r1, [pc, #60]	; (8008ecc <main+0xbc>)
 8008e90:	480c      	ldr	r0, [pc, #48]	; (8008ec4 <main+0xb4>)
 8008e92:	f7fc fa63 	bl	800535c <HAL_UART_Transmit_DMA>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <main+0x94>
   {
     Error_Handler();
 8008e9c:	2197      	movs	r1, #151	; 0x97
 8008e9e:	480a      	ldr	r0, [pc, #40]	; (8008ec8 <main+0xb8>)
 8008ea0:	f000 f8b2 	bl	8009008 <_Error_Handler>
   }


   RFID_Read_UID(UID_bytes);
 8008ea4:	480a      	ldr	r0, [pc, #40]	; (8008ed0 <main+0xc0>)
 8008ea6:	f7ff fd17 	bl	80088d8 <RFID_Read_UID>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RFID_Read_UID(UID_bytes);
 8008eaa:	4809      	ldr	r0, [pc, #36]	; (8008ed0 <main+0xc0>)
 8008eac:	f7ff fd14 	bl	80088d8 <RFID_Read_UID>
	  HAL_Delay(5000);
 8008eb0:	f241 3088 	movw	r0, #5000	; 0x1388
 8008eb4:	f7f7 fb54 	bl	8000560 <HAL_Delay>
	  RFID_Read_UID(UID_bytes);
 8008eb8:	e7f7      	b.n	8008eaa <main+0x9a>
 8008eba:	bf00      	nop
 8008ebc:	48000400 	.word	0x48000400
 8008ec0:	200004a0 	.word	0x200004a0
 8008ec4:	2000079c 	.word	0x2000079c
 8008ec8:	0800a20c 	.word	0x0800a20c
 8008ecc:	20000110 	.word	0x20000110
 8008ed0:	20000498 	.word	0x20000498

08008ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b0b8      	sub	sp, #224	; 0xe0
 8008ed8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008eda:	2309      	movs	r3, #9
 8008edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008eee:	2302      	movs	r3, #2
 8008ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8008efa:	2302      	movs	r3, #2
 8008efc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8008f00:	2308      	movs	r3, #8
 8008f02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008f06:	2307      	movs	r3, #7
 8008f08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008f12:	2302      	movs	r3, #2
 8008f14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fa ff0b 	bl	8003d38 <HAL_RCC_OscConfig>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f28:	21c6      	movs	r1, #198	; 0xc6
 8008f2a:	4835      	ldr	r0, [pc, #212]	; (8009000 <SystemClock_Config+0x12c>)
 8008f2c:	f000 f86c 	bl	8009008 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f30:	230f      	movs	r3, #15
 8008f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f36:	2303      	movs	r3, #3
 8008f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008f42:	2300      	movs	r3, #0
 8008f44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008f4e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008f52:	2102      	movs	r1, #2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fb fa55 	bl	8004404 <HAL_RCC_ClockConfig>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f60:	21d4      	movs	r1, #212	; 0xd4
 8008f62:	4827      	ldr	r0, [pc, #156]	; (8009000 <SystemClock_Config+0x12c>)
 8008f64:	f000 f850 	bl	8009008 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8008f68:	f246 0346 	movw	r3, #24646	; 0x6046
 8008f6c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008f72:	2300      	movs	r3, #0
 8008f74:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008f76:	2300      	movs	r3, #0
 8008f78:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008f7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f7e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008f80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f84:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008f86:	2303      	movs	r3, #3
 8008f88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8008f8e:	2310      	movs	r3, #16
 8008f90:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008f92:	2307      	movs	r3, #7
 8008f94:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8008f96:	2304      	movs	r3, #4
 8008f98:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8008f9a:	2304      	movs	r3, #4
 8008f9c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8008f9e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8008fa2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fb fc4c 	bl	8004844 <HAL_RCCEx_PeriphCLKConfig>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <SystemClock_Config+0xe6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008fb2:	21e8      	movs	r1, #232	; 0xe8
 8008fb4:	4812      	ldr	r0, [pc, #72]	; (8009000 <SystemClock_Config+0x12c>)
 8008fb6:	f000 f827 	bl	8009008 <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008fba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008fbe:	f7fa fe55 	bl	8003c6c <HAL_PWREx_ControlVoltageScaling>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <SystemClock_Config+0xfc>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008fc8:	21ef      	movs	r1, #239	; 0xef
 8008fca:	480d      	ldr	r0, [pc, #52]	; (8009000 <SystemClock_Config+0x12c>)
 8008fcc:	f000 f81c 	bl	8009008 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008fd0:	f7fb fba2 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <SystemClock_Config+0x130>)
 8008fd8:	fba3 2302 	umull	r2, r3, r3, r2
 8008fdc:	099b      	lsrs	r3, r3, #6
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7f8 fc47 	bl	8001872 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008fe4:	2004      	movs	r0, #4
 8008fe6:	f7f8 fc51 	bl	800188c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008fea:	2200      	movs	r2, #0
 8008fec:	2100      	movs	r1, #0
 8008fee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff2:	f7f8 fc14 	bl	800181e <HAL_NVIC_SetPriority>
}
 8008ff6:	bf00      	nop
 8008ff8:	37e0      	adds	r7, #224	; 0xe0
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	0800a20c 	.word	0x0800a20c
 8009004:	10624dd3 	.word	0x10624dd3

08009008 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8009012:	e7fe      	b.n	8009012 <_Error_Handler+0xa>

08009014 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8009018:	4b1c      	ldr	r3, [pc, #112]	; (800908c <MX_SPI2_Init+0x78>)
 800901a:	4a1d      	ldr	r2, [pc, #116]	; (8009090 <MX_SPI2_Init+0x7c>)
 800901c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800901e:	4b1b      	ldr	r3, [pc, #108]	; (800908c <MX_SPI2_Init+0x78>)
 8009020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009024:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009026:	4b19      	ldr	r3, [pc, #100]	; (800908c <MX_SPI2_Init+0x78>)
 8009028:	2200      	movs	r2, #0
 800902a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800902c:	4b17      	ldr	r3, [pc, #92]	; (800908c <MX_SPI2_Init+0x78>)
 800902e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009032:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009034:	4b15      	ldr	r3, [pc, #84]	; (800908c <MX_SPI2_Init+0x78>)
 8009036:	2200      	movs	r2, #0
 8009038:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800903a:	4b14      	ldr	r3, [pc, #80]	; (800908c <MX_SPI2_Init+0x78>)
 800903c:	2200      	movs	r2, #0
 800903e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009040:	4b12      	ldr	r3, [pc, #72]	; (800908c <MX_SPI2_Init+0x78>)
 8009042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009046:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009048:	4b10      	ldr	r3, [pc, #64]	; (800908c <MX_SPI2_Init+0x78>)
 800904a:	2200      	movs	r2, #0
 800904c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <MX_SPI2_Init+0x78>)
 8009050:	2200      	movs	r2, #0
 8009052:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009054:	4b0d      	ldr	r3, [pc, #52]	; (800908c <MX_SPI2_Init+0x78>)
 8009056:	2200      	movs	r2, #0
 8009058:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800905a:	4b0c      	ldr	r3, [pc, #48]	; (800908c <MX_SPI2_Init+0x78>)
 800905c:	2200      	movs	r2, #0
 800905e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <MX_SPI2_Init+0x78>)
 8009062:	2207      	movs	r2, #7
 8009064:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <MX_SPI2_Init+0x78>)
 8009068:	2200      	movs	r2, #0
 800906a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800906c:	4b07      	ldr	r3, [pc, #28]	; (800908c <MX_SPI2_Init+0x78>)
 800906e:	2208      	movs	r2, #8
 8009070:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009072:	4806      	ldr	r0, [pc, #24]	; (800908c <MX_SPI2_Init+0x78>)
 8009074:	f7fc f898 	bl	80051a8 <HAL_SPI_Init>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <MX_SPI2_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 800907e:	2151      	movs	r1, #81	; 0x51
 8009080:	4804      	ldr	r0, [pc, #16]	; (8009094 <MX_SPI2_Init+0x80>)
 8009082:	f7ff ffc1 	bl	8009008 <_Error_Handler>
  }

}
 8009086:	bf00      	nop
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	200005a0 	.word	0x200005a0
 8009090:	40003800 	.word	0x40003800
 8009094:	0800a21c 	.word	0x0800a21c

08009098 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI2)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a11      	ldr	r2, [pc, #68]	; (80090ec <HAL_SPI_MspInit+0x54>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d11c      	bne.n	80090e4 <HAL_SPI_MspInit+0x4c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80090aa:	4a11      	ldr	r2, [pc, #68]	; (80090f0 <HAL_SPI_MspInit+0x58>)
 80090ac:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <HAL_SPI_MspInit+0x58>)
 80090ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090b4:	6593      	str	r3, [r2, #88]	; 0x58
 80090b6:	4b0e      	ldr	r3, [pc, #56]	; (80090f0 <HAL_SPI_MspInit+0x58>)
 80090b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090be:	60bb      	str	r3, [r7, #8]
 80090c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80090c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80090c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090c8:	2302      	movs	r3, #2
 80090ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090d0:	2303      	movs	r3, #3
 80090d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80090d4:	2305      	movs	r3, #5
 80090d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090d8:	f107 030c 	add.w	r3, r7, #12
 80090dc:	4619      	mov	r1, r3
 80090de:	4805      	ldr	r0, [pc, #20]	; (80090f4 <HAL_SPI_MspInit+0x5c>)
 80090e0:	f7f8 fdf6 	bl	8001cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80090e4:	bf00      	nop
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	40003800 	.word	0x40003800
 80090f0:	40021000 	.word	0x40021000
 80090f4:	48000400 	.word	0x48000400

080090f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090fe:	4a24      	ldr	r2, [pc, #144]	; (8009190 <HAL_MspInit+0x98>)
 8009100:	4b23      	ldr	r3, [pc, #140]	; (8009190 <HAL_MspInit+0x98>)
 8009102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	6613      	str	r3, [r2, #96]	; 0x60
 800910a:	4b21      	ldr	r3, [pc, #132]	; (8009190 <HAL_MspInit+0x98>)
 800910c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	607b      	str	r3, [r7, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <HAL_MspInit+0x98>)
 8009118:	4b1d      	ldr	r3, [pc, #116]	; (8009190 <HAL_MspInit+0x98>)
 800911a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009120:	6593      	str	r3, [r2, #88]	; 0x58
 8009122:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <HAL_MspInit+0x98>)
 8009124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800912e:	2003      	movs	r0, #3
 8009130:	f7f8 fb6a 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009134:	2200      	movs	r2, #0
 8009136:	2100      	movs	r1, #0
 8009138:	f06f 000b 	mvn.w	r0, #11
 800913c:	f7f8 fb6f 	bl	800181e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009140:	2200      	movs	r2, #0
 8009142:	2100      	movs	r1, #0
 8009144:	f06f 000a 	mvn.w	r0, #10
 8009148:	f7f8 fb69 	bl	800181e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800914c:	2200      	movs	r2, #0
 800914e:	2100      	movs	r1, #0
 8009150:	f06f 0009 	mvn.w	r0, #9
 8009154:	f7f8 fb63 	bl	800181e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009158:	2200      	movs	r2, #0
 800915a:	2100      	movs	r1, #0
 800915c:	f06f 0004 	mvn.w	r0, #4
 8009160:	f7f8 fb5d 	bl	800181e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8009164:	2200      	movs	r2, #0
 8009166:	2100      	movs	r1, #0
 8009168:	f06f 0003 	mvn.w	r0, #3
 800916c:	f7f8 fb57 	bl	800181e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8009170:	2200      	movs	r2, #0
 8009172:	2100      	movs	r1, #0
 8009174:	f06f 0001 	mvn.w	r0, #1
 8009178:	f7f8 fb51 	bl	800181e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	f7f8 fb4b 	bl	800181e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	40021000 	.word	0x40021000

08009194 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8009194:	b480      	push	{r7}
 8009196:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009198:	bf00      	nop
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80091a2:	b480      	push	{r7}
 80091a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091a6:	e7fe      	b.n	80091a6 <HardFault_Handler+0x4>

080091a8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091ac:	e7fe      	b.n	80091ac <MemManage_Handler+0x4>

080091ae <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80091ae:	b480      	push	{r7}
 80091b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091b2:	e7fe      	b.n	80091b2 <BusFault_Handler+0x4>

080091b4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091b8:	e7fe      	b.n	80091b8 <UsageFault_Handler+0x4>

080091ba <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80091ba:	b480      	push	{r7}
 80091bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091be:	bf00      	nop
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091cc:	bf00      	nop
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80091d6:	b480      	push	{r7}
 80091d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091da:	bf00      	nop
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091e8:	f7f7 f9a0 	bl	800052c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80091ec:	f7f8 fb6a 	bl	80018c4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80091f0:	bf00      	nop
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80091f8:	4802      	ldr	r0, [pc, #8]	; (8009204 <DMA1_Channel2_IRQHandler+0x10>)
 80091fa:	f7f8 fc89 	bl	8001b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80091fe:	bf00      	nop
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	2000070c 	.word	0x2000070c

08009208 <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800920c:	4802      	ldr	r0, [pc, #8]	; (8009218 <DMA1_Channel3_IRQHandler+0x10>)
 800920e:	f7f8 fc7f 	bl	8001b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009212:	bf00      	nop
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	2000064c 	.word	0x2000064c

0800921c <DMA1_Channel6_IRQHandler>:

/**
* @brief This function handles DMA1 channel6 global interrupt.
*/
void DMA1_Channel6_IRQHandler(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009220:	4802      	ldr	r0, [pc, #8]	; (800922c <DMA1_Channel6_IRQHandler+0x10>)
 8009222:	f7f8 fc75 	bl	8001b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8009226:	bf00      	nop
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000604 	.word	0x20000604

08009230 <DMA1_Channel7_IRQHandler>:

/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009234:	4802      	ldr	r0, [pc, #8]	; (8009240 <DMA1_Channel7_IRQHandler+0x10>)
 8009236:	f7f8 fc6b 	bl	8001b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800923a:	bf00      	nop
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20000754 	.word	0x20000754

08009244 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB OTG FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009248:	4802      	ldr	r0, [pc, #8]	; (8009254 <OTG_FS_IRQHandler+0x10>)
 800924a:	f7f9 fd63 	bl	8002d14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800924e:	bf00      	nop
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20001ab0 	.word	0x20001ab0

08009258 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800925c:	4a17      	ldr	r2, [pc, #92]	; (80092bc <SystemInit+0x64>)
 800925e:	4b17      	ldr	r3, [pc, #92]	; (80092bc <SystemInit+0x64>)
 8009260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800926c:	4a14      	ldr	r2, [pc, #80]	; (80092c0 <SystemInit+0x68>)
 800926e:	4b14      	ldr	r3, [pc, #80]	; (80092c0 <SystemInit+0x68>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <SystemInit+0x68>)
 800927a:	2200      	movs	r2, #0
 800927c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800927e:	4a10      	ldr	r2, [pc, #64]	; (80092c0 <SystemInit+0x68>)
 8009280:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <SystemInit+0x68>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009288:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800928c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <SystemInit+0x68>)
 8009290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009294:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009296:	4a0a      	ldr	r2, [pc, #40]	; (80092c0 <SystemInit+0x68>)
 8009298:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <SystemInit+0x68>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80092a2:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <SystemInit+0x68>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80092a8:	4b04      	ldr	r3, [pc, #16]	; (80092bc <SystemInit+0x64>)
 80092aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80092ae:	609a      	str	r2, [r3, #8]
#endif
}
 80092b0:	bf00      	nop
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	e000ed00 	.word	0xe000ed00
 80092c0:	40021000 	.word	0x40021000

080092c4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80092c8:	4b15      	ldr	r3, [pc, #84]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092ca:	4a16      	ldr	r2, [pc, #88]	; (8009324 <MX_USART2_UART_Init+0x60>)
 80092cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80092ce:	4b14      	ldr	r3, [pc, #80]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80092d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80092d6:	4b12      	ldr	r3, [pc, #72]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092d8:	2200      	movs	r2, #0
 80092da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80092dc:	4b10      	ldr	r3, [pc, #64]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092de:	2200      	movs	r2, #0
 80092e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80092e2:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80092e8:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092ea:	220c      	movs	r2, #12
 80092ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092ee:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80092f4:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092fa:	4b09      	ldr	r3, [pc, #36]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 8009302:	2200      	movs	r2, #0
 8009304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009306:	4806      	ldr	r0, [pc, #24]	; (8009320 <MX_USART2_UART_Init+0x5c>)
 8009308:	f7fb ffd6 	bl	80052b8 <HAL_UART_Init>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <MX_USART2_UART_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009312:	2154      	movs	r1, #84	; 0x54
 8009314:	4804      	ldr	r0, [pc, #16]	; (8009328 <MX_USART2_UART_Init+0x64>)
 8009316:	f7ff fe77 	bl	8009008 <_Error_Handler>
  }

}
 800931a:	bf00      	nop
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	2000079c 	.word	0x2000079c
 8009324:	40004400 	.word	0x40004400
 8009328:	0800a22c 	.word	0x0800a22c

0800932c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8009330:	4b15      	ldr	r3, [pc, #84]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009332:	4a16      	ldr	r2, [pc, #88]	; (800938c <MX_USART3_UART_Init+0x60>)
 8009334:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009336:	4b14      	ldr	r3, [pc, #80]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800933c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009340:	2200      	movs	r2, #0
 8009342:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009344:	4b10      	ldr	r3, [pc, #64]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009346:	2200      	movs	r2, #0
 8009348:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800934a:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 800934c:	2200      	movs	r2, #0
 800934e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009350:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009352:	220c      	movs	r2, #12
 8009354:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8009356:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800935c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800935e:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009360:	2200      	movs	r2, #0
 8009362:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009364:	4b08      	ldr	r3, [pc, #32]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009366:	2200      	movs	r2, #0
 8009368:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 800936c:	2200      	movs	r2, #0
 800936e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009370:	4805      	ldr	r0, [pc, #20]	; (8009388 <MX_USART3_UART_Init+0x5c>)
 8009372:	f7fb ffa1 	bl	80052b8 <HAL_UART_Init>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <MX_USART3_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800937c:	2169      	movs	r1, #105	; 0x69
 800937e:	4804      	ldr	r0, [pc, #16]	; (8009390 <MX_USART3_UART_Init+0x64>)
 8009380:	f7ff fe42 	bl	8009008 <_Error_Handler>
  }

}
 8009384:	bf00      	nop
 8009386:	bd80      	pop	{r7, pc}
 8009388:	20000694 	.word	0x20000694
 800938c:	40004800 	.word	0x40004800
 8009390:	0800a22c 	.word	0x0800a22c

08009394 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	; 0x28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a82      	ldr	r2, [pc, #520]	; (80095ac <HAL_UART_MspInit+0x218>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d175      	bne.n	8009492 <HAL_UART_MspInit+0xfe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80093a6:	4a82      	ldr	r2, [pc, #520]	; (80095b0 <HAL_UART_MspInit+0x21c>)
 80093a8:	4b81      	ldr	r3, [pc, #516]	; (80095b0 <HAL_UART_MspInit+0x21c>)
 80093aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b0:	6593      	str	r3, [r2, #88]	; 0x58
 80093b2:	4b7f      	ldr	r3, [pc, #508]	; (80095b0 <HAL_UART_MspInit+0x21c>)
 80093b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	693b      	ldr	r3, [r7, #16]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80093be:	230c      	movs	r3, #12
 80093c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093c2:	2302      	movs	r3, #2
 80093c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ca:	2303      	movs	r3, #3
 80093cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80093ce:	2307      	movs	r3, #7
 80093d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093d2:	f107 0314 	add.w	r3, r7, #20
 80093d6:	4619      	mov	r1, r3
 80093d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093dc:	f7f8 fc78 	bl	8001cd0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80093e0:	4b74      	ldr	r3, [pc, #464]	; (80095b4 <HAL_UART_MspInit+0x220>)
 80093e2:	4a75      	ldr	r2, [pc, #468]	; (80095b8 <HAL_UART_MspInit+0x224>)
 80093e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80093e6:	4b73      	ldr	r3, [pc, #460]	; (80095b4 <HAL_UART_MspInit+0x220>)
 80093e8:	2202      	movs	r2, #2
 80093ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80093ec:	4b71      	ldr	r3, [pc, #452]	; (80095b4 <HAL_UART_MspInit+0x220>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093f2:	4b70      	ldr	r3, [pc, #448]	; (80095b4 <HAL_UART_MspInit+0x220>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80093f8:	4b6e      	ldr	r3, [pc, #440]	; (80095b4 <HAL_UART_MspInit+0x220>)
 80093fa:	2280      	movs	r2, #128	; 0x80
 80093fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80093fe:	4b6d      	ldr	r3, [pc, #436]	; (80095b4 <HAL_UART_MspInit+0x220>)
 8009400:	2200      	movs	r2, #0
 8009402:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009404:	4b6b      	ldr	r3, [pc, #428]	; (80095b4 <HAL_UART_MspInit+0x220>)
 8009406:	2200      	movs	r2, #0
 8009408:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800940a:	4b6a      	ldr	r3, [pc, #424]	; (80095b4 <HAL_UART_MspInit+0x220>)
 800940c:	2200      	movs	r2, #0
 800940e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009410:	4b68      	ldr	r3, [pc, #416]	; (80095b4 <HAL_UART_MspInit+0x220>)
 8009412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009416:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009418:	4866      	ldr	r0, [pc, #408]	; (80095b4 <HAL_UART_MspInit+0x220>)
 800941a:	f7f8 fa61 	bl	80018e0 <HAL_DMA_Init>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <HAL_UART_MspInit+0x98>
    {
      _Error_Handler(__FILE__, __LINE__);
 8009424:	2192      	movs	r1, #146	; 0x92
 8009426:	4865      	ldr	r0, [pc, #404]	; (80095bc <HAL_UART_MspInit+0x228>)
 8009428:	f7ff fdee 	bl	8009008 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a61      	ldr	r2, [pc, #388]	; (80095b4 <HAL_UART_MspInit+0x220>)
 8009430:	66da      	str	r2, [r3, #108]	; 0x6c
 8009432:	4a60      	ldr	r2, [pc, #384]	; (80095b4 <HAL_UART_MspInit+0x220>)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8009438:	4b61      	ldr	r3, [pc, #388]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 800943a:	4a62      	ldr	r2, [pc, #392]	; (80095c4 <HAL_UART_MspInit+0x230>)
 800943c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800943e:	4b60      	ldr	r3, [pc, #384]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 8009440:	2202      	movs	r2, #2
 8009442:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009444:	4b5e      	ldr	r3, [pc, #376]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 8009446:	2210      	movs	r2, #16
 8009448:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800944a:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 800944c:	2200      	movs	r2, #0
 800944e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009450:	4b5b      	ldr	r3, [pc, #364]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 8009452:	2280      	movs	r2, #128	; 0x80
 8009454:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009456:	4b5a      	ldr	r3, [pc, #360]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 8009458:	2200      	movs	r2, #0
 800945a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800945c:	4b58      	ldr	r3, [pc, #352]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 800945e:	2200      	movs	r2, #0
 8009460:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009462:	4b57      	ldr	r3, [pc, #348]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 8009464:	2200      	movs	r2, #0
 8009466:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009468:	4b55      	ldr	r3, [pc, #340]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 800946a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800946e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009470:	4853      	ldr	r0, [pc, #332]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 8009472:	f7f8 fa35 	bl	80018e0 <HAL_DMA_Init>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <HAL_UART_MspInit+0xf0>
    {
      _Error_Handler(__FILE__, __LINE__);
 800947c:	21a3      	movs	r1, #163	; 0xa3
 800947e:	484f      	ldr	r0, [pc, #316]	; (80095bc <HAL_UART_MspInit+0x228>)
 8009480:	f7ff fdc2 	bl	8009008 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a4e      	ldr	r2, [pc, #312]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 8009488:	669a      	str	r2, [r3, #104]	; 0x68
 800948a:	4a4d      	ldr	r2, [pc, #308]	; (80095c0 <HAL_UART_MspInit+0x22c>)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009490:	e088      	b.n	80095a4 <HAL_UART_MspInit+0x210>
  else if(uartHandle->Instance==USART3)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a4c      	ldr	r2, [pc, #304]	; (80095c8 <HAL_UART_MspInit+0x234>)
 8009498:	4293      	cmp	r3, r2
 800949a:	f040 8083 	bne.w	80095a4 <HAL_UART_MspInit+0x210>
    __HAL_RCC_USART3_CLK_ENABLE();
 800949e:	4a44      	ldr	r2, [pc, #272]	; (80095b0 <HAL_UART_MspInit+0x21c>)
 80094a0:	4b43      	ldr	r3, [pc, #268]	; (80095b0 <HAL_UART_MspInit+0x21c>)
 80094a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094a8:	6593      	str	r3, [r2, #88]	; 0x58
 80094aa:	4b41      	ldr	r3, [pc, #260]	; (80095b0 <HAL_UART_MspInit+0x21c>)
 80094ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80094b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80094ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094bc:	2302      	movs	r3, #2
 80094be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094c4:	2303      	movs	r3, #3
 80094c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80094c8:	2307      	movs	r3, #7
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4619      	mov	r1, r3
 80094d2:	483e      	ldr	r0, [pc, #248]	; (80095cc <HAL_UART_MspInit+0x238>)
 80094d4:	f7f8 fbfc 	bl	8001cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80094d8:	2304      	movs	r3, #4
 80094da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094dc:	2302      	movs	r3, #2
 80094de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e4:	2303      	movs	r3, #3
 80094e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80094e8:	2307      	movs	r3, #7
 80094ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	4619      	mov	r1, r3
 80094f2:	4837      	ldr	r0, [pc, #220]	; (80095d0 <HAL_UART_MspInit+0x23c>)
 80094f4:	f7f8 fbec 	bl	8001cd0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80094f8:	4b36      	ldr	r3, [pc, #216]	; (80095d4 <HAL_UART_MspInit+0x240>)
 80094fa:	4a37      	ldr	r2, [pc, #220]	; (80095d8 <HAL_UART_MspInit+0x244>)
 80094fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 80094fe:	4b35      	ldr	r3, [pc, #212]	; (80095d4 <HAL_UART_MspInit+0x240>)
 8009500:	2202      	movs	r2, #2
 8009502:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009504:	4b33      	ldr	r3, [pc, #204]	; (80095d4 <HAL_UART_MspInit+0x240>)
 8009506:	2200      	movs	r2, #0
 8009508:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800950a:	4b32      	ldr	r3, [pc, #200]	; (80095d4 <HAL_UART_MspInit+0x240>)
 800950c:	2200      	movs	r2, #0
 800950e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009510:	4b30      	ldr	r3, [pc, #192]	; (80095d4 <HAL_UART_MspInit+0x240>)
 8009512:	2280      	movs	r2, #128	; 0x80
 8009514:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009516:	4b2f      	ldr	r3, [pc, #188]	; (80095d4 <HAL_UART_MspInit+0x240>)
 8009518:	2200      	movs	r2, #0
 800951a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800951c:	4b2d      	ldr	r3, [pc, #180]	; (80095d4 <HAL_UART_MspInit+0x240>)
 800951e:	2200      	movs	r2, #0
 8009520:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8009522:	4b2c      	ldr	r3, [pc, #176]	; (80095d4 <HAL_UART_MspInit+0x240>)
 8009524:	2200      	movs	r2, #0
 8009526:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009528:	4b2a      	ldr	r3, [pc, #168]	; (80095d4 <HAL_UART_MspInit+0x240>)
 800952a:	2200      	movs	r2, #0
 800952c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800952e:	4829      	ldr	r0, [pc, #164]	; (80095d4 <HAL_UART_MspInit+0x240>)
 8009530:	f7f8 f9d6 	bl	80018e0 <HAL_DMA_Init>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <HAL_UART_MspInit+0x1ae>
      _Error_Handler(__FILE__, __LINE__);
 800953a:	21d4      	movs	r1, #212	; 0xd4
 800953c:	481f      	ldr	r0, [pc, #124]	; (80095bc <HAL_UART_MspInit+0x228>)
 800953e:	f7ff fd63 	bl	8009008 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a23      	ldr	r2, [pc, #140]	; (80095d4 <HAL_UART_MspInit+0x240>)
 8009546:	66da      	str	r2, [r3, #108]	; 0x6c
 8009548:	4a22      	ldr	r2, [pc, #136]	; (80095d4 <HAL_UART_MspInit+0x240>)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800954e:	4b23      	ldr	r3, [pc, #140]	; (80095dc <HAL_UART_MspInit+0x248>)
 8009550:	4a23      	ldr	r2, [pc, #140]	; (80095e0 <HAL_UART_MspInit+0x24c>)
 8009552:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8009554:	4b21      	ldr	r3, [pc, #132]	; (80095dc <HAL_UART_MspInit+0x248>)
 8009556:	2202      	movs	r2, #2
 8009558:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800955a:	4b20      	ldr	r3, [pc, #128]	; (80095dc <HAL_UART_MspInit+0x248>)
 800955c:	2210      	movs	r2, #16
 800955e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009560:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <HAL_UART_MspInit+0x248>)
 8009562:	2200      	movs	r2, #0
 8009564:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009566:	4b1d      	ldr	r3, [pc, #116]	; (80095dc <HAL_UART_MspInit+0x248>)
 8009568:	2280      	movs	r2, #128	; 0x80
 800956a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800956c:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <HAL_UART_MspInit+0x248>)
 800956e:	2200      	movs	r2, #0
 8009570:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009572:	4b1a      	ldr	r3, [pc, #104]	; (80095dc <HAL_UART_MspInit+0x248>)
 8009574:	2200      	movs	r2, #0
 8009576:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8009578:	4b18      	ldr	r3, [pc, #96]	; (80095dc <HAL_UART_MspInit+0x248>)
 800957a:	2200      	movs	r2, #0
 800957c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800957e:	4b17      	ldr	r3, [pc, #92]	; (80095dc <HAL_UART_MspInit+0x248>)
 8009580:	2200      	movs	r2, #0
 8009582:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8009584:	4815      	ldr	r0, [pc, #84]	; (80095dc <HAL_UART_MspInit+0x248>)
 8009586:	f7f8 f9ab 	bl	80018e0 <HAL_DMA_Init>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <HAL_UART_MspInit+0x204>
      _Error_Handler(__FILE__, __LINE__);
 8009590:	21e5      	movs	r1, #229	; 0xe5
 8009592:	480a      	ldr	r0, [pc, #40]	; (80095bc <HAL_UART_MspInit+0x228>)
 8009594:	f7ff fd38 	bl	8009008 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a10      	ldr	r2, [pc, #64]	; (80095dc <HAL_UART_MspInit+0x248>)
 800959c:	669a      	str	r2, [r3, #104]	; 0x68
 800959e:	4a0f      	ldr	r2, [pc, #60]	; (80095dc <HAL_UART_MspInit+0x248>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80095a4:	bf00      	nop
 80095a6:	3728      	adds	r7, #40	; 0x28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	40004400 	.word	0x40004400
 80095b0:	40021000 	.word	0x40021000
 80095b4:	20000604 	.word	0x20000604
 80095b8:	4002006c 	.word	0x4002006c
 80095bc:	0800a22c 	.word	0x0800a22c
 80095c0:	20000754 	.word	0x20000754
 80095c4:	40020080 	.word	0x40020080
 80095c8:	40004800 	.word	0x40004800
 80095cc:	48000400 	.word	0x48000400
 80095d0:	48000c00 	.word	0x48000c00
 80095d4:	2000064c 	.word	0x2000064c
 80095d8:	40020030 	.word	0x40020030
 80095dc:	2000070c 	.word	0x2000070c
 80095e0:	4002001c 	.word	0x4002001c

080095e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80095e8:	2200      	movs	r2, #0
 80095ea:	490b      	ldr	r1, [pc, #44]	; (8009618 <MX_USB_DEVICE_Init+0x34>)
 80095ec:	480b      	ldr	r0, [pc, #44]	; (800961c <MX_USB_DEVICE_Init+0x38>)
 80095ee:	f7fe f900 	bl	80077f2 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80095f2:	490b      	ldr	r1, [pc, #44]	; (8009620 <MX_USB_DEVICE_Init+0x3c>)
 80095f4:	4809      	ldr	r0, [pc, #36]	; (800961c <MX_USB_DEVICE_Init+0x38>)
 80095f6:	f7fe f927 	bl	8007848 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80095fa:	490a      	ldr	r1, [pc, #40]	; (8009624 <MX_USB_DEVICE_Init+0x40>)
 80095fc:	4807      	ldr	r0, [pc, #28]	; (800961c <MX_USB_DEVICE_Init+0x38>)
 80095fe:	f7fe f889 	bl	8007714 <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8009602:	4806      	ldr	r0, [pc, #24]	; (800961c <MX_USB_DEVICE_Init+0x38>)
 8009604:	f000 fcb8 	bl	8009f78 <USBD_LL_BatteryCharging>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800960e:	4803      	ldr	r0, [pc, #12]	; (800961c <MX_USB_DEVICE_Init+0x38>)
 8009610:	f7fe f934 	bl	800787c <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009614:	bf00      	nop
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20000134 	.word	0x20000134
 800961c:	20000814 	.word	0x20000814
 8009620:	2000000c 	.word	0x2000000c
 8009624:	20000124 	.word	0x20000124

08009628 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800962c:	2200      	movs	r2, #0
 800962e:	4905      	ldr	r1, [pc, #20]	; (8009644 <CDC_Init_FS+0x1c>)
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <CDC_Init_FS+0x20>)
 8009632:	f7fe f886 	bl	8007742 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009636:	4905      	ldr	r1, [pc, #20]	; (800964c <CDC_Init_FS+0x24>)
 8009638:	4803      	ldr	r0, [pc, #12]	; (8009648 <CDC_Init_FS+0x20>)
 800963a:	f7fe f89c 	bl	8007776 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800963e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009640:	4618      	mov	r0, r3
 8009642:	bd80      	pop	{r7, pc}
 8009644:	200012b0 	.word	0x200012b0
 8009648:	20000814 	.word	0x20000814
 800964c:	20000ab0 	.word	0x20000ab0

08009650 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009650:	b480      	push	{r7}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009654:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009656:	4618      	mov	r0, r3
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	71fb      	strb	r3, [r7, #7]
 800966c:	4613      	mov	r3, r2
 800966e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	2b23      	cmp	r3, #35	; 0x23
 8009674:	d84a      	bhi.n	800970c <CDC_Control_FS+0xac>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <CDC_Control_FS+0x1c>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	0800970d 	.word	0x0800970d
 8009680:	0800970d 	.word	0x0800970d
 8009684:	0800970d 	.word	0x0800970d
 8009688:	0800970d 	.word	0x0800970d
 800968c:	0800970d 	.word	0x0800970d
 8009690:	0800970d 	.word	0x0800970d
 8009694:	0800970d 	.word	0x0800970d
 8009698:	0800970d 	.word	0x0800970d
 800969c:	0800970d 	.word	0x0800970d
 80096a0:	0800970d 	.word	0x0800970d
 80096a4:	0800970d 	.word	0x0800970d
 80096a8:	0800970d 	.word	0x0800970d
 80096ac:	0800970d 	.word	0x0800970d
 80096b0:	0800970d 	.word	0x0800970d
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	0800970d 	.word	0x0800970d
 80096c0:	0800970d 	.word	0x0800970d
 80096c4:	0800970d 	.word	0x0800970d
 80096c8:	0800970d 	.word	0x0800970d
 80096cc:	0800970d 	.word	0x0800970d
 80096d0:	0800970d 	.word	0x0800970d
 80096d4:	0800970d 	.word	0x0800970d
 80096d8:	0800970d 	.word	0x0800970d
 80096dc:	0800970d 	.word	0x0800970d
 80096e0:	0800970d 	.word	0x0800970d
 80096e4:	0800970d 	.word	0x0800970d
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	0800970d 	.word	0x0800970d
 80096f0:	0800970d 	.word	0x0800970d
 80096f4:	0800970d 	.word	0x0800970d
 80096f8:	0800970d 	.word	0x0800970d
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	0800970d 	.word	0x0800970d
 8009704:	0800970d 	.word	0x0800970d
 8009708:	0800970d 	.word	0x0800970d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800970c:	bf00      	nop
  }

  return (USBD_OK);
 800970e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4805      	ldr	r0, [pc, #20]	; (8009740 <CDC_Receive_FS+0x24>)
 800972a:	f7fe f824 	bl	8007776 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800972e:	4804      	ldr	r0, [pc, #16]	; (8009740 <CDC_Receive_FS+0x24>)
 8009730:	f7fe f835 	bl	800779e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009734:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000814 	.word	0x20000814

08009744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	; 0x28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009754:	d142      	bne.n	80097dc <HAL_PCD_MspInit+0x98>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009756:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800975a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800975c:	2302      	movs	r3, #2
 800975e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009760:	2300      	movs	r3, #0
 8009762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009764:	2303      	movs	r3, #3
 8009766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009768:	230a      	movs	r3, #10
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800976c:	f107 0314 	add.w	r3, r7, #20
 8009770:	4619      	mov	r1, r3
 8009772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009776:	f7f8 faab 	bl	8001cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800977a:	4a1a      	ldr	r2, [pc, #104]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 800977c:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 800977e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009786:	4b17      	ldr	r3, [pc, #92]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 8009788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800978e:	613b      	str	r3, [r7, #16]
 8009790:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009792:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 8009794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d114      	bne.n	80097c8 <HAL_PCD_MspInit+0x84>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800979e:	4a11      	ldr	r2, [pc, #68]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 80097a0:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 80097a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097a8:	6593      	str	r3, [r2, #88]	; 0x58
 80097aa:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80097b6:	f7fa faaf 	bl	8003d18 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80097ba:	4a0a      	ldr	r2, [pc, #40]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <HAL_PCD_MspInit+0xa0>)
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097c4:	6593      	str	r3, [r2, #88]	; 0x58
 80097c6:	e001      	b.n	80097cc <HAL_PCD_MspInit+0x88>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80097c8:	f7fa faa6 	bl	8003d18 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097cc:	2200      	movs	r2, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	2043      	movs	r0, #67	; 0x43
 80097d2:	f7f8 f824 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097d6:	2043      	movs	r0, #67	; 0x43
 80097d8:	f7f8 f83d 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097dc:	bf00      	nop
 80097de:	3728      	adds	r7, #40	; 0x28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	40021000 	.word	0x40021000

080097e8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f7fe f885 	bl	800790e <USBD_LL_SetupStage>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	4619      	mov	r1, r3
 8009836:	f7fe f8b5 	bl	80079a4 <USBD_LL_DataOutStage>
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009854:	78fa      	ldrb	r2, [r7, #3]
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	4613      	mov	r3, r2
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	1a9b      	subs	r3, r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	440b      	add	r3, r1
 8009862:	3348      	adds	r3, #72	; 0x48
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	4619      	mov	r1, r3
 800986a:	f7fe f908 	bl	8007a7e <USBD_LL_DataInStage>
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fa16 	bl	8007cb6 <USBD_LL_SOF>
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800989a:	2301      	movs	r3, #1
 800989c:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d102      	bne.n	80098ac <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 80098a6:	2301      	movs	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
    break;
 80098aa:	e002      	b.n	80098b2 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 80098ac:	2301      	movs	r3, #1
 80098ae:	73fb      	strb	r3, [r7, #15]
    break;    
 80098b0:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098b8:	7bfa      	ldrb	r2, [r7, #15]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe f9c4 	bl	8007c4a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe f97d 	bl	8007bc8 <USBD_LL_Reset>
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098e8:	461a      	mov	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f043 0301 	orr.w	r3, r3, #1
 80098f8:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe f9b2 	bl	8007c6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800990e:	4a05      	ldr	r2, [pc, #20]	; (8009924 <HAL_PCD_SuspendCallback+0x4c>)
 8009910:	4b04      	ldr	r3, [pc, #16]	; (8009924 <HAL_PCD_SuspendCallback+0x4c>)
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	f043 0306 	orr.w	r3, r3, #6
 8009918:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	e000ed00 	.word	0xe000ed00

08009928 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009938:	461a      	mov	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f023 0301 	bic.w	r3, r3, #1
 8009948:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d007      	beq.n	8009962 <HAL_PCD_ResumeCallback+0x3a>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009952:	4a09      	ldr	r2, [pc, #36]	; (8009978 <HAL_PCD_ResumeCallback+0x50>)
 8009954:	4b08      	ldr	r3, [pc, #32]	; (8009978 <HAL_PCD_ResumeCallback+0x50>)
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	f023 0306 	bic.w	r3, r3, #6
 800995c:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800995e:	f000 fb05 	bl	8009f6c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe f993 	bl	8007c94 <USBD_LL_Resume>
}
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	e000ed00 	.word	0xe000ed00

0800997c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe f9b6 	bl	8007d04 <USBD_LL_IsoOUTIncomplete>
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099b2:	78fa      	ldrb	r2, [r7, #3]
 80099b4:	4611      	mov	r1, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe f997 	bl	8007cea <USBD_LL_IsoINIncomplete>
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe f9a3 	bl	8007d1e <USBD_LL_DevConnected>
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe f9a0 	bl	8007d34 <USBD_LL_DevDisconnected>
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d142      	bne.n	8009a92 <USBD_LL_Init+0x96>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a0c:	4a23      	ldr	r2, [pc, #140]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a21      	ldr	r2, [pc, #132]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a1c:	4b1f      	ldr	r3, [pc, #124]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009a24:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a26:	2206      	movs	r2, #6
 8009a28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a2a:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8009a30:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a36:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a38:	2202      	movs	r2, #2
 8009a3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a3c:	4b17      	ldr	r3, [pc, #92]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a42:	4b16      	ldr	r3, [pc, #88]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a48:	4b14      	ldr	r3, [pc, #80]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a54:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a5a:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a60:	480e      	ldr	r0, [pc, #56]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a62:	f7f9 f82c 	bl	8002abe <HAL_PCD_Init>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009a6c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8009a70:	480b      	ldr	r0, [pc, #44]	; (8009aa0 <USBD_LL_Init+0xa4>)
 8009a72:	f7ff fac9 	bl	8009008 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a76:	2180      	movs	r1, #128	; 0x80
 8009a78:	4808      	ldr	r0, [pc, #32]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a7a:	f7fa f89c 	bl	8003bb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a7e:	2240      	movs	r2, #64	; 0x40
 8009a80:	2100      	movs	r1, #0
 8009a82:	4806      	ldr	r0, [pc, #24]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a84:	f7fa f850 	bl	8003b28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a88:	2280      	movs	r2, #128	; 0x80
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	4803      	ldr	r0, [pc, #12]	; (8009a9c <USBD_LL_Init+0xa0>)
 8009a8e:	f7fa f84b 	bl	8003b28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20001ab0 	.word	0x20001ab0
 8009aa0:	0800a23c 	.word	0x0800a23c

08009aa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f9 f908 	bl	8002cd0 <HAL_PCD_Start>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d816      	bhi.n	8009af8 <USBD_LL_Start+0x54>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <USBD_LL_Start+0x2c>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae1 	.word	0x08009ae1
 8009ad4:	08009ae7 	.word	0x08009ae7
 8009ad8:	08009aed 	.word	0x08009aed
 8009adc:	08009af3 	.word	0x08009af3
    case HAL_OK :
      usb_status = USBD_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	e00b      	b.n	8009afe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aea:	e008      	b.n	8009afe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009aec:	2301      	movs	r3, #1
 8009aee:	73fb      	strb	r3, [r7, #15]
    break;
 8009af0:	e005      	b.n	8009afe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009af2:	2302      	movs	r3, #2
 8009af4:	73fb      	strb	r3, [r7, #15]
    break;
 8009af6:	e002      	b.n	8009afe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009af8:	2302      	movs	r3, #2
 8009afa:	73fb      	strb	r3, [r7, #15]
    break;
 8009afc:	bf00      	nop
  }
  return usb_status;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	70fb      	strb	r3, [r7, #3]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70bb      	strb	r3, [r7, #2]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009b30:	78bb      	ldrb	r3, [r7, #2]
 8009b32:	883a      	ldrh	r2, [r7, #0]
 8009b34:	78f9      	ldrb	r1, [r7, #3]
 8009b36:	f7f9 fd72 	bl	800361e <HAL_PCD_EP_Open>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d817      	bhi.n	8009b74 <USBD_LL_OpenEP+0x6c>
 8009b44:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <USBD_LL_OpenEP+0x44>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b5d 	.word	0x08009b5d
 8009b50:	08009b63 	.word	0x08009b63
 8009b54:	08009b69 	.word	0x08009b69
 8009b58:	08009b6f 	.word	0x08009b6f
    case HAL_OK :
      usb_status = USBD_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b60:	e00b      	b.n	8009b7a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b62:	2302      	movs	r3, #2
 8009b64:	73fb      	strb	r3, [r7, #15]
    break;
 8009b66:	e008      	b.n	8009b7a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b6c:	e005      	b.n	8009b7a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b6e:	2302      	movs	r3, #2
 8009b70:	73fb      	strb	r3, [r7, #15]
    break;
 8009b72:	e002      	b.n	8009b7a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009b74:	2302      	movs	r3, #2
 8009b76:	73fb      	strb	r3, [r7, #15]
    break;
 8009b78:	bf00      	nop
  }
  return usb_status;
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009b9e:	78fa      	ldrb	r2, [r7, #3]
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f9 fda3 	bl	80036ee <HAL_PCD_EP_Close>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d816      	bhi.n	8009be0 <USBD_LL_CloseEP+0x5c>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <USBD_LL_CloseEP+0x34>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bc9 	.word	0x08009bc9
 8009bbc:	08009bcf 	.word	0x08009bcf
 8009bc0:	08009bd5 	.word	0x08009bd5
 8009bc4:	08009bdb 	.word	0x08009bdb
    case HAL_OK :
      usb_status = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
    break;
 8009bcc:	e00b      	b.n	8009be6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd2:	e008      	b.n	8009be6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd8:	e005      	b.n	8009be6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bde:	e002      	b.n	8009be6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009be0:	2302      	movs	r3, #2
 8009be2:	73fb      	strb	r3, [r7, #15]
    break;
 8009be4:	bf00      	nop
  }
  return usb_status;  
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7f9 fe4b 	bl	80038aa <HAL_PCD_EP_SetStall>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d816      	bhi.n	8009c4c <USBD_LL_StallEP+0x5c>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <USBD_LL_StallEP+0x34>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c3b 	.word	0x08009c3b
 8009c2c:	08009c41 	.word	0x08009c41
 8009c30:	08009c47 	.word	0x08009c47
    case HAL_OK :
      usb_status = USBD_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]
    break;
 8009c38:	e00b      	b.n	8009c52 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3e:	e008      	b.n	8009c52 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
    break;
 8009c44:	e005      	b.n	8009c52 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c46:	2302      	movs	r3, #2
 8009c48:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4a:	e002      	b.n	8009c52 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c50:	bf00      	nop
  }
  return usb_status;  
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009c76:	78fa      	ldrb	r2, [r7, #3]
 8009c78:	4611      	mov	r1, r2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7f9 fe77 	bl	800396e <HAL_PCD_EP_ClrStall>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d816      	bhi.n	8009cb8 <USBD_LL_ClearStallEP+0x5c>
 8009c8a:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <USBD_LL_ClearStallEP+0x34>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009ca7 	.word	0x08009ca7
 8009c98:	08009cad 	.word	0x08009cad
 8009c9c:	08009cb3 	.word	0x08009cb3
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca4:	e00b      	b.n	8009cbe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8009caa:	e008      	b.n	8009cbe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cac:	2301      	movs	r3, #1
 8009cae:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb0:	e005      	b.n	8009cbe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb6:	e002      	b.n	8009cbe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009cb8:	2302      	movs	r3, #2
 8009cba:	73fb      	strb	r3, [r7, #15]
    break;
 8009cbc:	bf00      	nop
  }
  return usb_status; 
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009cda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	da0b      	bge.n	8009cfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	4613      	mov	r3, r2
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	1a9b      	subs	r3, r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	333e      	adds	r3, #62	; 0x3e
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	e00b      	b.n	8009d14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d02:	68f9      	ldr	r1, [r7, #12]
 8009d04:	4613      	mov	r3, r2
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7f9 fc48 	bl	80035d4 <HAL_PCD_SetAddress>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009d48:	7bbb      	ldrb	r3, [r7, #14]
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d816      	bhi.n	8009d7c <USBD_LL_SetUSBAddress+0x5c>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <USBD_LL_SetUSBAddress+0x34>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009d6b 	.word	0x08009d6b
 8009d5c:	08009d71 	.word	0x08009d71
 8009d60:	08009d77 	.word	0x08009d77
    case HAL_OK :
      usb_status = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
    break;
 8009d68:	e00b      	b.n	8009d82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d6e:	e008      	b.n	8009d82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
    break;
 8009d74:	e005      	b.n	8009d82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d76:	2302      	movs	r3, #2
 8009d78:	73fb      	strb	r3, [r7, #15]
    break;
 8009d7a:	e002      	b.n	8009d82 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d80:	bf00      	nop
  }
  return usb_status;  
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	461a      	mov	r2, r3
 8009d98:	460b      	mov	r3, r1
 8009d9a:	72fb      	strb	r3, [r7, #11]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009dae:	893b      	ldrh	r3, [r7, #8]
 8009db0:	7af9      	ldrb	r1, [r7, #11]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	f7f9 fd3c 	bl	8003830 <HAL_PCD_EP_Transmit>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009dbc:	7dbb      	ldrb	r3, [r7, #22]
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d816      	bhi.n	8009df0 <USBD_LL_Transmit+0x64>
 8009dc2:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <USBD_LL_Transmit+0x3c>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009dd9 	.word	0x08009dd9
 8009dcc:	08009ddf 	.word	0x08009ddf
 8009dd0:	08009de5 	.word	0x08009de5
 8009dd4:	08009deb 	.word	0x08009deb
    case HAL_OK :
      usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75fb      	strb	r3, [r7, #23]
    break;
 8009ddc:	e00b      	b.n	8009df6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dde:	2302      	movs	r3, #2
 8009de0:	75fb      	strb	r3, [r7, #23]
    break;
 8009de2:	e008      	b.n	8009df6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009de4:	2301      	movs	r3, #1
 8009de6:	75fb      	strb	r3, [r7, #23]
    break;
 8009de8:	e005      	b.n	8009df6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dea:	2302      	movs	r3, #2
 8009dec:	75fb      	strb	r3, [r7, #23]
    break;
 8009dee:	e002      	b.n	8009df6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009df0:	2302      	movs	r3, #2
 8009df2:	75fb      	strb	r3, [r7, #23]
    break;
 8009df4:	bf00      	nop
  }
  return usb_status;    
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	607a      	str	r2, [r7, #4]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	72fb      	strb	r3, [r7, #11]
 8009e10:	4613      	mov	r3, r2
 8009e12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009e22:	893b      	ldrh	r3, [r7, #8]
 8009e24:	7af9      	ldrb	r1, [r7, #11]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	f7f9 fcab 	bl	8003782 <HAL_PCD_EP_Receive>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009e30:	7dbb      	ldrb	r3, [r7, #22]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d816      	bhi.n	8009e64 <USBD_LL_PrepareReceive+0x64>
 8009e36:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <USBD_LL_PrepareReceive+0x3c>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009e4d 	.word	0x08009e4d
 8009e40:	08009e53 	.word	0x08009e53
 8009e44:	08009e59 	.word	0x08009e59
 8009e48:	08009e5f 	.word	0x08009e5f
    case HAL_OK :
      usb_status = USBD_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75fb      	strb	r3, [r7, #23]
    break;
 8009e50:	e00b      	b.n	8009e6a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e52:	2302      	movs	r3, #2
 8009e54:	75fb      	strb	r3, [r7, #23]
    break;
 8009e56:	e008      	b.n	8009e6a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	75fb      	strb	r3, [r7, #23]
    break;
 8009e5c:	e005      	b.n	8009e6a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e5e:	2302      	movs	r3, #2
 8009e60:	75fb      	strb	r3, [r7, #23]
    break;
 8009e62:	e002      	b.n	8009e6a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009e64:	2302      	movs	r3, #2
 8009e66:	75fb      	strb	r3, [r7, #23]
    break;
 8009e68:	bf00      	nop
  }
  return usb_status; 
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e86:	78fa      	ldrb	r2, [r7, #3]
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f9 fcb7 	bl	80037fe <HAL_PCD_EP_GetRxCount>
 8009e90:	4603      	mov	r3, r0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <HAL_PCDEx_LPM_Callback+0x18>
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d020      	beq.n	8009ef4 <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009eb2:	e03d      	b.n	8009f30 <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009ebc:	f7ff f80a 	bl	8008ed4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x9c>)
 8009ec2:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x9c>)
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	f023 0306 	bic.w	r3, r3, #6
 8009eca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f023 0301 	bic.w	r3, r3, #1
 8009ee4:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fd fed1 	bl	8007c94 <USBD_LL_Resume>
    break;
 8009ef2:	e01d      	b.n	8009f30 <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009efc:	461a      	mov	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f043 0301 	orr.w	r3, r3, #1
 8009f0c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fd fea8 	bl	8007c6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f22:	4a05      	ldr	r2, [pc, #20]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x9c>)
 8009f24:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <HAL_PCDEx_LPM_Callback+0x9c>)
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f043 0306 	orr.w	r3, r3, #6
 8009f2c:	6113      	str	r3, [r2, #16]
    break;   
 8009f2e:	bf00      	nop
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	e000ed00 	.word	0xe000ed00

08009f3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f44:	4b03      	ldr	r3, [pc, #12]	; (8009f54 <USBD_static_malloc+0x18>)
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000198 	.word	0x20000198

08009f58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]

}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009f70:	f7fe ffb0 	bl	8008ed4 <SystemClock_Config>
}
 8009f74:	bf00      	nop
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f86:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	e000      	b.n	8009f96 <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 8009f94:	2302      	movs	r3, #2
  }
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
	...

08009fa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	6039      	str	r1, [r7, #0]
 8009fae:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2212      	movs	r2, #18
 8009fb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fb6:	4b03      	ldr	r3, [pc, #12]	; (8009fc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	20000154 	.word	0x20000154

08009fc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	6039      	str	r1, [r7, #0]
 8009fd2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2204      	movs	r2, #4
 8009fd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fda:	4b03      	ldr	r3, [pc, #12]	; (8009fe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	20000174 	.word	0x20000174

08009fec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d105      	bne.n	800a00a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ffe:	683a      	ldr	r2, [r7, #0]
 800a000:	4907      	ldr	r1, [pc, #28]	; (800a020 <USBD_FS_ProductStrDescriptor+0x34>)
 800a002:	4808      	ldr	r0, [pc, #32]	; (800a024 <USBD_FS_ProductStrDescriptor+0x38>)
 800a004:	f7fe fb8a 	bl	800871c <USBD_GetString>
 800a008:	e004      	b.n	800a014 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	4904      	ldr	r1, [pc, #16]	; (800a020 <USBD_FS_ProductStrDescriptor+0x34>)
 800a00e:	4805      	ldr	r0, [pc, #20]	; (800a024 <USBD_FS_ProductStrDescriptor+0x38>)
 800a010:	f7fe fb84 	bl	800871c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a014:	4b02      	ldr	r3, [pc, #8]	; (800a020 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20001eb8 	.word	0x20001eb8
 800a024:	0800a250 	.word	0x0800a250

0800a028 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	6039      	str	r1, [r7, #0]
 800a032:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	4904      	ldr	r1, [pc, #16]	; (800a048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a038:	4804      	ldr	r0, [pc, #16]	; (800a04c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a03a:	f7fe fb6f 	bl	800871c <USBD_GetString>
  return USBD_StrDesc;
 800a03e:	4b02      	ldr	r3, [pc, #8]	; (800a048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a040:	4618      	mov	r0, r3
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20001eb8 	.word	0x20001eb8
 800a04c:	0800a268 	.word	0x0800a268

0800a050 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	6039      	str	r1, [r7, #0]
 800a05a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d105      	bne.n	800a06e <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	4907      	ldr	r1, [pc, #28]	; (800a084 <USBD_FS_SerialStrDescriptor+0x34>)
 800a066:	4808      	ldr	r0, [pc, #32]	; (800a088 <USBD_FS_SerialStrDescriptor+0x38>)
 800a068:	f7fe fb58 	bl	800871c <USBD_GetString>
 800a06c:	e004      	b.n	800a078 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	4904      	ldr	r1, [pc, #16]	; (800a084 <USBD_FS_SerialStrDescriptor+0x34>)
 800a072:	4805      	ldr	r0, [pc, #20]	; (800a088 <USBD_FS_SerialStrDescriptor+0x38>)
 800a074:	f7fe fb52 	bl	800871c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20001eb8 	.word	0x20001eb8
 800a088:	0800a27c 	.word	0x0800a27c

0800a08c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	6039      	str	r1, [r7, #0]
 800a096:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d105      	bne.n	800a0aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4907      	ldr	r1, [pc, #28]	; (800a0c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0a2:	4808      	ldr	r0, [pc, #32]	; (800a0c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0a4:	f7fe fb3a 	bl	800871c <USBD_GetString>
 800a0a8:	e004      	b.n	800a0b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	4904      	ldr	r1, [pc, #16]	; (800a0c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0ae:	4805      	ldr	r0, [pc, #20]	; (800a0c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0b0:	f7fe fb34 	bl	800871c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0b4:	4b02      	ldr	r3, [pc, #8]	; (800a0c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20001eb8 	.word	0x20001eb8
 800a0c4:	0800a28c 	.word	0x0800a28c

0800a0c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	6039      	str	r1, [r7, #0]
 800a0d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0d4:	79fb      	ldrb	r3, [r7, #7]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4907      	ldr	r1, [pc, #28]	; (800a0fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0de:	4808      	ldr	r0, [pc, #32]	; (800a100 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0e0:	f7fe fb1c 	bl	800871c <USBD_GetString>
 800a0e4:	e004      	b.n	800a0f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	4904      	ldr	r1, [pc, #16]	; (800a0fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0ea:	4805      	ldr	r0, [pc, #20]	; (800a100 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0ec:	f7fe fb16 	bl	800871c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20001eb8 	.word	0x20001eb8
 800a100:	0800a298 	.word	0x0800a298

0800a104 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	6039      	str	r1, [r7, #0]
 800a10e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	220c      	movs	r2, #12
 800a114:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a116:	4b03      	ldr	r3, [pc, #12]	; (800a124 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	20000168 	.word	0x20000168

0800a128 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a128:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a160 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a12c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a12e:	e003      	b.n	800a138 <LoopCopyDataInit>

0800a130 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a130:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a132:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a134:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a136:	3104      	adds	r1, #4

0800a138 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a138:	480b      	ldr	r0, [pc, #44]	; (800a168 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a13a:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <LoopForever+0xe>)
	adds	r2, r0, r1
 800a13c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a13e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a140:	d3f6      	bcc.n	800a130 <CopyDataInit>
	ldr	r2, =_sbss
 800a142:	4a0b      	ldr	r2, [pc, #44]	; (800a170 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a144:	e002      	b.n	800a14c <LoopFillZerobss>

0800a146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a146:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a148:	f842 3b04 	str.w	r3, [r2], #4

0800a14c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <LoopForever+0x16>)
	cmp	r2, r3
 800a14e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a150:	d3f9      	bcc.n	800a146 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a152:	f7ff f881 	bl	8009258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a156:	f000 f811 	bl	800a17c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a15a:	f7fe fe59 	bl	8008e10 <main>

0800a15e <LoopForever>:

LoopForever:
    b LoopForever
 800a15e:	e7fe      	b.n	800a15e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a160:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800a164:	0800a300 	.word	0x0800a300
	ldr	r0, =_sdata
 800a168:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a16c:	20000178 	.word	0x20000178
	ldr	r2, =_sbss
 800a170:	20000178 	.word	0x20000178
	ldr	r3, = _ebss
 800a174:	200020b8 	.word	0x200020b8

0800a178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a178:	e7fe      	b.n	800a178 <ADC1_2_IRQHandler>
	...

0800a17c <__libc_init_array>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	4e0d      	ldr	r6, [pc, #52]	; (800a1b4 <__libc_init_array+0x38>)
 800a180:	4c0d      	ldr	r4, [pc, #52]	; (800a1b8 <__libc_init_array+0x3c>)
 800a182:	1ba4      	subs	r4, r4, r6
 800a184:	10a4      	asrs	r4, r4, #2
 800a186:	2500      	movs	r5, #0
 800a188:	42a5      	cmp	r5, r4
 800a18a:	d109      	bne.n	800a1a0 <__libc_init_array+0x24>
 800a18c:	4e0b      	ldr	r6, [pc, #44]	; (800a1bc <__libc_init_array+0x40>)
 800a18e:	4c0c      	ldr	r4, [pc, #48]	; (800a1c0 <__libc_init_array+0x44>)
 800a190:	f000 f818 	bl	800a1c4 <_init>
 800a194:	1ba4      	subs	r4, r4, r6
 800a196:	10a4      	asrs	r4, r4, #2
 800a198:	2500      	movs	r5, #0
 800a19a:	42a5      	cmp	r5, r4
 800a19c:	d105      	bne.n	800a1aa <__libc_init_array+0x2e>
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1a4:	4798      	blx	r3
 800a1a6:	3501      	adds	r5, #1
 800a1a8:	e7ee      	b.n	800a188 <__libc_init_array+0xc>
 800a1aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1ae:	4798      	blx	r3
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	e7f2      	b.n	800a19a <__libc_init_array+0x1e>
 800a1b4:	0800a2f8 	.word	0x0800a2f8
 800a1b8:	0800a2f8 	.word	0x0800a2f8
 800a1bc:	0800a2f8 	.word	0x0800a2f8
 800a1c0:	0800a2fc 	.word	0x0800a2fc

0800a1c4 <_init>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_fini>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr
